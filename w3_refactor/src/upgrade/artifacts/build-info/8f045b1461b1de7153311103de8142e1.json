{
	"id": "8f045b1461b1de7153311103de8142e1",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.25",
	"solcLongVersion": "0.8.25+commit.b61c2a91",
	"input": {
		"language": "Solidity",
		"sources": {
			"src/upgrade/MyERC20V1.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.25;\n\nimport {ERC20Received} from \"../erc20/ERC20Received.sol\";\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport {Initializable} from \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport {ERC20Upgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\ncontract MyERC20V1 is ERC20Upgradeable{\n    function initialize() external initializer {\n        __ERC20_init(\"MyERC20V1\", \"M1\");\n        _mint(msg.sender, 1000000 * 10 ** uint256(decimals()));\n    }\n    \n    function mint(address to, uint256 amount) public {\n        _mint(to, amount);\n    }\n}\n\n// contract sig {\n//     string public name;\n\n//     function setName(string calldata str) external {\n//         name = str;\n//     }\n//     function encodeSig() public pure returns(bytes memory) {\n//         return abi.encodeWithSignature(\"initialize()\");\n//     }\n// }\n"
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {ContextUpgradeable} from \"../../utils/ContextUpgradeable.sol\";\nimport {IERC20Errors} from \"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20, IERC20Metadata, IERC20Errors {\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\n    struct ERC20Storage {\n        mapping(address account => uint256) _balances;\n\n        mapping(address account => mapping(address spender => uint256)) _allowances;\n\n        uint256 _totalSupply;\n\n        string _name;\n        string _symbol;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.ERC20\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\n\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\n        assembly {\n            $.slot := ERC20StorageLocation\n        }\n    }\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        ERC20Storage storage $ = _getERC20Storage();\n        $._name = name_;\n        $._symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            $._totalSupply += value;\n        } else {\n            uint256 fromBalance = $._balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                $._balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                $._totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                $._balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        $._allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/proxy/utils/Initializable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
			},
			"src/erc20/ERC20Received.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.25;\n\ninterface ERC20Received {\n    function tokensReceived(address, uint256) external returns (bool success);\n}"
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"Initializable": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"custom:oz-upgrades-unsafe-allow": "constructor constructor() {     _disableInitializers(); } ``` ====",
						"details": "This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```",
						"errors": {
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							]
						},
						"events": {
							"Initialized(uint64)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							}
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7a61054ae84cd6c4d04c0c4450ba1d6de41e27e0a2c4f1bcdf58f796b401c609\",\"dweb:/ipfs/QmUvtdp7X1mRVyC3CsHrtPbgoqWaXHp3S1ZR24tpAQYJWM\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
				"ERC20Upgradeable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Initialized(uint64)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":\"ERC20Upgradeable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7a61054ae84cd6c4d04c0c4450ba1d6de41e27e0a2c4f1bcdf58f796b401c609\",\"dweb:/ipfs/QmUvtdp7X1mRVyC3CsHrtPbgoqWaXHp3S1ZR24tpAQYJWM\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"keccak256\":\"0x9a1766b1921bf91b3e61eb53c7a6e70725254befd4bdcbbcd3af40bd9f66856f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://29bf2fa41a172086a665c9738377b93655aa4b1ffda9fe839c8bdf646f185040\",\"dweb:/ipfs/QmeB21qDuo8WPQSrqXJbQmWHKsdeocGNSUWLhCwniVejrt\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9\",\"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV\"]},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"ContextUpgradeable": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"errors": {
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							]
						},
						"events": {
							"Initialized(uint64)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							}
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7a61054ae84cd6c4d04c0c4450ba1d6de41e27e0a2c4f1bcdf58f796b401c609\",\"dweb:/ipfs/QmUvtdp7X1mRVyC3CsHrtPbgoqWaXHp3S1ZR24tpAQYJWM\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9\",\"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"IERC1155Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC1155InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "idsLength",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "valuesLength",
									"type": "uint256"
								}
							],
							"name": "ERC1155InvalidArrayLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC1155MissingApprovalForAll",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.",
						"errors": {
							"ERC1155InsufficientBalance(address,uint256,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC1155InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC1155InvalidArrayLength(uint256,uint256)": [
								{
									"details": "Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.",
									"params": {
										"idsLength": "Length of the array of token identifiers",
										"valuesLength": "Length of the array of token amounts"
									}
								}
							],
							"ERC1155InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC1155InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC1155InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC1155MissingApprovalForAll(address,address)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"owner": "Address of the current owner of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC20Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC721Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721IncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721InsufficientApproval",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC721InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721NonexistentToken",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.",
						"errors": {
							"ERC721IncorrectOwner(address,uint256,address)": [
								{
									"details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
									"params": {
										"owner": "Address of the current owner of a token.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InsufficientApproval(address,uint256)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC721InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC721InvalidOwner(address)": [
								{
									"details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
									"params": {
										"owner": "Address of the current owner of a token."
									}
								}
							],
							"ERC721InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC721InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC721NonexistentToken(uint256)": [
								{
									"details": "Indicates a `tokenId` whose `owner` is the zero address.",
									"params": {
										"tokenId": "Identifier number of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/proxy/utils/Initializable.sol": {
				"Initializable": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"custom:oz-upgrades-unsafe-allow": "constructor constructor() {     _disableInitializers(); } ``` ====",
						"details": "This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```",
						"errors": {
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							]
						},
						"events": {
							"Initialized(uint64)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							}
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7a61054ae84cd6c4d04c0c4450ba1d6de41e27e0a2c4f1bcdf58f796b401c609\",\"dweb:/ipfs/QmUvtdp7X1mRVyC3CsHrtPbgoqWaXHp3S1ZR24tpAQYJWM\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 1330,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 1336,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 1338,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 1340,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 1342,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"IERC20Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC20 standard.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"src/erc20/ERC20Received.sol": {
				"ERC20Received": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "tokensReceived",
							"outputs": [
								{
									"internalType": "bool",
									"name": "success",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"tokensReceived(address,uint256)": "24a756d1"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokensReceived\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/erc20/ERC20Received.sol\":\"ERC20Received\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/erc20/ERC20Received.sol\":{\"keccak256\":\"0xbd16574b1ba13d46cabd1b785d03e5d2382681b6cb404662f5830f48017e0b3e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4d874dec8d927b3e8ba417319ca09399f44a522d7fa390b6897a14072cde31ba\",\"dweb:/ipfs/QmW7jyMtPrpJ2QV4mXNG5roUJBef4eywfKRsyZAQJUiSS7\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"src/upgrade/MyERC20V1.sol": {
				"MyERC20V1": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "mint",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Initialized(uint64)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"src/upgrade/MyERC20V1.sol\":374:668  contract MyERC20V1 is ERC20Upgradeable{... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"src/upgrade/MyERC20V1.sol\":374:668  contract MyERC20V1 is ERC20Upgradeable{... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x40c10f19\n      gt\n      tag_14\n      jumpi\n      dup1\n      0x40c10f19\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x8129fc1c\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_13\n      jumpi\n      jump(tag_2)\n    tag_14:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3011:3155  function name() public view virtual returns (string memory) {... */\n    tag_3:\n      tag_15\n      tag_16\n      jump\t// in\n    tag_15:\n      mload(0x40)\n      tag_17\n      swap2\n      swap1\n      tag_18\n      jump\t// in\n    tag_17:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5505:5691  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_4:\n      tag_19\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_20\n      swap2\n      swap1\n      tag_21\n      jump\t// in\n    tag_20:\n      tag_22\n      jump\t// in\n    tag_19:\n      mload(0x40)\n      tag_23\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_23:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4191:4343  function totalSupply() public view virtual returns (uint256) {... */\n    tag_5:\n      tag_25\n      tag_26\n      jump\t// in\n    tag_25:\n      mload(0x40)\n      tag_27\n      swap2\n      swap1\n      tag_28\n      jump\t// in\n    tag_27:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6251:6495  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n    tag_6:\n      tag_29\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_30\n      swap2\n      swap1\n      tag_31\n      jump\t// in\n    tag_30:\n      tag_32\n      jump\t// in\n    tag_29:\n      mload(0x40)\n      tag_33\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_33:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4049:4131  function decimals() public view virtual returns (uint8) {... */\n    tag_7:\n      tag_34\n      tag_35\n      jump\t// in\n    tag_34:\n      mload(0x40)\n      tag_36\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_36:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"src/upgrade/MyERC20V1.sol\":583:666  function mint(address to, uint256 amount) public {... */\n    tag_8:\n      tag_38\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_39\n      swap2\n      swap1\n      tag_21\n      jump\t// in\n    tag_39:\n      tag_40\n      jump\t// in\n    tag_38:\n      stop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4401:4572  function balanceOf(address account) public view virtual returns (uint256) {... */\n    tag_9:\n      tag_41\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_42\n      swap2\n      swap1\n      tag_43\n      jump\t// in\n    tag_42:\n      tag_44\n      jump\t// in\n    tag_41:\n      mload(0x40)\n      tag_45\n      swap2\n      swap1\n      tag_28\n      jump\t// in\n    tag_45:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"src/upgrade/MyERC20V1.sol\":418:573  function initialize() external initializer {... */\n    tag_10:\n      tag_46\n      tag_47\n      jump\t// in\n    tag_46:\n      stop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3268:3416  function symbol() public view virtual returns (string memory) {... */\n    tag_11:\n      tag_48\n      tag_49\n      jump\t// in\n    tag_48:\n      mload(0x40)\n      tag_50\n      swap2\n      swap1\n      tag_18\n      jump\t// in\n    tag_50:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4767:4945  function transfer(address to, uint256 value) public virtual returns (bool) {... */\n    tag_12:\n      tag_51\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_52\n      swap2\n      swap1\n      tag_21\n      jump\t// in\n    tag_52:\n      tag_53\n      jump\t// in\n    tag_51:\n      mload(0x40)\n      tag_54\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_54:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5003:5198  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n    tag_13:\n      tag_55\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_56\n      swap2\n      swap1\n      tag_57\n      jump\t// in\n    tag_56:\n      tag_58\n      jump\t// in\n    tag_55:\n      mload(0x40)\n      tag_59\n      swap2\n      swap1\n      tag_28\n      jump\t// in\n    tag_59:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3011:3155  function name() public view virtual returns (string memory) {... */\n    tag_16:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3056:3069  string memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3081:3103  ERC20Storage storage $ */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3106:3124  _getERC20Storage() */\n      tag_61\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3106:3122  _getERC20Storage */\n      tag_62\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3106:3124  _getERC20Storage() */\n      jump\t// in\n    tag_61:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3081:3124  ERC20Storage storage $ = _getERC20Storage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3141:3142  $ */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3141:3148  $._name */\n      0x03\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3134:3148  return $._name */\n      dup1\n      sload\n      tag_63\n      swap1\n      tag_64\n      jump\t// in\n    tag_63:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_65\n      swap1\n      tag_64\n      jump\t// in\n    tag_65:\n      dup1\n      iszero\n      tag_66\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_67\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_66)\n    tag_67:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_68:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_68\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_66:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3011:3155  function name() public view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5505:5691  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_22:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5578:5582  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5594:5607  address owner */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5610:5622  _msgSender() */\n      tag_70\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5610:5620  _msgSender */\n      tag_71\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5610:5622  _msgSender() */\n      jump\t// in\n    tag_70:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5594:5622  address owner = _msgSender() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5632:5663  _approve(owner, spender, value) */\n      tag_72\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5641:5646  owner */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5648:5655  spender */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5657:5662  value */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5632:5640  _approve */\n      tag_73\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5632:5663  _approve(owner, spender, value) */\n      jump\t// in\n    tag_72:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5680:5684  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5673:5684  return true */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5505:5691  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4191:4343  function totalSupply() public view virtual returns (uint256) {... */\n    tag_26:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4243:4250  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4262:4284  ERC20Storage storage $ */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4287:4305  _getERC20Storage() */\n      tag_75\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4287:4303  _getERC20Storage */\n      tag_62\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4287:4305  _getERC20Storage() */\n      jump\t// in\n    tag_75:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4262:4305  ERC20Storage storage $ = _getERC20Storage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4322:4323  $ */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4322:4336  $._totalSupply */\n      0x02\n      add\n      sload\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4315:4336  return $._totalSupply */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4191:4343  function totalSupply() public view virtual returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6251:6495  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n    tag_32:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6338:6342  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6354:6369  address spender */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6372:6384  _msgSender() */\n      tag_77\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6372:6382  _msgSender */\n      tag_71\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6372:6384  _msgSender() */\n      jump\t// in\n    tag_77:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6354:6384  address spender = _msgSender() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6394:6431  _spendAllowance(from, spender, value) */\n      tag_78\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6410:6414  from */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6416:6423  spender */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6425:6430  value */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6394:6409  _spendAllowance */\n      tag_79\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6394:6431  _spendAllowance(from, spender, value) */\n      jump\t// in\n    tag_78:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6441:6467  _transfer(from, to, value) */\n      tag_80\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6451:6455  from */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6457:6459  to */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6461:6466  value */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6441:6450  _transfer */\n      tag_81\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6441:6467  _transfer(from, to, value) */\n      jump\t// in\n    tag_80:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6484:6488  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6477:6488  return true */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6251:6495  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4049:4131  function decimals() public view virtual returns (uint8) {... */\n    tag_35:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4098:4103  uint8 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4122:4124  18 */\n      0x12\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4115:4124  return 18 */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4049:4131  function decimals() public view virtual returns (uint8) {... */\n      swap1\n      jump\t// out\n        /* \"src/upgrade/MyERC20V1.sol\":583:666  function mint(address to, uint256 amount) public {... */\n    tag_40:\n        /* \"src/upgrade/MyERC20V1.sol\":642:659  _mint(to, amount) */\n      tag_84\n        /* \"src/upgrade/MyERC20V1.sol\":648:650  to */\n      dup3\n        /* \"src/upgrade/MyERC20V1.sol\":652:658  amount */\n      dup3\n        /* \"src/upgrade/MyERC20V1.sol\":642:647  _mint */\n      tag_85\n        /* \"src/upgrade/MyERC20V1.sol\":642:659  _mint(to, amount) */\n      jump\t// in\n    tag_84:\n        /* \"src/upgrade/MyERC20V1.sol\":583:666  function mint(address to, uint256 amount) public {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4401:4572  function balanceOf(address account) public view virtual returns (uint256) {... */\n    tag_44:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4466:4473  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4485:4507  ERC20Storage storage $ */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4510:4528  _getERC20Storage() */\n      tag_87\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4510:4526  _getERC20Storage */\n      tag_62\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4510:4528  _getERC20Storage() */\n      jump\t// in\n    tag_87:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4485:4528  ERC20Storage storage $ = _getERC20Storage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4545:4546  $ */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4545:4556  $._balances */\n      0x00\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4545:4565  $._balances[account] */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4557:4564  account */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4545:4565  $._balances[account] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4538:4565  return $._balances[account] */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4401:4572  function balanceOf(address account) public view virtual returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"src/upgrade/MyERC20V1.sol\":418:573  function initialize() external initializer {... */\n    tag_47:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4158:4188  InitializableStorage storage $ */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4191:4217  _getInitializableStorage() */\n      tag_89\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4191:4215  _getInitializableStorage */\n      tag_90\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4191:4217  _getInitializableStorage() */\n      jump\t// in\n    tag_89:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4158:4217  InitializableStorage storage $ = _getInitializableStorage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4279:4298  bool isTopLevelCall */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4302:4303  $ */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4302:4317  $._initializing */\n      0x00\n      add\n      0x08\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4301:4317  !$._initializing */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4279:4317  bool isTopLevelCall = !$._initializing */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4327:4345  uint64 initialized */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4348:4349  $ */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4348:4362  $._initialized */\n      0x00\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4327:4362  uint64 initialized = $._initialized */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4706:4723  bool initialSetup */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4741:4742  0 */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4726:4737  initialized */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4726:4742  initialized == 0 */\n      0xffffffffffffffff\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4726:4760  initialized == 0 && isTopLevelCall */\n      dup1\n      iszero\n      tag_91\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4746:4760  isTopLevelCall */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4726:4760  initialized == 0 && isTopLevelCall */\n    tag_91:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4706:4760  bool initialSetup = initialized == 0 && isTopLevelCall */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4770:4787  bool construction */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4805:4806  1 */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4790:4801  initialized */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4790:4806  initialized == 1 */\n      0xffffffffffffffff\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4790:4840  initialized == 1 && address(this).code.length == 0 */\n      dup1\n      iszero\n      tag_92\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4839:4840  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4818:4822  this */\n      address\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4810:4835  address(this).code.length */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      extcodesize\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4810:4840  address(this).code.length == 0 */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4790:4840  initialized == 1 && address(this).code.length == 0 */\n    tag_92:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4770:4840  bool construction = initialized == 1 && address(this).code.length == 0 */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4856:4868  initialSetup */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4855:4868  !initialSetup */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4855:4885  !initialSetup && !construction */\n      dup1\n      iszero\n      tag_93\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4873:4885  construction */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4872:4885  !construction */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4855:4885  !initialSetup && !construction */\n    tag_93:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4851:4942  if (!initialSetup && !construction) {... */\n      iszero\n      tag_94\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4908:4931  InvalidInitialization() */\n      mload(0x40)\n      0xf92ee8a900000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4851:4942  if (!initialSetup && !construction) {... */\n    tag_94:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4968:4969  1 */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4951:4952  $ */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4951:4965  $._initialized */\n      0x00\n      add\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4951:4969  $._initialized = 1 */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4983:4997  isTopLevelCall */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4979:5046  if (isTopLevelCall) {... */\n      iszero\n      tag_95\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5031:5035  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5013:5014  $ */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5013:5028  $._initializing */\n      0x00\n      add\n      0x08\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5013:5035  $._initializing = true */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4979:5046  if (isTopLevelCall) {... */\n    tag_95:\n        /* \"src/upgrade/MyERC20V1.sol\":471:502  __ERC20_init(\"MyERC20V1\", \"M1\") */\n      tag_97\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x09\n      dup2\n      mstore\n      0x20\n      add\n      0x4d79455243323056310000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      pop\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x02\n      dup2\n      mstore\n      0x20\n      add\n      0x4d31000000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      pop\n        /* \"src/upgrade/MyERC20V1.sol\":471:483  __ERC20_init */\n      tag_98\n        /* \"src/upgrade/MyERC20V1.sol\":471:502  __ERC20_init(\"MyERC20V1\", \"M1\") */\n      jump\t// in\n    tag_97:\n        /* \"src/upgrade/MyERC20V1.sol\":512:566  _mint(msg.sender, 1000000 * 10 ** uint256(decimals())) */\n      tag_99\n        /* \"src/upgrade/MyERC20V1.sol\":518:528  msg.sender */\n      caller\n        /* \"src/upgrade/MyERC20V1.sol\":554:564  decimals() */\n      tag_100\n        /* \"src/upgrade/MyERC20V1.sol\":554:562  decimals */\n      tag_35\n        /* \"src/upgrade/MyERC20V1.sol\":554:564  decimals() */\n      jump\t// in\n    tag_100:\n        /* \"src/upgrade/MyERC20V1.sol\":546:565  uint256(decimals()) */\n      0xff\n      and\n        /* \"src/upgrade/MyERC20V1.sol\":540:542  10 */\n      0x0a\n        /* \"src/upgrade/MyERC20V1.sol\":540:565  10 ** uint256(decimals()) */\n      tag_101\n      swap2\n      swap1\n      tag_102\n      jump\t// in\n    tag_101:\n        /* \"src/upgrade/MyERC20V1.sol\":530:537  1000000 */\n      0x0f4240\n        /* \"src/upgrade/MyERC20V1.sol\":530:565  1000000 * 10 ** uint256(decimals()) */\n      tag_103\n      swap2\n      swap1\n      tag_104\n      jump\t// in\n    tag_103:\n        /* \"src/upgrade/MyERC20V1.sol\":512:517  _mint */\n      tag_85\n        /* \"src/upgrade/MyERC20V1.sol\":512:566  _mint(msg.sender, 1000000 * 10 ** uint256(decimals())) */\n      jump\t// in\n    tag_99:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5070:5084  isTopLevelCall */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5066:5167  if (isTopLevelCall) {... */\n      iszero\n      tag_105\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5118:5123  false */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5100:5101  $ */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5100:5115  $._initializing */\n      0x00\n      add\n      0x08\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5100:5123  $._initializing = false */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5142:5156  Initialized(1) */\n      0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5154:5155  1 */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5142:5156  Initialized(1) */\n      mload(0x40)\n      tag_106\n      swap2\n      swap1\n      tag_107\n      jump\t// in\n    tag_106:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5066:5167  if (isTopLevelCall) {... */\n    tag_105:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4092:5173  {... */\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"src/upgrade/MyERC20V1.sol\":418:573  function initialize() external initializer {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3268:3416  function symbol() public view virtual returns (string memory) {... */\n    tag_49:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3315:3328  string memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3340:3362  ERC20Storage storage $ */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3365:3383  _getERC20Storage() */\n      tag_109\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3365:3381  _getERC20Storage */\n      tag_62\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3365:3383  _getERC20Storage() */\n      jump\t// in\n    tag_109:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3340:3383  ERC20Storage storage $ = _getERC20Storage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3400:3401  $ */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3400:3409  $._symbol */\n      0x04\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3393:3409  return $._symbol */\n      dup1\n      sload\n      tag_110\n      swap1\n      tag_64\n      jump\t// in\n    tag_110:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_111\n      swap1\n      tag_64\n      jump\t// in\n    tag_111:\n      dup1\n      iszero\n      tag_112\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_113\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_112)\n    tag_113:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_114:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_114\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_112:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3268:3416  function symbol() public view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4767:4945  function transfer(address to, uint256 value) public virtual returns (bool) {... */\n    tag_53:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4836:4840  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4852:4865  address owner */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4868:4880  _msgSender() */\n      tag_116\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4868:4878  _msgSender */\n      tag_71\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4868:4880  _msgSender() */\n      jump\t// in\n    tag_116:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4852:4880  address owner = _msgSender() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4890:4917  _transfer(owner, to, value) */\n      tag_117\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4900:4905  owner */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4907:4909  to */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4911:4916  value */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4890:4899  _transfer */\n      tag_81\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4890:4917  _transfer(owner, to, value) */\n      jump\t// in\n    tag_117:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4934:4938  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4927:4938  return true */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4767:4945  function transfer(address to, uint256 value) public virtual returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5003:5198  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n    tag_58:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5083:5090  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5102:5124  ERC20Storage storage $ */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5127:5145  _getERC20Storage() */\n      tag_119\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5127:5143  _getERC20Storage */\n      tag_62\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5127:5145  _getERC20Storage() */\n      jump\t// in\n    tag_119:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5102:5145  ERC20Storage storage $ = _getERC20Storage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5162:5163  $ */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5162:5175  $._allowances */\n      0x01\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5162:5182  $._allowances[owner] */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5176:5181  owner */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5162:5182  $._allowances[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5162:5191  $._allowances[owner][spender] */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5183:5190  spender */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5162:5191  $._allowances[owner][spender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5155:5191  return $._allowances[owner][spender] */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5003:5198  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2242:2395  function _getERC20Storage() private pure returns (ERC20Storage storage $) {... */\n    tag_62:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2292:2314  ERC20Storage storage $ */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2359:2379  ERC20StorageLocation */\n      0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2349:2379  $.slot := ERC20StorageLocation */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2242:2395  function _getERC20Storage() private pure returns (ERC20Storage storage $) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":887:983  function _msgSender() internal view virtual returns (address) {... */\n    tag_71:\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":940:947  address */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":966:976  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":959:976  return msg.sender */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":887:983  function _msgSender() internal view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10264:10392  function _approve(address owner, address spender, uint256 value) internal {... */\n    tag_73:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10348:10385  _approve(owner, spender, value, true) */\n      tag_123\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10357:10362  owner */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10364:10371  spender */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10373:10378  value */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10380:10384  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10348:10356  _approve */\n      tag_124\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10348:10385  _approve(owner, spender, value, true) */\n      jump\t// in\n    tag_123:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10264:10392  function _approve(address owner, address spender, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11993:12470  function _spendAllowance(address owner, address spender, uint256 value) internal virtual {... */\n    tag_79:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12092:12116  uint256 currentAllowance */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12119:12144  allowance(owner, spender) */\n      tag_126\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12129:12134  owner */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12136:12143  spender */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12119:12128  allowance */\n      tag_58\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12119:12144  allowance(owner, spender) */\n      jump\t// in\n    tag_126:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12092:12144  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12178:12195  type(uint256).max */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12158:12174  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12158:12195  currentAllowance != type(uint256).max */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12154:12464  if (currentAllowance != type(uint256).max) {... */\n      tag_127\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12234:12239  value */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12215:12231  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12215:12239  currentAllowance < value */\n      lt\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12211:12341  if (currentAllowance < value) {... */\n      iszero\n      tag_128\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12293:12300  spender */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12302:12318  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12320:12325  value */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12266:12326  ERC20InsufficientAllowance(spender, currentAllowance, value) */\n      mload(0x40)\n      0xfb8f41b200000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_129\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_130\n      jump\t// in\n    tag_129:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12211:12341  if (currentAllowance < value) {... */\n    tag_128:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12382:12439  _approve(owner, spender, currentAllowance - value, false) */\n      tag_131\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12391:12396  owner */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12398:12405  spender */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12426:12431  value */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12407:12423  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12407:12431  currentAllowance - value */\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12433:12438  false */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12382:12390  _approve */\n      tag_124\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12382:12439  _approve(owner, spender, currentAllowance - value, false) */\n      jump\t// in\n    tag_131:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12154:12464  if (currentAllowance != type(uint256).max) {... */\n    tag_127:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12082:12470  {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11993:12470  function _spendAllowance(address owner, address spender, uint256 value) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6868:7168  function _transfer(address from, address to, uint256 value) internal {... */\n    tag_81:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6967:6968  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6951:6969  from == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6951:6955  from */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6951:6969  from == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6947:7033  if (from == address(0)) {... */\n      tag_133\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7019:7020  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6992:7022  ERC20InvalidSender(address(0)) */\n      mload(0x40)\n      0x96c6fd1e00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_134\n      swap2\n      swap1\n      tag_135\n      jump\t// in\n    tag_134:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6947:7033  if (from == address(0)) {... */\n    tag_133:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7060:7061  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7046:7062  to == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7046:7048  to */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7046:7062  to == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7042:7128  if (to == address(0)) {... */\n      tag_136\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7114:7115  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7085:7117  ERC20InvalidReceiver(address(0)) */\n      mload(0x40)\n      0xec442f0500000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_137\n      swap2\n      swap1\n      tag_135\n      jump\t// in\n    tag_137:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7042:7128  if (to == address(0)) {... */\n    tag_136:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7137:7161  _update(from, to, value) */\n      tag_138\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7145:7149  from */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7151:7153  to */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7155:7160  value */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7137:7144  _update */\n      tag_139\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7137:7161  _update(from, to, value) */\n      jump\t// in\n    tag_138:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6868:7168  function _transfer(address from, address to, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8996:9204  function _mint(address account, uint256 value) internal {... */\n    tag_85:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9085:9086  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9066:9087  account == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9066:9073  account */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9066:9087  account == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9062:9153  if (account == address(0)) {... */\n      tag_141\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9139:9140  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9110:9142  ERC20InvalidReceiver(address(0)) */\n      mload(0x40)\n      0xec442f0500000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_142\n      swap2\n      swap1\n      tag_135\n      jump\t// in\n    tag_142:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9062:9153  if (account == address(0)) {... */\n    tag_141:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9162:9197  _update(address(0), account, value) */\n      tag_143\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9178:9179  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9182:9189  account */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9191:9196  value */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9162:9169  _update */\n      tag_139\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9162:9197  _update(address(0), account, value) */\n      jump\t// in\n    tag_143:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8996:9204  function _mint(address account, uint256 value) internal {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8737:8907  function _getInitializableStorage() private pure returns (InitializableStorage storage $) {... */\n    tag_90:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8795:8825  InitializableStorage storage $ */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8870:8891  INITIALIZABLE_STORAGE */\n      0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8860:8891  $.slot := INITIALIZABLE_STORAGE */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8737:8907  function _getInitializableStorage() private pure returns (InitializableStorage storage $) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2577:2724  function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {... */\n    tag_98:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6951  _checkInitializing() */\n      tag_146\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6949  _checkInitializing */\n      tag_147\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6951  _checkInitializing() */\n      jump\t// in\n    tag_146:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2679:2717  __ERC20_init_unchained(name_, symbol_) */\n      tag_149\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2702:2707  name_ */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2709:2716  symbol_ */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2679:2701  __ERC20_init_unchained */\n      tag_150\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2679:2717  __ERC20_init_unchained(name_, symbol_) */\n      jump\t// in\n    tag_149:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2577:2724  function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11224:11711  function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {... */\n    tag_124:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11332:11354  ERC20Storage storage $ */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11357:11375  _getERC20Storage() */\n      tag_152\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11357:11373  _getERC20Storage */\n      tag_62\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11357:11375  _getERC20Storage() */\n      jump\t// in\n    tag_152:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11332:11375  ERC20Storage storage $ = _getERC20Storage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11406:11407  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11389:11408  owner == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11389:11394  owner */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11389:11408  owner == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11385:11474  if (owner == address(0)) {... */\n      tag_153\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11460:11461  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11431:11463  ERC20InvalidApprover(address(0)) */\n      mload(0x40)\n      0xe602df0500000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_154\n      swap2\n      swap1\n      tag_135\n      jump\t// in\n    tag_154:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11385:11474  if (owner == address(0)) {... */\n    tag_153:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11506:11507  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11487:11508  spender == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11487:11494  spender */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11487:11508  spender == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11483:11573  if (spender == address(0)) {... */\n      tag_155\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11559:11560  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11531:11562  ERC20InvalidSpender(address(0)) */\n      mload(0x40)\n      0x94280d6200000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_156\n      swap2\n      swap1\n      tag_135\n      jump\t// in\n    tag_156:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11483:11573  if (spender == address(0)) {... */\n    tag_155:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11614:11619  value */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11582:11583  $ */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11582:11595  $._allowances */\n      0x01\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11582:11602  $._allowances[owner] */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11596:11601  owner */\n      dup8\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11582:11602  $._allowances[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11582:11611  $._allowances[owner][spender] */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11603:11610  spender */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11582:11611  $._allowances[owner][spender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11582:11619  $._allowances[owner][spender] = value */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11633:11642  emitEvent */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11629:11705  if (emitEvent) {... */\n      iszero\n      tag_157\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11679:11686  spender */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11663:11694  Approval(owner, spender, value) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11672:11677  owner */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11663:11694  Approval(owner, spender, value) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11688:11693  value */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11663:11694  Approval(owner, spender, value) */\n      mload(0x40)\n      tag_158\n      swap2\n      swap1\n      tag_28\n      jump\t// in\n    tag_158:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11629:11705  if (emitEvent) {... */\n    tag_157:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11322:11711  {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11224:11711  function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7483:8653  function _update(address from, address to, uint256 value) internal virtual {... */\n    tag_139:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7568:7590  ERC20Storage storage $ */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7593:7611  _getERC20Storage() */\n      tag_160\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7593:7609  _getERC20Storage */\n      tag_62\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7593:7611  _getERC20Storage() */\n      jump\t// in\n    tag_160:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7568:7611  ERC20Storage storage $ = _getERC20Storage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7641:7642  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7625:7643  from == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7625:7629  from */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7625:7643  from == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7621:8167  if (from == address(0)) {... */\n      tag_161\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7779:7784  value */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7761:7762  $ */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7761:7775  $._totalSupply */\n      0x02\n      add\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7761:7784  $._totalSupply += value */\n      dup3\n      dup3\n      sload\n      tag_162\n      swap2\n      swap1\n      tag_163\n      jump\t// in\n    tag_162:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7621:8167  if (from == address(0)) {... */\n      jump(tag_164)\n    tag_161:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7815:7834  uint256 fromBalance */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7837:7838  $ */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7837:7848  $._balances */\n      0x00\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7837:7854  $._balances[from] */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7849:7853  from */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7837:7854  $._balances[from] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7815:7854  uint256 fromBalance = $._balances[from] */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7886:7891  value */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7872:7883  fromBalance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7872:7891  fromBalance < value */\n      lt\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7868:7983  if (fromBalance < value) {... */\n      iszero\n      tag_165\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7943:7947  from */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7949:7960  fromBalance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7962:7967  value */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7918:7968  ERC20InsufficientBalance(from, fromBalance, value) */\n      mload(0x40)\n      0xe450d38c00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_166\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_130\n      jump\t// in\n    tag_166:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7868:7983  if (fromBalance < value) {... */\n    tag_165:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8137:8142  value */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8123:8134  fromBalance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8123:8142  fromBalance - value */\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8103:8104  $ */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8103:8114  $._balances */\n      0x00\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8103:8120  $._balances[from] */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8115:8119  from */\n      dup8\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8103:8120  $._balances[from] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8103:8142  $._balances[from] = fromBalance - value */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7801:8167  {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7621:8167  if (from == address(0)) {... */\n    tag_164:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8195:8196  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8181:8197  to == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8181:8183  to */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8181:8197  to == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8177:8606  if (to == address(0)) {... */\n      tag_167\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8362:8367  value */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8344:8345  $ */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8344:8358  $._totalSupply */\n      0x02\n      add\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8344:8367  $._totalSupply -= value */\n      dup3\n      dup3\n      sload\n      sub\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8177:8606  if (to == address(0)) {... */\n      jump(tag_168)\n    tag_167:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8576:8581  value */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8557:8558  $ */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8557:8568  $._balances */\n      0x00\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8557:8572  $._balances[to] */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8569:8571  to */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8557:8572  $._balances[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8557:8581  $._balances[to] += value */\n      dup3\n      dup3\n      sload\n      add\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8177:8606  if (to == address(0)) {... */\n    tag_168:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8636:8638  to */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8621:8646  Transfer(from, to, value) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8630:8634  from */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8621:8646  Transfer(from, to, value) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8640:8645  value */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8621:8646  Transfer(from, to, value) */\n      mload(0x40)\n      tag_169\n      swap2\n      swap1\n      tag_28\n      jump\t// in\n    tag_169:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7558:8653  {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7483:8653  function _update(address from, address to, uint256 value) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7084:7225  function _checkInitializing() internal view virtual {... */\n    tag_147:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7151:7168  _isInitializing() */\n      tag_171\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7151:7166  _isInitializing */\n      tag_172\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7151:7168  _isInitializing() */\n      jump\t// in\n    tag_171:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7146:7219  if (!_isInitializing()) {... */\n      tag_173\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7191:7208  NotInitializing() */\n      mload(0x40)\n      0xd7e6bcf800000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7146:7219  if (!_isInitializing()) {... */\n    tag_173:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7084:7225  function _checkInitializing() internal view virtual {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2730:2946  function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {... */\n    tag_150:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6951  _checkInitializing() */\n      tag_175\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6949  _checkInitializing */\n      tag_147\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6951  _checkInitializing() */\n      jump\t// in\n    tag_175:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2842:2864  ERC20Storage storage $ */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2867:2885  _getERC20Storage() */\n      tag_177\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2867:2883  _getERC20Storage */\n      tag_62\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2867:2885  _getERC20Storage() */\n      jump\t// in\n    tag_177:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2842:2885  ERC20Storage storage $ = _getERC20Storage() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2905:2910  name_ */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2895:2896  $ */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2895:2902  $._name */\n      0x03\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2895:2910  $._name = name_ */\n      swap1\n      dup2\n      tag_178\n      swap2\n      swap1\n      tag_179\n      jump\t// in\n    tag_178:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2932:2939  symbol_ */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2920:2921  $ */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2920:2929  $._symbol */\n      0x04\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2920:2939  $._symbol = symbol_ */\n      swap1\n      dup2\n      tag_180\n      swap2\n      swap1\n      tag_179\n      jump\t// in\n    tag_180:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2832:2946  {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2730:2946  function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8487:8607  function _isInitializing() internal view returns (bool) {... */\n    tag_172:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8537:8541  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8560:8586  _getInitializableStorage() */\n      tag_182\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8560:8584  _getInitializableStorage */\n      tag_90\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8560:8586  _getInitializableStorage() */\n      jump\t// in\n    tag_182:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8560:8600  _getInitializableStorage()._initializing */\n      0x00\n      add\n      0x08\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8553:8600  return _getInitializableStorage()._initializing */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8487:8607  function _isInitializing() internal view returns (bool) {... */\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":7:106   */\n    tag_183:\n        /* \"#utility.yul\":59:65   */\n      0x00\n        /* \"#utility.yul\":93:98   */\n      dup2\n        /* \"#utility.yul\":87:99   */\n      mload\n        /* \"#utility.yul\":77:99   */\n      swap1\n      pop\n        /* \"#utility.yul\":7:106   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":112:281   */\n    tag_184:\n        /* \"#utility.yul\":196:207   */\n      0x00\n        /* \"#utility.yul\":230:236   */\n      dup3\n        /* \"#utility.yul\":225:228   */\n      dup3\n        /* \"#utility.yul\":218:237   */\n      mstore\n        /* \"#utility.yul\":270:274   */\n      0x20\n        /* \"#utility.yul\":265:268   */\n      dup3\n        /* \"#utility.yul\":261:275   */\n      add\n        /* \"#utility.yul\":246:275   */\n      swap1\n      pop\n        /* \"#utility.yul\":112:281   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":287:426   */\n    tag_185:\n        /* \"#utility.yul\":376:382   */\n      dup3\n        /* \"#utility.yul\":371:374   */\n      dup2\n        /* \"#utility.yul\":366:369   */\n      dup4\n        /* \"#utility.yul\":360:383   */\n      mcopy\n        /* \"#utility.yul\":417:418   */\n      0x00\n        /* \"#utility.yul\":408:414   */\n      dup4\n        /* \"#utility.yul\":403:406   */\n      dup4\n        /* \"#utility.yul\":399:415   */\n      add\n        /* \"#utility.yul\":392:419   */\n      mstore\n        /* \"#utility.yul\":287:426   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":432:534   */\n    tag_186:\n        /* \"#utility.yul\":473:479   */\n      0x00\n        /* \"#utility.yul\":524:526   */\n      0x1f\n        /* \"#utility.yul\":520:527   */\n      not\n        /* \"#utility.yul\":515:517   */\n      0x1f\n        /* \"#utility.yul\":508:513   */\n      dup4\n        /* \"#utility.yul\":504:518   */\n      add\n        /* \"#utility.yul\":500:528   */\n      and\n        /* \"#utility.yul\":490:528   */\n      swap1\n      pop\n        /* \"#utility.yul\":432:534   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":540:917   */\n    tag_187:\n        /* \"#utility.yul\":628:631   */\n      0x00\n        /* \"#utility.yul\":656:695   */\n      tag_235\n        /* \"#utility.yul\":689:694   */\n      dup3\n        /* \"#utility.yul\":656:695   */\n      tag_183\n      jump\t// in\n    tag_235:\n        /* \"#utility.yul\":711:782   */\n      tag_236\n        /* \"#utility.yul\":775:781   */\n      dup2\n        /* \"#utility.yul\":770:773   */\n      dup6\n        /* \"#utility.yul\":711:782   */\n      tag_184\n      jump\t// in\n    tag_236:\n        /* \"#utility.yul\":704:782   */\n      swap4\n      pop\n        /* \"#utility.yul\":791:856   */\n      tag_237\n        /* \"#utility.yul\":849:855   */\n      dup2\n        /* \"#utility.yul\":844:847   */\n      dup6\n        /* \"#utility.yul\":837:841   */\n      0x20\n        /* \"#utility.yul\":830:835   */\n      dup7\n        /* \"#utility.yul\":826:842   */\n      add\n        /* \"#utility.yul\":791:856   */\n      tag_185\n      jump\t// in\n    tag_237:\n        /* \"#utility.yul\":881:910   */\n      tag_238\n        /* \"#utility.yul\":903:909   */\n      dup2\n        /* \"#utility.yul\":881:910   */\n      tag_186\n      jump\t// in\n    tag_238:\n        /* \"#utility.yul\":876:879   */\n      dup5\n        /* \"#utility.yul\":872:911   */\n      add\n        /* \"#utility.yul\":865:911   */\n      swap2\n      pop\n        /* \"#utility.yul\":632:917   */\n      pop\n        /* \"#utility.yul\":540:917   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":923:1236   */\n    tag_18:\n        /* \"#utility.yul\":1036:1040   */\n      0x00\n        /* \"#utility.yul\":1074:1076   */\n      0x20\n        /* \"#utility.yul\":1063:1072   */\n      dup3\n        /* \"#utility.yul\":1059:1077   */\n      add\n        /* \"#utility.yul\":1051:1077   */\n      swap1\n      pop\n        /* \"#utility.yul\":1123:1132   */\n      dup2\n        /* \"#utility.yul\":1117:1121   */\n      dup2\n        /* \"#utility.yul\":1113:1133   */\n      sub\n        /* \"#utility.yul\":1109:1110   */\n      0x00\n        /* \"#utility.yul\":1098:1107   */\n      dup4\n        /* \"#utility.yul\":1094:1111   */\n      add\n        /* \"#utility.yul\":1087:1134   */\n      mstore\n        /* \"#utility.yul\":1151:1229   */\n      tag_240\n        /* \"#utility.yul\":1224:1228   */\n      dup2\n        /* \"#utility.yul\":1215:1221   */\n      dup5\n        /* \"#utility.yul\":1151:1229   */\n      tag_187\n      jump\t// in\n    tag_240:\n        /* \"#utility.yul\":1143:1229   */\n      swap1\n      pop\n        /* \"#utility.yul\":923:1236   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1323:1440   */\n    tag_189:\n        /* \"#utility.yul\":1432:1433   */\n      0x00\n        /* \"#utility.yul\":1429:1430   */\n      dup1\n        /* \"#utility.yul\":1422:1434   */\n      revert\n        /* \"#utility.yul\":1569:1695   */\n    tag_191:\n        /* \"#utility.yul\":1606:1613   */\n      0x00\n        /* \"#utility.yul\":1646:1688   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":1639:1644   */\n      dup3\n        /* \"#utility.yul\":1635:1689   */\n      and\n        /* \"#utility.yul\":1624:1689   */\n      swap1\n      pop\n        /* \"#utility.yul\":1569:1695   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1701:1797   */\n    tag_192:\n        /* \"#utility.yul\":1738:1745   */\n      0x00\n        /* \"#utility.yul\":1767:1791   */\n      tag_246\n        /* \"#utility.yul\":1785:1790   */\n      dup3\n        /* \"#utility.yul\":1767:1791   */\n      tag_191\n      jump\t// in\n    tag_246:\n        /* \"#utility.yul\":1756:1791   */\n      swap1\n      pop\n        /* \"#utility.yul\":1701:1797   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1803:1925   */\n    tag_193:\n        /* \"#utility.yul\":1876:1900   */\n      tag_248\n        /* \"#utility.yul\":1894:1899   */\n      dup2\n        /* \"#utility.yul\":1876:1900   */\n      tag_192\n      jump\t// in\n    tag_248:\n        /* \"#utility.yul\":1869:1874   */\n      dup2\n        /* \"#utility.yul\":1866:1901   */\n      eq\n        /* \"#utility.yul\":1856:1919   */\n      tag_249\n      jumpi\n        /* \"#utility.yul\":1915:1916   */\n      0x00\n        /* \"#utility.yul\":1912:1913   */\n      dup1\n        /* \"#utility.yul\":1905:1917   */\n      revert\n        /* \"#utility.yul\":1856:1919   */\n    tag_249:\n        /* \"#utility.yul\":1803:1925   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1931:2070   */\n    tag_194:\n        /* \"#utility.yul\":1977:1982   */\n      0x00\n        /* \"#utility.yul\":2015:2021   */\n      dup2\n        /* \"#utility.yul\":2002:2022   */\n      calldataload\n        /* \"#utility.yul\":1993:2022   */\n      swap1\n      pop\n        /* \"#utility.yul\":2031:2064   */\n      tag_251\n        /* \"#utility.yul\":2058:2063   */\n      dup2\n        /* \"#utility.yul\":2031:2064   */\n      tag_193\n      jump\t// in\n    tag_251:\n        /* \"#utility.yul\":1931:2070   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2076:2153   */\n    tag_195:\n        /* \"#utility.yul\":2113:2120   */\n      0x00\n        /* \"#utility.yul\":2142:2147   */\n      dup2\n        /* \"#utility.yul\":2131:2147   */\n      swap1\n      pop\n        /* \"#utility.yul\":2076:2153   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2159:2281   */\n    tag_196:\n        /* \"#utility.yul\":2232:2256   */\n      tag_254\n        /* \"#utility.yul\":2250:2255   */\n      dup2\n        /* \"#utility.yul\":2232:2256   */\n      tag_195\n      jump\t// in\n    tag_254:\n        /* \"#utility.yul\":2225:2230   */\n      dup2\n        /* \"#utility.yul\":2222:2257   */\n      eq\n        /* \"#utility.yul\":2212:2275   */\n      tag_255\n      jumpi\n        /* \"#utility.yul\":2271:2272   */\n      0x00\n        /* \"#utility.yul\":2268:2269   */\n      dup1\n        /* \"#utility.yul\":2261:2273   */\n      revert\n        /* \"#utility.yul\":2212:2275   */\n    tag_255:\n        /* \"#utility.yul\":2159:2281   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2287:2426   */\n    tag_197:\n        /* \"#utility.yul\":2333:2338   */\n      0x00\n        /* \"#utility.yul\":2371:2377   */\n      dup2\n        /* \"#utility.yul\":2358:2378   */\n      calldataload\n        /* \"#utility.yul\":2349:2378   */\n      swap1\n      pop\n        /* \"#utility.yul\":2387:2420   */\n      tag_257\n        /* \"#utility.yul\":2414:2419   */\n      dup2\n        /* \"#utility.yul\":2387:2420   */\n      tag_196\n      jump\t// in\n    tag_257:\n        /* \"#utility.yul\":2287:2426   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2432:2906   */\n    tag_21:\n        /* \"#utility.yul\":2500:2506   */\n      0x00\n        /* \"#utility.yul\":2508:2514   */\n      dup1\n        /* \"#utility.yul\":2557:2559   */\n      0x40\n        /* \"#utility.yul\":2545:2554   */\n      dup4\n        /* \"#utility.yul\":2536:2543   */\n      dup6\n        /* \"#utility.yul\":2532:2555   */\n      sub\n        /* \"#utility.yul\":2528:2560   */\n      slt\n        /* \"#utility.yul\":2525:2644   */\n      iszero\n      tag_259\n      jumpi\n        /* \"#utility.yul\":2563:2642   */\n      tag_260\n      tag_189\n      jump\t// in\n    tag_260:\n        /* \"#utility.yul\":2525:2644   */\n    tag_259:\n        /* \"#utility.yul\":2683:2684   */\n      0x00\n        /* \"#utility.yul\":2708:2761   */\n      tag_261\n        /* \"#utility.yul\":2753:2760   */\n      dup6\n        /* \"#utility.yul\":2744:2750   */\n      dup3\n        /* \"#utility.yul\":2733:2742   */\n      dup7\n        /* \"#utility.yul\":2729:2751   */\n      add\n        /* \"#utility.yul\":2708:2761   */\n      tag_194\n      jump\t// in\n    tag_261:\n        /* \"#utility.yul\":2698:2761   */\n      swap3\n      pop\n        /* \"#utility.yul\":2654:2771   */\n      pop\n        /* \"#utility.yul\":2810:2812   */\n      0x20\n        /* \"#utility.yul\":2836:2889   */\n      tag_262\n        /* \"#utility.yul\":2881:2888   */\n      dup6\n        /* \"#utility.yul\":2872:2878   */\n      dup3\n        /* \"#utility.yul\":2861:2870   */\n      dup7\n        /* \"#utility.yul\":2857:2879   */\n      add\n        /* \"#utility.yul\":2836:2889   */\n      tag_197\n      jump\t// in\n    tag_262:\n        /* \"#utility.yul\":2826:2889   */\n      swap2\n      pop\n        /* \"#utility.yul\":2781:2899   */\n      pop\n        /* \"#utility.yul\":2432:2906   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2912:3002   */\n    tag_198:\n        /* \"#utility.yul\":2946:2953   */\n      0x00\n        /* \"#utility.yul\":2989:2994   */\n      dup2\n        /* \"#utility.yul\":2982:2995   */\n      iszero\n        /* \"#utility.yul\":2975:2996   */\n      iszero\n        /* \"#utility.yul\":2964:2996   */\n      swap1\n      pop\n        /* \"#utility.yul\":2912:3002   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3008:3117   */\n    tag_199:\n        /* \"#utility.yul\":3089:3110   */\n      tag_265\n        /* \"#utility.yul\":3104:3109   */\n      dup2\n        /* \"#utility.yul\":3089:3110   */\n      tag_198\n      jump\t// in\n    tag_265:\n        /* \"#utility.yul\":3084:3087   */\n      dup3\n        /* \"#utility.yul\":3077:3111   */\n      mstore\n        /* \"#utility.yul\":3008:3117   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3123:3333   */\n    tag_24:\n        /* \"#utility.yul\":3210:3214   */\n      0x00\n        /* \"#utility.yul\":3248:3250   */\n      0x20\n        /* \"#utility.yul\":3237:3246   */\n      dup3\n        /* \"#utility.yul\":3233:3251   */\n      add\n        /* \"#utility.yul\":3225:3251   */\n      swap1\n      pop\n        /* \"#utility.yul\":3261:3326   */\n      tag_267\n        /* \"#utility.yul\":3323:3324   */\n      0x00\n        /* \"#utility.yul\":3312:3321   */\n      dup4\n        /* \"#utility.yul\":3308:3325   */\n      add\n        /* \"#utility.yul\":3299:3305   */\n      dup5\n        /* \"#utility.yul\":3261:3326   */\n      tag_199\n      jump\t// in\n    tag_267:\n        /* \"#utility.yul\":3123:3333   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3339:3457   */\n    tag_200:\n        /* \"#utility.yul\":3426:3450   */\n      tag_269\n        /* \"#utility.yul\":3444:3449   */\n      dup2\n        /* \"#utility.yul\":3426:3450   */\n      tag_195\n      jump\t// in\n    tag_269:\n        /* \"#utility.yul\":3421:3424   */\n      dup3\n        /* \"#utility.yul\":3414:3451   */\n      mstore\n        /* \"#utility.yul\":3339:3457   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3463:3685   */\n    tag_28:\n        /* \"#utility.yul\":3556:3560   */\n      0x00\n        /* \"#utility.yul\":3594:3596   */\n      0x20\n        /* \"#utility.yul\":3583:3592   */\n      dup3\n        /* \"#utility.yul\":3579:3597   */\n      add\n        /* \"#utility.yul\":3571:3597   */\n      swap1\n      pop\n        /* \"#utility.yul\":3607:3678   */\n      tag_271\n        /* \"#utility.yul\":3675:3676   */\n      0x00\n        /* \"#utility.yul\":3664:3673   */\n      dup4\n        /* \"#utility.yul\":3660:3677   */\n      add\n        /* \"#utility.yul\":3651:3657   */\n      dup5\n        /* \"#utility.yul\":3607:3678   */\n      tag_200\n      jump\t// in\n    tag_271:\n        /* \"#utility.yul\":3463:3685   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3691:4310   */\n    tag_31:\n        /* \"#utility.yul\":3768:3774   */\n      0x00\n        /* \"#utility.yul\":3776:3782   */\n      dup1\n        /* \"#utility.yul\":3784:3790   */\n      0x00\n        /* \"#utility.yul\":3833:3835   */\n      0x60\n        /* \"#utility.yul\":3821:3830   */\n      dup5\n        /* \"#utility.yul\":3812:3819   */\n      dup7\n        /* \"#utility.yul\":3808:3831   */\n      sub\n        /* \"#utility.yul\":3804:3836   */\n      slt\n        /* \"#utility.yul\":3801:3920   */\n      iszero\n      tag_273\n      jumpi\n        /* \"#utility.yul\":3839:3918   */\n      tag_274\n      tag_189\n      jump\t// in\n    tag_274:\n        /* \"#utility.yul\":3801:3920   */\n    tag_273:\n        /* \"#utility.yul\":3959:3960   */\n      0x00\n        /* \"#utility.yul\":3984:4037   */\n      tag_275\n        /* \"#utility.yul\":4029:4036   */\n      dup7\n        /* \"#utility.yul\":4020:4026   */\n      dup3\n        /* \"#utility.yul\":4009:4018   */\n      dup8\n        /* \"#utility.yul\":4005:4027   */\n      add\n        /* \"#utility.yul\":3984:4037   */\n      tag_194\n      jump\t// in\n    tag_275:\n        /* \"#utility.yul\":3974:4037   */\n      swap4\n      pop\n        /* \"#utility.yul\":3930:4047   */\n      pop\n        /* \"#utility.yul\":4086:4088   */\n      0x20\n        /* \"#utility.yul\":4112:4165   */\n      tag_276\n        /* \"#utility.yul\":4157:4164   */\n      dup7\n        /* \"#utility.yul\":4148:4154   */\n      dup3\n        /* \"#utility.yul\":4137:4146   */\n      dup8\n        /* \"#utility.yul\":4133:4155   */\n      add\n        /* \"#utility.yul\":4112:4165   */\n      tag_194\n      jump\t// in\n    tag_276:\n        /* \"#utility.yul\":4102:4165   */\n      swap3\n      pop\n        /* \"#utility.yul\":4057:4175   */\n      pop\n        /* \"#utility.yul\":4214:4216   */\n      0x40\n        /* \"#utility.yul\":4240:4293   */\n      tag_277\n        /* \"#utility.yul\":4285:4292   */\n      dup7\n        /* \"#utility.yul\":4276:4282   */\n      dup3\n        /* \"#utility.yul\":4265:4274   */\n      dup8\n        /* \"#utility.yul\":4261:4283   */\n      add\n        /* \"#utility.yul\":4240:4293   */\n      tag_197\n      jump\t// in\n    tag_277:\n        /* \"#utility.yul\":4230:4293   */\n      swap2\n      pop\n        /* \"#utility.yul\":4185:4303   */\n      pop\n        /* \"#utility.yul\":3691:4310   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":4316:4402   */\n    tag_201:\n        /* \"#utility.yul\":4351:4358   */\n      0x00\n        /* \"#utility.yul\":4391:4395   */\n      0xff\n        /* \"#utility.yul\":4384:4389   */\n      dup3\n        /* \"#utility.yul\":4380:4396   */\n      and\n        /* \"#utility.yul\":4369:4396   */\n      swap1\n      pop\n        /* \"#utility.yul\":4316:4402   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4408:4520   */\n    tag_202:\n        /* \"#utility.yul\":4491:4513   */\n      tag_280\n        /* \"#utility.yul\":4507:4512   */\n      dup2\n        /* \"#utility.yul\":4491:4513   */\n      tag_201\n      jump\t// in\n    tag_280:\n        /* \"#utility.yul\":4486:4489   */\n      dup3\n        /* \"#utility.yul\":4479:4514   */\n      mstore\n        /* \"#utility.yul\":4408:4520   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4526:4740   */\n    tag_37:\n        /* \"#utility.yul\":4615:4619   */\n      0x00\n        /* \"#utility.yul\":4653:4655   */\n      0x20\n        /* \"#utility.yul\":4642:4651   */\n      dup3\n        /* \"#utility.yul\":4638:4656   */\n      add\n        /* \"#utility.yul\":4630:4656   */\n      swap1\n      pop\n        /* \"#utility.yul\":4666:4733   */\n      tag_282\n        /* \"#utility.yul\":4730:4731   */\n      0x00\n        /* \"#utility.yul\":4719:4728   */\n      dup4\n        /* \"#utility.yul\":4715:4732   */\n      add\n        /* \"#utility.yul\":4706:4712   */\n      dup5\n        /* \"#utility.yul\":4666:4733   */\n      tag_202\n      jump\t// in\n    tag_282:\n        /* \"#utility.yul\":4526:4740   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4746:5075   */\n    tag_43:\n        /* \"#utility.yul\":4805:4811   */\n      0x00\n        /* \"#utility.yul\":4854:4856   */\n      0x20\n        /* \"#utility.yul\":4842:4851   */\n      dup3\n        /* \"#utility.yul\":4833:4840   */\n      dup5\n        /* \"#utility.yul\":4829:4852   */\n      sub\n        /* \"#utility.yul\":4825:4857   */\n      slt\n        /* \"#utility.yul\":4822:4941   */\n      iszero\n      tag_284\n      jumpi\n        /* \"#utility.yul\":4860:4939   */\n      tag_285\n      tag_189\n      jump\t// in\n    tag_285:\n        /* \"#utility.yul\":4822:4941   */\n    tag_284:\n        /* \"#utility.yul\":4980:4981   */\n      0x00\n        /* \"#utility.yul\":5005:5058   */\n      tag_286\n        /* \"#utility.yul\":5050:5057   */\n      dup5\n        /* \"#utility.yul\":5041:5047   */\n      dup3\n        /* \"#utility.yul\":5030:5039   */\n      dup6\n        /* \"#utility.yul\":5026:5048   */\n      add\n        /* \"#utility.yul\":5005:5058   */\n      tag_194\n      jump\t// in\n    tag_286:\n        /* \"#utility.yul\":4995:5058   */\n      swap2\n      pop\n        /* \"#utility.yul\":4951:5068   */\n      pop\n        /* \"#utility.yul\":4746:5075   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5081:5555   */\n    tag_57:\n        /* \"#utility.yul\":5149:5155   */\n      0x00\n        /* \"#utility.yul\":5157:5163   */\n      dup1\n        /* \"#utility.yul\":5206:5208   */\n      0x40\n        /* \"#utility.yul\":5194:5203   */\n      dup4\n        /* \"#utility.yul\":5185:5192   */\n      dup6\n        /* \"#utility.yul\":5181:5204   */\n      sub\n        /* \"#utility.yul\":5177:5209   */\n      slt\n        /* \"#utility.yul\":5174:5293   */\n      iszero\n      tag_288\n      jumpi\n        /* \"#utility.yul\":5212:5291   */\n      tag_289\n      tag_189\n      jump\t// in\n    tag_289:\n        /* \"#utility.yul\":5174:5293   */\n    tag_288:\n        /* \"#utility.yul\":5332:5333   */\n      0x00\n        /* \"#utility.yul\":5357:5410   */\n      tag_290\n        /* \"#utility.yul\":5402:5409   */\n      dup6\n        /* \"#utility.yul\":5393:5399   */\n      dup3\n        /* \"#utility.yul\":5382:5391   */\n      dup7\n        /* \"#utility.yul\":5378:5400   */\n      add\n        /* \"#utility.yul\":5357:5410   */\n      tag_194\n      jump\t// in\n    tag_290:\n        /* \"#utility.yul\":5347:5410   */\n      swap3\n      pop\n        /* \"#utility.yul\":5303:5420   */\n      pop\n        /* \"#utility.yul\":5459:5461   */\n      0x20\n        /* \"#utility.yul\":5485:5538   */\n      tag_291\n        /* \"#utility.yul\":5530:5537   */\n      dup6\n        /* \"#utility.yul\":5521:5527   */\n      dup3\n        /* \"#utility.yul\":5510:5519   */\n      dup7\n        /* \"#utility.yul\":5506:5528   */\n      add\n        /* \"#utility.yul\":5485:5538   */\n      tag_194\n      jump\t// in\n    tag_291:\n        /* \"#utility.yul\":5475:5538   */\n      swap2\n      pop\n        /* \"#utility.yul\":5430:5548   */\n      pop\n        /* \"#utility.yul\":5081:5555   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5561:5741   */\n    tag_203:\n        /* \"#utility.yul\":5609:5686   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":5606:5607   */\n      0x00\n        /* \"#utility.yul\":5599:5687   */\n      mstore\n        /* \"#utility.yul\":5706:5710   */\n      0x22\n        /* \"#utility.yul\":5703:5704   */\n      0x04\n        /* \"#utility.yul\":5696:5711   */\n      mstore\n        /* \"#utility.yul\":5730:5734   */\n      0x24\n        /* \"#utility.yul\":5727:5728   */\n      0x00\n        /* \"#utility.yul\":5720:5735   */\n      revert\n        /* \"#utility.yul\":5747:6067   */\n    tag_64:\n        /* \"#utility.yul\":5791:5797   */\n      0x00\n        /* \"#utility.yul\":5828:5829   */\n      0x02\n        /* \"#utility.yul\":5822:5826   */\n      dup3\n        /* \"#utility.yul\":5818:5830   */\n      div\n        /* \"#utility.yul\":5808:5830   */\n      swap1\n      pop\n        /* \"#utility.yul\":5875:5876   */\n      0x01\n        /* \"#utility.yul\":5869:5873   */\n      dup3\n        /* \"#utility.yul\":5865:5877   */\n      and\n        /* \"#utility.yul\":5896:5914   */\n      dup1\n        /* \"#utility.yul\":5886:5967   */\n      tag_294\n      jumpi\n        /* \"#utility.yul\":5952:5956   */\n      0x7f\n        /* \"#utility.yul\":5944:5950   */\n      dup3\n        /* \"#utility.yul\":5940:5957   */\n      and\n        /* \"#utility.yul\":5930:5957   */\n      swap2\n      pop\n        /* \"#utility.yul\":5886:5967   */\n    tag_294:\n        /* \"#utility.yul\":6014:6016   */\n      0x20\n        /* \"#utility.yul\":6006:6012   */\n      dup3\n        /* \"#utility.yul\":6003:6017   */\n      lt\n        /* \"#utility.yul\":5983:6001   */\n      dup2\n        /* \"#utility.yul\":5980:6018   */\n      sub\n        /* \"#utility.yul\":5977:6061   */\n      tag_295\n      jumpi\n        /* \"#utility.yul\":6033:6051   */\n      tag_296\n      tag_203\n      jump\t// in\n    tag_296:\n        /* \"#utility.yul\":5977:6061   */\n    tag_295:\n        /* \"#utility.yul\":5798:6067   */\n      pop\n        /* \"#utility.yul\":5747:6067   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6073:6253   */\n    tag_204:\n        /* \"#utility.yul\":6121:6198   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":6118:6119   */\n      0x00\n        /* \"#utility.yul\":6111:6199   */\n      mstore\n        /* \"#utility.yul\":6218:6222   */\n      0x11\n        /* \"#utility.yul\":6215:6216   */\n      0x04\n        /* \"#utility.yul\":6208:6223   */\n      mstore\n        /* \"#utility.yul\":6242:6246   */\n      0x24\n        /* \"#utility.yul\":6239:6240   */\n      0x00\n        /* \"#utility.yul\":6232:6247   */\n      revert\n        /* \"#utility.yul\":6259:6361   */\n    tag_205:\n        /* \"#utility.yul\":6301:6309   */\n      0x00\n        /* \"#utility.yul\":6348:6353   */\n      dup2\n        /* \"#utility.yul\":6345:6346   */\n      0x01\n        /* \"#utility.yul\":6341:6354   */\n      shr\n        /* \"#utility.yul\":6320:6354   */\n      swap1\n      pop\n        /* \"#utility.yul\":6259:6361   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6367:7215   */\n    tag_206:\n        /* \"#utility.yul\":6428:6433   */\n      0x00\n        /* \"#utility.yul\":6435:6439   */\n      dup1\n        /* \"#utility.yul\":6459:6465   */\n      dup3\n        /* \"#utility.yul\":6450:6465   */\n      swap2\n      pop\n        /* \"#utility.yul\":6483:6488   */\n      dup4\n        /* \"#utility.yul\":6474:6488   */\n      swap1\n      pop\n        /* \"#utility.yul\":6497:7209   */\n    tag_300:\n        /* \"#utility.yul\":6518:6519   */\n      0x01\n        /* \"#utility.yul\":6508:6516   */\n      dup6\n        /* \"#utility.yul\":6505:6520   */\n      gt\n        /* \"#utility.yul\":6497:7209   */\n      iszero\n      tag_302\n      jumpi\n        /* \"#utility.yul\":6613:6617   */\n      dup1\n        /* \"#utility.yul\":6608:6611   */\n      dup7\n        /* \"#utility.yul\":6604:6618   */\n      div\n        /* \"#utility.yul\":6598:6602   */\n      dup2\n        /* \"#utility.yul\":6595:6619   */\n      gt\n        /* \"#utility.yul\":6592:6642   */\n      iszero\n      tag_303\n      jumpi\n        /* \"#utility.yul\":6622:6640   */\n      tag_304\n      tag_204\n      jump\t// in\n    tag_304:\n        /* \"#utility.yul\":6592:6642   */\n    tag_303:\n        /* \"#utility.yul\":6672:6673   */\n      0x01\n        /* \"#utility.yul\":6662:6670   */\n      dup6\n        /* \"#utility.yul\":6658:6674   */\n      and\n        /* \"#utility.yul\":6655:7106   */\n      iszero\n      tag_305\n      jumpi\n        /* \"#utility.yul\":7087:7091   */\n      dup1\n        /* \"#utility.yul\":7080:7085   */\n      dup3\n        /* \"#utility.yul\":7076:7092   */\n      mul\n        /* \"#utility.yul\":7067:7092   */\n      swap2\n      pop\n        /* \"#utility.yul\":6655:7106   */\n    tag_305:\n        /* \"#utility.yul\":7137:7141   */\n      dup1\n        /* \"#utility.yul\":7131:7135   */\n      dup2\n        /* \"#utility.yul\":7127:7142   */\n      mul\n        /* \"#utility.yul\":7119:7142   */\n      swap1\n      pop\n        /* \"#utility.yul\":7167:7199   */\n      tag_306\n        /* \"#utility.yul\":7190:7198   */\n      dup6\n        /* \"#utility.yul\":7167:7199   */\n      tag_205\n      jump\t// in\n    tag_306:\n        /* \"#utility.yul\":7155:7199   */\n      swap5\n      pop\n        /* \"#utility.yul\":6497:7209   */\n      jump(tag_300)\n    tag_302:\n        /* \"#utility.yul\":6367:7215   */\n      swap5\n      pop\n      swap5\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7221:8294   */\n    tag_207:\n        /* \"#utility.yul\":7275:7280   */\n      0x00\n        /* \"#utility.yul\":7466:7474   */\n      dup3\n        /* \"#utility.yul\":7456:7496   */\n      tag_308\n      jumpi\n        /* \"#utility.yul\":7487:7488   */\n      0x01\n        /* \"#utility.yul\":7478:7488   */\n      swap1\n      pop\n        /* \"#utility.yul\":7489:7494   */\n      jump(tag_307)\n        /* \"#utility.yul\":7456:7496   */\n    tag_308:\n        /* \"#utility.yul\":7515:7519   */\n      dup2\n        /* \"#utility.yul\":7505:7541   */\n      tag_309\n      jumpi\n        /* \"#utility.yul\":7532:7533   */\n      0x00\n        /* \"#utility.yul\":7523:7533   */\n      swap1\n      pop\n        /* \"#utility.yul\":7534:7539   */\n      jump(tag_307)\n        /* \"#utility.yul\":7505:7541   */\n    tag_309:\n        /* \"#utility.yul\":7601:7605   */\n      dup2\n        /* \"#utility.yul\":7649:7650   */\n      0x01\n        /* \"#utility.yul\":7644:7671   */\n      dup2\n      eq\n      tag_311\n      jumpi\n        /* \"#utility.yul\":7685:7686   */\n      0x02\n        /* \"#utility.yul\":7680:7871   */\n      dup2\n      eq\n      tag_312\n      jumpi\n        /* \"#utility.yul\":7594:7871   */\n      jump(tag_310)\n        /* \"#utility.yul\":7644:7671   */\n    tag_311:\n        /* \"#utility.yul\":7662:7663   */\n      0x01\n        /* \"#utility.yul\":7653:7663   */\n      swap2\n      pop\n        /* \"#utility.yul\":7664:7669   */\n      pop\n      jump(tag_307)\n        /* \"#utility.yul\":7680:7871   */\n    tag_312:\n        /* \"#utility.yul\":7725:7728   */\n      0xff\n        /* \"#utility.yul\":7715:7723   */\n      dup5\n        /* \"#utility.yul\":7712:7729   */\n      gt\n        /* \"#utility.yul\":7709:7752   */\n      iszero\n      tag_313\n      jumpi\n        /* \"#utility.yul\":7732:7750   */\n      tag_314\n      tag_204\n      jump\t// in\n    tag_314:\n        /* \"#utility.yul\":7709:7752   */\n    tag_313:\n        /* \"#utility.yul\":7781:7789   */\n      dup4\n        /* \"#utility.yul\":7778:7779   */\n      0x02\n        /* \"#utility.yul\":7774:7790   */\n      exp\n        /* \"#utility.yul\":7765:7790   */\n      swap2\n      pop\n        /* \"#utility.yul\":7816:7819   */\n      dup5\n        /* \"#utility.yul\":7809:7814   */\n      dup3\n        /* \"#utility.yul\":7806:7820   */\n      gt\n        /* \"#utility.yul\":7803:7843   */\n      iszero\n      tag_315\n      jumpi\n        /* \"#utility.yul\":7823:7841   */\n      tag_316\n      tag_204\n      jump\t// in\n    tag_316:\n        /* \"#utility.yul\":7803:7843   */\n    tag_315:\n        /* \"#utility.yul\":7856:7861   */\n      pop\n      jump(tag_307)\n        /* \"#utility.yul\":7594:7871   */\n    tag_310:\n      pop\n        /* \"#utility.yul\":7980:7982   */\n      0x20\n        /* \"#utility.yul\":7970:7978   */\n      dup4\n        /* \"#utility.yul\":7967:7983   */\n      lt\n        /* \"#utility.yul\":7961:7964   */\n      0x0133\n        /* \"#utility.yul\":7955:7959   */\n      dup4\n        /* \"#utility.yul\":7952:7965   */\n      lt\n        /* \"#utility.yul\":7948:7984   */\n      and\n        /* \"#utility.yul\":7930:7932   */\n      0x4e\n        /* \"#utility.yul\":7920:7928   */\n      dup5\n        /* \"#utility.yul\":7917:7933   */\n      lt\n        /* \"#utility.yul\":7912:7914   */\n      0x0b\n        /* \"#utility.yul\":7906:7910   */\n      dup5\n        /* \"#utility.yul\":7903:7915   */\n      lt\n        /* \"#utility.yul\":7899:7934   */\n      and\n        /* \"#utility.yul\":7883:7994   */\n      or\n        /* \"#utility.yul\":7880:8126   */\n      iszero\n      tag_317\n      jumpi\n        /* \"#utility.yul\":8036:8044   */\n      dup3\n        /* \"#utility.yul\":8030:8034   */\n      dup3\n        /* \"#utility.yul\":8026:8045   */\n      exp\n        /* \"#utility.yul\":8017:8045   */\n      swap1\n      pop\n        /* \"#utility.yul\":8071:8074   */\n      dup4\n        /* \"#utility.yul\":8064:8069   */\n      dup2\n        /* \"#utility.yul\":8061:8075   */\n      gt\n        /* \"#utility.yul\":8058:8098   */\n      iszero\n      tag_318\n      jumpi\n        /* \"#utility.yul\":8078:8096   */\n      tag_319\n      tag_204\n      jump\t// in\n    tag_319:\n        /* \"#utility.yul\":8058:8098   */\n    tag_318:\n        /* \"#utility.yul\":8111:8116   */\n      jump(tag_307)\n        /* \"#utility.yul\":7880:8126   */\n    tag_317:\n        /* \"#utility.yul\":8151:8193   */\n      tag_320\n        /* \"#utility.yul\":8189:8192   */\n      dup5\n        /* \"#utility.yul\":8179:8187   */\n      dup5\n        /* \"#utility.yul\":8173:8177   */\n      dup5\n        /* \"#utility.yul\":8170:8171   */\n      0x01\n        /* \"#utility.yul\":8151:8193   */\n      tag_206\n      jump\t// in\n    tag_320:\n        /* \"#utility.yul\":8136:8193   */\n      swap3\n      pop\n      swap1\n      pop\n        /* \"#utility.yul\":8225:8229   */\n      dup2\n        /* \"#utility.yul\":8220:8223   */\n      dup5\n        /* \"#utility.yul\":8216:8230   */\n      div\n        /* \"#utility.yul\":8209:8214   */\n      dup2\n        /* \"#utility.yul\":8206:8231   */\n      gt\n        /* \"#utility.yul\":8203:8254   */\n      iszero\n      tag_321\n      jumpi\n        /* \"#utility.yul\":8234:8252   */\n      tag_322\n      tag_204\n      jump\t// in\n    tag_322:\n        /* \"#utility.yul\":8203:8254   */\n    tag_321:\n        /* \"#utility.yul\":8283:8287   */\n      dup2\n        /* \"#utility.yul\":8276:8281   */\n      dup2\n        /* \"#utility.yul\":8272:8288   */\n      mul\n        /* \"#utility.yul\":8263:8288   */\n      swap1\n      pop\n        /* \"#utility.yul\":7221:8294   */\n    tag_307:\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8300:8585   */\n    tag_102:\n        /* \"#utility.yul\":8360:8365   */\n      0x00\n        /* \"#utility.yul\":8384:8407   */\n      tag_324\n        /* \"#utility.yul\":8402:8406   */\n      dup3\n        /* \"#utility.yul\":8384:8407   */\n      tag_195\n      jump\t// in\n    tag_324:\n        /* \"#utility.yul\":8376:8407   */\n      swap2\n      pop\n        /* \"#utility.yul\":8428:8455   */\n      tag_325\n        /* \"#utility.yul\":8446:8454   */\n      dup4\n        /* \"#utility.yul\":8428:8455   */\n      tag_195\n      jump\t// in\n    tag_325:\n        /* \"#utility.yul\":8416:8455   */\n      swap3\n      pop\n        /* \"#utility.yul\":8474:8578   */\n      tag_326\n        /* \"#utility.yul\":8511:8577   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":8501:8509   */\n      dup5\n        /* \"#utility.yul\":8495:8499   */\n      dup5\n        /* \"#utility.yul\":8474:8578   */\n      tag_207\n      jump\t// in\n    tag_326:\n        /* \"#utility.yul\":8465:8578   */\n      swap1\n      pop\n        /* \"#utility.yul\":8300:8585   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8591:9001   */\n    tag_104:\n        /* \"#utility.yul\":8631:8638   */\n      0x00\n        /* \"#utility.yul\":8654:8674   */\n      tag_328\n        /* \"#utility.yul\":8672:8673   */\n      dup3\n        /* \"#utility.yul\":8654:8674   */\n      tag_195\n      jump\t// in\n    tag_328:\n        /* \"#utility.yul\":8649:8674   */\n      swap2\n      pop\n        /* \"#utility.yul\":8688:8708   */\n      tag_329\n        /* \"#utility.yul\":8706:8707   */\n      dup4\n        /* \"#utility.yul\":8688:8708   */\n      tag_195\n      jump\t// in\n    tag_329:\n        /* \"#utility.yul\":8683:8708   */\n      swap3\n      pop\n        /* \"#utility.yul\":8743:8744   */\n      dup3\n        /* \"#utility.yul\":8740:8741   */\n      dup3\n        /* \"#utility.yul\":8736:8745   */\n      mul\n        /* \"#utility.yul\":8765:8795   */\n      tag_330\n        /* \"#utility.yul\":8783:8794   */\n      dup2\n        /* \"#utility.yul\":8765:8795   */\n      tag_195\n      jump\t// in\n    tag_330:\n        /* \"#utility.yul\":8754:8795   */\n      swap2\n      pop\n        /* \"#utility.yul\":8944:8945   */\n      dup3\n        /* \"#utility.yul\":8935:8942   */\n      dup3\n        /* \"#utility.yul\":8931:8946   */\n      div\n        /* \"#utility.yul\":8928:8929   */\n      dup5\n        /* \"#utility.yul\":8925:8947   */\n      eq\n        /* \"#utility.yul\":8905:8906   */\n      dup4\n        /* \"#utility.yul\":8898:8907   */\n      iszero\n        /* \"#utility.yul\":8878:8961   */\n      or\n        /* \"#utility.yul\":8855:8994   */\n      tag_331\n      jumpi\n        /* \"#utility.yul\":8974:8992   */\n      tag_332\n      tag_204\n      jump\t// in\n    tag_332:\n        /* \"#utility.yul\":8855:8994   */\n    tag_331:\n        /* \"#utility.yul\":8639:9001   */\n      pop\n        /* \"#utility.yul\":8591:9001   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9007:9092   */\n    tag_208:\n        /* \"#utility.yul\":9052:9059   */\n      0x00\n        /* \"#utility.yul\":9081:9086   */\n      dup2\n        /* \"#utility.yul\":9070:9086   */\n      swap1\n      pop\n        /* \"#utility.yul\":9007:9092   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9098:9199   */\n    tag_209:\n        /* \"#utility.yul\":9134:9141   */\n      0x00\n        /* \"#utility.yul\":9174:9192   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":9167:9172   */\n      dup3\n        /* \"#utility.yul\":9163:9193   */\n      and\n        /* \"#utility.yul\":9152:9193   */\n      swap1\n      pop\n        /* \"#utility.yul\":9098:9199   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9205:9265   */\n    tag_210:\n        /* \"#utility.yul\":9233:9236   */\n      0x00\n        /* \"#utility.yul\":9254:9259   */\n      dup2\n        /* \"#utility.yul\":9247:9259   */\n      swap1\n      pop\n        /* \"#utility.yul\":9205:9265   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9271:9427   */\n    tag_211:\n        /* \"#utility.yul\":9328:9337   */\n      0x00\n        /* \"#utility.yul\":9361:9421   */\n      tag_337\n        /* \"#utility.yul\":9378:9420   */\n      tag_338\n        /* \"#utility.yul\":9387:9419   */\n      tag_339\n        /* \"#utility.yul\":9413:9418   */\n      dup5\n        /* \"#utility.yul\":9387:9419   */\n      tag_208\n      jump\t// in\n    tag_339:\n        /* \"#utility.yul\":9378:9420   */\n      tag_210\n      jump\t// in\n    tag_338:\n        /* \"#utility.yul\":9361:9421   */\n      tag_209\n      jump\t// in\n    tag_337:\n        /* \"#utility.yul\":9348:9421   */\n      swap1\n      pop\n        /* \"#utility.yul\":9271:9427   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9433:9578   */\n    tag_212:\n        /* \"#utility.yul\":9527:9571   */\n      tag_341\n        /* \"#utility.yul\":9565:9570   */\n      dup2\n        /* \"#utility.yul\":9527:9571   */\n      tag_211\n      jump\t// in\n    tag_341:\n        /* \"#utility.yul\":9522:9525   */\n      dup3\n        /* \"#utility.yul\":9515:9572   */\n      mstore\n        /* \"#utility.yul\":9433:9578   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9584:9820   */\n    tag_107:\n        /* \"#utility.yul\":9684:9688   */\n      0x00\n        /* \"#utility.yul\":9722:9724   */\n      0x20\n        /* \"#utility.yul\":9711:9720   */\n      dup3\n        /* \"#utility.yul\":9707:9725   */\n      add\n        /* \"#utility.yul\":9699:9725   */\n      swap1\n      pop\n        /* \"#utility.yul\":9735:9813   */\n      tag_343\n        /* \"#utility.yul\":9810:9811   */\n      0x00\n        /* \"#utility.yul\":9799:9808   */\n      dup4\n        /* \"#utility.yul\":9795:9812   */\n      add\n        /* \"#utility.yul\":9786:9792   */\n      dup5\n        /* \"#utility.yul\":9735:9813   */\n      tag_212\n      jump\t// in\n    tag_343:\n        /* \"#utility.yul\":9584:9820   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9826:9944   */\n    tag_213:\n        /* \"#utility.yul\":9913:9937   */\n      tag_345\n        /* \"#utility.yul\":9931:9936   */\n      dup2\n        /* \"#utility.yul\":9913:9937   */\n      tag_192\n      jump\t// in\n    tag_345:\n        /* \"#utility.yul\":9908:9911   */\n      dup3\n        /* \"#utility.yul\":9901:9938   */\n      mstore\n        /* \"#utility.yul\":9826:9944   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9950:10392   */\n    tag_130:\n        /* \"#utility.yul\":10099:10103   */\n      0x00\n        /* \"#utility.yul\":10137:10139   */\n      0x60\n        /* \"#utility.yul\":10126:10135   */\n      dup3\n        /* \"#utility.yul\":10122:10140   */\n      add\n        /* \"#utility.yul\":10114:10140   */\n      swap1\n      pop\n        /* \"#utility.yul\":10150:10221   */\n      tag_347\n        /* \"#utility.yul\":10218:10219   */\n      0x00\n        /* \"#utility.yul\":10207:10216   */\n      dup4\n        /* \"#utility.yul\":10203:10220   */\n      add\n        /* \"#utility.yul\":10194:10200   */\n      dup7\n        /* \"#utility.yul\":10150:10221   */\n      tag_213\n      jump\t// in\n    tag_347:\n        /* \"#utility.yul\":10231:10303   */\n      tag_348\n        /* \"#utility.yul\":10299:10301   */\n      0x20\n        /* \"#utility.yul\":10288:10297   */\n      dup4\n        /* \"#utility.yul\":10284:10302   */\n      add\n        /* \"#utility.yul\":10275:10281   */\n      dup6\n        /* \"#utility.yul\":10231:10303   */\n      tag_200\n      jump\t// in\n    tag_348:\n        /* \"#utility.yul\":10313:10385   */\n      tag_349\n        /* \"#utility.yul\":10381:10383   */\n      0x40\n        /* \"#utility.yul\":10370:10379   */\n      dup4\n        /* \"#utility.yul\":10366:10384   */\n      add\n        /* \"#utility.yul\":10357:10363   */\n      dup5\n        /* \"#utility.yul\":10313:10385   */\n      tag_200\n      jump\t// in\n    tag_349:\n        /* \"#utility.yul\":9950:10392   */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10398:10620   */\n    tag_135:\n        /* \"#utility.yul\":10491:10495   */\n      0x00\n        /* \"#utility.yul\":10529:10531   */\n      0x20\n        /* \"#utility.yul\":10518:10527   */\n      dup3\n        /* \"#utility.yul\":10514:10532   */\n      add\n        /* \"#utility.yul\":10506:10532   */\n      swap1\n      pop\n        /* \"#utility.yul\":10542:10613   */\n      tag_351\n        /* \"#utility.yul\":10610:10611   */\n      0x00\n        /* \"#utility.yul\":10599:10608   */\n      dup4\n        /* \"#utility.yul\":10595:10612   */\n      add\n        /* \"#utility.yul\":10586:10592   */\n      dup5\n        /* \"#utility.yul\":10542:10613   */\n      tag_213\n      jump\t// in\n    tag_351:\n        /* \"#utility.yul\":10398:10620   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10626:10817   */\n    tag_163:\n        /* \"#utility.yul\":10666:10669   */\n      0x00\n        /* \"#utility.yul\":10685:10705   */\n      tag_353\n        /* \"#utility.yul\":10703:10704   */\n      dup3\n        /* \"#utility.yul\":10685:10705   */\n      tag_195\n      jump\t// in\n    tag_353:\n        /* \"#utility.yul\":10680:10705   */\n      swap2\n      pop\n        /* \"#utility.yul\":10719:10739   */\n      tag_354\n        /* \"#utility.yul\":10737:10738   */\n      dup4\n        /* \"#utility.yul\":10719:10739   */\n      tag_195\n      jump\t// in\n    tag_354:\n        /* \"#utility.yul\":10714:10739   */\n      swap3\n      pop\n        /* \"#utility.yul\":10762:10763   */\n      dup3\n        /* \"#utility.yul\":10759:10760   */\n      dup3\n        /* \"#utility.yul\":10755:10764   */\n      add\n        /* \"#utility.yul\":10748:10764   */\n      swap1\n      pop\n        /* \"#utility.yul\":10783:10786   */\n      dup1\n        /* \"#utility.yul\":10780:10781   */\n      dup3\n        /* \"#utility.yul\":10777:10787   */\n      gt\n        /* \"#utility.yul\":10774:10810   */\n      iszero\n      tag_355\n      jumpi\n        /* \"#utility.yul\":10790:10808   */\n      tag_356\n      tag_204\n      jump\t// in\n    tag_356:\n        /* \"#utility.yul\":10774:10810   */\n    tag_355:\n        /* \"#utility.yul\":10626:10817   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10823:11003   */\n    tag_214:\n        /* \"#utility.yul\":10871:10948   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":10868:10869   */\n      0x00\n        /* \"#utility.yul\":10861:10949   */\n      mstore\n        /* \"#utility.yul\":10968:10972   */\n      0x41\n        /* \"#utility.yul\":10965:10966   */\n      0x04\n        /* \"#utility.yul\":10958:10973   */\n      mstore\n        /* \"#utility.yul\":10992:10996   */\n      0x24\n        /* \"#utility.yul\":10989:10990   */\n      0x00\n        /* \"#utility.yul\":10982:10997   */\n      revert\n        /* \"#utility.yul\":11009:11150   */\n    tag_215:\n        /* \"#utility.yul\":11058:11062   */\n      0x00\n        /* \"#utility.yul\":11081:11084   */\n      dup2\n        /* \"#utility.yul\":11073:11084   */\n      swap1\n      pop\n        /* \"#utility.yul\":11104:11107   */\n      dup2\n        /* \"#utility.yul\":11101:11102   */\n      0x00\n        /* \"#utility.yul\":11094:11108   */\n      mstore\n        /* \"#utility.yul\":11138:11142   */\n      0x20\n        /* \"#utility.yul\":11135:11136   */\n      0x00\n        /* \"#utility.yul\":11125:11143   */\n      keccak256\n        /* \"#utility.yul\":11117:11143   */\n      swap1\n      pop\n        /* \"#utility.yul\":11009:11150   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11156:11249   */\n    tag_216:\n        /* \"#utility.yul\":11193:11199   */\n      0x00\n        /* \"#utility.yul\":11240:11242   */\n      0x20\n        /* \"#utility.yul\":11235:11237   */\n      0x1f\n        /* \"#utility.yul\":11228:11233   */\n      dup4\n        /* \"#utility.yul\":11224:11238   */\n      add\n        /* \"#utility.yul\":11220:11243   */\n      div\n        /* \"#utility.yul\":11210:11243   */\n      swap1\n      pop\n        /* \"#utility.yul\":11156:11249   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11255:11362   */\n    tag_217:\n        /* \"#utility.yul\":11299:11307   */\n      0x00\n        /* \"#utility.yul\":11349:11354   */\n      dup3\n        /* \"#utility.yul\":11343:11347   */\n      dup3\n        /* \"#utility.yul\":11339:11355   */\n      shl\n        /* \"#utility.yul\":11318:11355   */\n      swap1\n      pop\n        /* \"#utility.yul\":11255:11362   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11368:11761   */\n    tag_218:\n        /* \"#utility.yul\":11437:11443   */\n      0x00\n        /* \"#utility.yul\":11487:11488   */\n      0x08\n        /* \"#utility.yul\":11475:11485   */\n      dup4\n        /* \"#utility.yul\":11471:11489   */\n      mul\n        /* \"#utility.yul\":11510:11607   */\n      tag_362\n        /* \"#utility.yul\":11540:11606   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":11529:11538   */\n      dup3\n        /* \"#utility.yul\":11510:11607   */\n      tag_217\n      jump\t// in\n    tag_362:\n        /* \"#utility.yul\":11628:11667   */\n      tag_363\n        /* \"#utility.yul\":11658:11666   */\n      dup7\n        /* \"#utility.yul\":11647:11656   */\n      dup4\n        /* \"#utility.yul\":11628:11667   */\n      tag_217\n      jump\t// in\n    tag_363:\n        /* \"#utility.yul\":11616:11667   */\n      swap6\n      pop\n        /* \"#utility.yul\":11700:11704   */\n      dup1\n        /* \"#utility.yul\":11696:11705   */\n      not\n        /* \"#utility.yul\":11689:11694   */\n      dup5\n        /* \"#utility.yul\":11685:11706   */\n      and\n        /* \"#utility.yul\":11676:11706   */\n      swap4\n      pop\n        /* \"#utility.yul\":11749:11753   */\n      dup1\n        /* \"#utility.yul\":11739:11747   */\n      dup7\n        /* \"#utility.yul\":11735:11754   */\n      and\n        /* \"#utility.yul\":11728:11733   */\n      dup5\n        /* \"#utility.yul\":11725:11755   */\n      or\n        /* \"#utility.yul\":11715:11755   */\n      swap3\n      pop\n        /* \"#utility.yul\":11444:11761   */\n      pop\n      pop\n        /* \"#utility.yul\":11368:11761   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11767:11909   */\n    tag_219:\n        /* \"#utility.yul\":11817:11826   */\n      0x00\n        /* \"#utility.yul\":11850:11903   */\n      tag_365\n        /* \"#utility.yul\":11868:11902   */\n      tag_366\n        /* \"#utility.yul\":11877:11901   */\n      tag_367\n        /* \"#utility.yul\":11895:11900   */\n      dup5\n        /* \"#utility.yul\":11877:11901   */\n      tag_195\n      jump\t// in\n    tag_367:\n        /* \"#utility.yul\":11868:11902   */\n      tag_210\n      jump\t// in\n    tag_366:\n        /* \"#utility.yul\":11850:11903   */\n      tag_195\n      jump\t// in\n    tag_365:\n        /* \"#utility.yul\":11837:11903   */\n      swap1\n      pop\n        /* \"#utility.yul\":11767:11909   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11915:11990   */\n    tag_220:\n        /* \"#utility.yul\":11958:11961   */\n      0x00\n        /* \"#utility.yul\":11979:11984   */\n      dup2\n        /* \"#utility.yul\":11972:11984   */\n      swap1\n      pop\n        /* \"#utility.yul\":11915:11990   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11996:12265   */\n    tag_221:\n        /* \"#utility.yul\":12106:12145   */\n      tag_370\n        /* \"#utility.yul\":12137:12144   */\n      dup4\n        /* \"#utility.yul\":12106:12145   */\n      tag_219\n      jump\t// in\n    tag_370:\n        /* \"#utility.yul\":12167:12258   */\n      tag_371\n        /* \"#utility.yul\":12216:12257   */\n      tag_372\n        /* \"#utility.yul\":12240:12256   */\n      dup3\n        /* \"#utility.yul\":12216:12257   */\n      tag_220\n      jump\t// in\n    tag_372:\n        /* \"#utility.yul\":12208:12214   */\n      dup5\n        /* \"#utility.yul\":12201:12205   */\n      dup5\n        /* \"#utility.yul\":12195:12206   */\n      sload\n        /* \"#utility.yul\":12167:12258   */\n      tag_218\n      jump\t// in\n    tag_371:\n        /* \"#utility.yul\":12161:12165   */\n      dup3\n        /* \"#utility.yul\":12154:12259   */\n      sstore\n        /* \"#utility.yul\":12072:12265   */\n      pop\n        /* \"#utility.yul\":11996:12265   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12271:12344   */\n    tag_222:\n        /* \"#utility.yul\":12316:12319   */\n      0x00\n        /* \"#utility.yul\":12271:12344   */\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":12350:12539   */\n    tag_223:\n        /* \"#utility.yul\":12427:12459   */\n      tag_375\n      tag_222\n      jump\t// in\n    tag_375:\n        /* \"#utility.yul\":12468:12533   */\n      tag_376\n        /* \"#utility.yul\":12526:12532   */\n      dup2\n        /* \"#utility.yul\":12518:12524   */\n      dup5\n        /* \"#utility.yul\":12512:12516   */\n      dup5\n        /* \"#utility.yul\":12468:12533   */\n      tag_221\n      jump\t// in\n    tag_376:\n        /* \"#utility.yul\":12403:12539   */\n      pop\n        /* \"#utility.yul\":12350:12539   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12545:12731   */\n    tag_224:\n        /* \"#utility.yul\":12605:12725   */\n    tag_378:\n        /* \"#utility.yul\":12622:12625   */\n      dup2\n        /* \"#utility.yul\":12615:12620   */\n      dup2\n        /* \"#utility.yul\":12612:12626   */\n      lt\n        /* \"#utility.yul\":12605:12725   */\n      iszero\n      tag_380\n      jumpi\n        /* \"#utility.yul\":12676:12715   */\n      tag_381\n        /* \"#utility.yul\":12713:12714   */\n      0x00\n        /* \"#utility.yul\":12706:12711   */\n      dup3\n        /* \"#utility.yul\":12676:12715   */\n      tag_223\n      jump\t// in\n    tag_381:\n        /* \"#utility.yul\":12649:12650   */\n      0x01\n        /* \"#utility.yul\":12642:12647   */\n      dup2\n        /* \"#utility.yul\":12638:12651   */\n      add\n        /* \"#utility.yul\":12629:12651   */\n      swap1\n      pop\n        /* \"#utility.yul\":12605:12725   */\n      jump(tag_378)\n    tag_380:\n        /* \"#utility.yul\":12545:12731   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12737:13280   */\n    tag_225:\n        /* \"#utility.yul\":12838:12840   */\n      0x1f\n        /* \"#utility.yul\":12833:12836   */\n      dup3\n        /* \"#utility.yul\":12830:12841   */\n      gt\n        /* \"#utility.yul\":12827:13273   */\n      iszero\n      tag_383\n      jumpi\n        /* \"#utility.yul\":12872:12910   */\n      tag_384\n        /* \"#utility.yul\":12904:12909   */\n      dup2\n        /* \"#utility.yul\":12872:12910   */\n      tag_215\n      jump\t// in\n    tag_384:\n        /* \"#utility.yul\":12956:12985   */\n      tag_385\n        /* \"#utility.yul\":12974:12984   */\n      dup5\n        /* \"#utility.yul\":12956:12985   */\n      tag_216\n      jump\t// in\n    tag_385:\n        /* \"#utility.yul\":12946:12954   */\n      dup2\n        /* \"#utility.yul\":12942:12986   */\n      add\n        /* \"#utility.yul\":13139:13141   */\n      0x20\n        /* \"#utility.yul\":13127:13137   */\n      dup6\n        /* \"#utility.yul\":13124:13142   */\n      lt\n        /* \"#utility.yul\":13121:13170   */\n      iszero\n      tag_386\n      jumpi\n        /* \"#utility.yul\":13160:13168   */\n      dup2\n        /* \"#utility.yul\":13145:13168   */\n      swap1\n      pop\n        /* \"#utility.yul\":13121:13170   */\n    tag_386:\n        /* \"#utility.yul\":13183:13263   */\n      tag_387\n        /* \"#utility.yul\":13239:13261   */\n      tag_388\n        /* \"#utility.yul\":13257:13260   */\n      dup6\n        /* \"#utility.yul\":13239:13261   */\n      tag_216\n      jump\t// in\n    tag_388:\n        /* \"#utility.yul\":13229:13237   */\n      dup4\n        /* \"#utility.yul\":13225:13262   */\n      add\n        /* \"#utility.yul\":13212:13223   */\n      dup3\n        /* \"#utility.yul\":13183:13263   */\n      tag_224\n      jump\t// in\n    tag_387:\n        /* \"#utility.yul\":12842:13273   */\n      pop\n      pop\n        /* \"#utility.yul\":12827:13273   */\n    tag_383:\n        /* \"#utility.yul\":12737:13280   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13286:13403   */\n    tag_226:\n        /* \"#utility.yul\":13340:13348   */\n      0x00\n        /* \"#utility.yul\":13390:13395   */\n      dup3\n        /* \"#utility.yul\":13384:13388   */\n      dup3\n        /* \"#utility.yul\":13380:13396   */\n      shr\n        /* \"#utility.yul\":13359:13396   */\n      swap1\n      pop\n        /* \"#utility.yul\":13286:13403   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13409:13578   */\n    tag_227:\n        /* \"#utility.yul\":13453:13459   */\n      0x00\n        /* \"#utility.yul\":13486:13537   */\n      tag_391\n        /* \"#utility.yul\":13534:13535   */\n      0x00\n        /* \"#utility.yul\":13530:13536   */\n      not\n        /* \"#utility.yul\":13522:13527   */\n      dup5\n        /* \"#utility.yul\":13519:13520   */\n      0x08\n        /* \"#utility.yul\":13515:13528   */\n      mul\n        /* \"#utility.yul\":13486:13537   */\n      tag_226\n      jump\t// in\n    tag_391:\n        /* \"#utility.yul\":13482:13538   */\n      not\n        /* \"#utility.yul\":13567:13571   */\n      dup1\n        /* \"#utility.yul\":13561:13565   */\n      dup4\n        /* \"#utility.yul\":13557:13572   */\n      and\n        /* \"#utility.yul\":13547:13572   */\n      swap2\n      pop\n        /* \"#utility.yul\":13460:13578   */\n      pop\n        /* \"#utility.yul\":13409:13578   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13583:13878   */\n    tag_228:\n        /* \"#utility.yul\":13659:13663   */\n      0x00\n        /* \"#utility.yul\":13805:13834   */\n      tag_393\n        /* \"#utility.yul\":13830:13833   */\n      dup4\n        /* \"#utility.yul\":13824:13828   */\n      dup4\n        /* \"#utility.yul\":13805:13834   */\n      tag_227\n      jump\t// in\n    tag_393:\n        /* \"#utility.yul\":13797:13834   */\n      swap2\n      pop\n        /* \"#utility.yul\":13867:13870   */\n      dup3\n        /* \"#utility.yul\":13864:13865   */\n      0x02\n        /* \"#utility.yul\":13860:13871   */\n      mul\n        /* \"#utility.yul\":13854:13858   */\n      dup3\n        /* \"#utility.yul\":13851:13872   */\n      or\n        /* \"#utility.yul\":13843:13872   */\n      swap1\n      pop\n        /* \"#utility.yul\":13583:13878   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13883:15278   */\n    tag_179:\n        /* \"#utility.yul\":14000:14037   */\n      tag_395\n        /* \"#utility.yul\":14033:14036   */\n      dup3\n        /* \"#utility.yul\":14000:14037   */\n      tag_183\n      jump\t// in\n    tag_395:\n        /* \"#utility.yul\":14102:14120   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":14094:14100   */\n      dup2\n        /* \"#utility.yul\":14091:14121   */\n      gt\n        /* \"#utility.yul\":14088:14144   */\n      iszero\n      tag_396\n      jumpi\n        /* \"#utility.yul\":14124:14142   */\n      tag_397\n      tag_214\n      jump\t// in\n    tag_397:\n        /* \"#utility.yul\":14088:14144   */\n    tag_396:\n        /* \"#utility.yul\":14168:14206   */\n      tag_398\n        /* \"#utility.yul\":14200:14204   */\n      dup3\n        /* \"#utility.yul\":14194:14205   */\n      sload\n        /* \"#utility.yul\":14168:14206   */\n      tag_64\n      jump\t// in\n    tag_398:\n        /* \"#utility.yul\":14253:14320   */\n      tag_399\n        /* \"#utility.yul\":14313:14319   */\n      dup3\n        /* \"#utility.yul\":14305:14311   */\n      dup3\n        /* \"#utility.yul\":14299:14303   */\n      dup6\n        /* \"#utility.yul\":14253:14320   */\n      tag_225\n      jump\t// in\n    tag_399:\n        /* \"#utility.yul\":14347:14348   */\n      0x00\n        /* \"#utility.yul\":14371:14375   */\n      0x20\n        /* \"#utility.yul\":14358:14375   */\n      swap1\n      pop\n        /* \"#utility.yul\":14403:14405   */\n      0x1f\n        /* \"#utility.yul\":14395:14401   */\n      dup4\n        /* \"#utility.yul\":14392:14406   */\n      gt\n        /* \"#utility.yul\":14420:14421   */\n      0x01\n        /* \"#utility.yul\":14415:15033   */\n      dup2\n      eq\n      tag_401\n      jumpi\n        /* \"#utility.yul\":15077:15078   */\n      0x00\n        /* \"#utility.yul\":15094:15100   */\n      dup5\n        /* \"#utility.yul\":15091:15168   */\n      iszero\n      tag_402\n      jumpi\n        /* \"#utility.yul\":15143:15152   */\n      dup3\n        /* \"#utility.yul\":15138:15141   */\n      dup8\n        /* \"#utility.yul\":15134:15153   */\n      add\n        /* \"#utility.yul\":15128:15154   */\n      mload\n        /* \"#utility.yul\":15119:15154   */\n      swap1\n      pop\n        /* \"#utility.yul\":15091:15168   */\n    tag_402:\n        /* \"#utility.yul\":15194:15261   */\n      tag_403\n        /* \"#utility.yul\":15254:15260   */\n      dup6\n        /* \"#utility.yul\":15247:15252   */\n      dup3\n        /* \"#utility.yul\":15194:15261   */\n      tag_228\n      jump\t// in\n    tag_403:\n        /* \"#utility.yul\":15188:15192   */\n      dup7\n        /* \"#utility.yul\":15181:15262   */\n      sstore\n        /* \"#utility.yul\":15050:15272   */\n      pop\n        /* \"#utility.yul\":14385:15272   */\n      jump(tag_400)\n        /* \"#utility.yul\":14415:15033   */\n    tag_401:\n        /* \"#utility.yul\":14467:14471   */\n      0x1f\n        /* \"#utility.yul\":14463:14472   */\n      not\n        /* \"#utility.yul\":14455:14461   */\n      dup5\n        /* \"#utility.yul\":14451:14473   */\n      and\n        /* \"#utility.yul\":14501:14538   */\n      tag_404\n        /* \"#utility.yul\":14533:14537   */\n      dup7\n        /* \"#utility.yul\":14501:14538   */\n      tag_215\n      jump\t// in\n    tag_404:\n        /* \"#utility.yul\":14560:14561   */\n      0x00\n        /* \"#utility.yul\":14574:14782   */\n    tag_405:\n        /* \"#utility.yul\":14588:14595   */\n      dup3\n        /* \"#utility.yul\":14585:14586   */\n      dup2\n        /* \"#utility.yul\":14582:14596   */\n      lt\n        /* \"#utility.yul\":14574:14782   */\n      iszero\n      tag_407\n      jumpi\n        /* \"#utility.yul\":14667:14676   */\n      dup5\n        /* \"#utility.yul\":14662:14665   */\n      dup10\n        /* \"#utility.yul\":14658:14677   */\n      add\n        /* \"#utility.yul\":14652:14678   */\n      mload\n        /* \"#utility.yul\":14644:14650   */\n      dup3\n        /* \"#utility.yul\":14637:14679   */\n      sstore\n        /* \"#utility.yul\":14718:14719   */\n      0x01\n        /* \"#utility.yul\":14710:14716   */\n      dup3\n        /* \"#utility.yul\":14706:14720   */\n      add\n        /* \"#utility.yul\":14696:14720   */\n      swap2\n      pop\n        /* \"#utility.yul\":14765:14767   */\n      0x20\n        /* \"#utility.yul\":14754:14763   */\n      dup6\n        /* \"#utility.yul\":14750:14768   */\n      add\n        /* \"#utility.yul\":14737:14768   */\n      swap5\n      pop\n        /* \"#utility.yul\":14611:14615   */\n      0x20\n        /* \"#utility.yul\":14608:14609   */\n      dup2\n        /* \"#utility.yul\":14604:14616   */\n      add\n        /* \"#utility.yul\":14599:14616   */\n      swap1\n      pop\n        /* \"#utility.yul\":14574:14782   */\n      jump(tag_405)\n    tag_407:\n        /* \"#utility.yul\":14810:14816   */\n      dup7\n        /* \"#utility.yul\":14801:14808   */\n      dup4\n        /* \"#utility.yul\":14798:14817   */\n      lt\n        /* \"#utility.yul\":14795:14974   */\n      iszero\n      tag_408\n      jumpi\n        /* \"#utility.yul\":14868:14877   */\n      dup5\n        /* \"#utility.yul\":14863:14866   */\n      dup10\n        /* \"#utility.yul\":14859:14878   */\n      add\n        /* \"#utility.yul\":14853:14879   */\n      mload\n        /* \"#utility.yul\":14911:14959   */\n      tag_409\n        /* \"#utility.yul\":14953:14957   */\n      0x1f\n        /* \"#utility.yul\":14945:14951   */\n      dup10\n        /* \"#utility.yul\":14941:14958   */\n      and\n        /* \"#utility.yul\":14930:14939   */\n      dup3\n        /* \"#utility.yul\":14911:14959   */\n      tag_227\n      jump\t// in\n    tag_409:\n        /* \"#utility.yul\":14903:14909   */\n      dup4\n        /* \"#utility.yul\":14896:14960   */\n      sstore\n        /* \"#utility.yul\":14818:14974   */\n      pop\n        /* \"#utility.yul\":14795:14974   */\n    tag_408:\n        /* \"#utility.yul\":15020:15021   */\n      0x01\n        /* \"#utility.yul\":15016:15017   */\n      0x02\n        /* \"#utility.yul\":15008:15014   */\n      dup9\n        /* \"#utility.yul\":15004:15018   */\n      mul\n        /* \"#utility.yul\":15000:15022   */\n      add\n        /* \"#utility.yul\":14994:14998   */\n      dup9\n        /* \"#utility.yul\":14987:15023   */\n      sstore\n        /* \"#utility.yul\":14422:15033   */\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":14385:15272   */\n    tag_400:\n      pop\n        /* \"#utility.yul\":13975:15278   */\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":13883:15278   */\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220ca217883c7127f872305edc8572137814500114f0d66348133af9042069b703964736f6c63430008190033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080604052348015600e575f80fd5b506116e38061001c5f395ff3fe608060405234801561000f575f80fd5b50600436106100a7575f3560e01c806340c10f191161006f57806340c10f191461016557806370a08231146101815780638129fc1c146101b157806395d89b41146101bb578063a9059cbb146101d9578063dd62ed3e14610209576100a7565b806306fdde03146100ab578063095ea7b3146100c957806318160ddd146100f957806323b872dd14610117578063313ce56714610147575b5f80fd5b6100b3610239565b6040516100c09190610ea4565b60405180910390f35b6100e360048036038101906100de9190610f55565b6102d7565b6040516100f09190610fad565b60405180910390f35b6101016102f9565b60405161010e9190610fd5565b60405180910390f35b610131600480360381019061012c9190610fee565b610310565b60405161013e9190610fad565b60405180910390f35b61014f61033e565b60405161015c9190611059565b60405180910390f35b61017f600480360381019061017a9190610f55565b610346565b005b61019b60048036038101906101969190611072565b610354565b6040516101a89190610fd5565b60405180910390f35b6101b96103a7565b005b6101c36105c0565b6040516101d09190610ea4565b60405180910390f35b6101f360048036038101906101ee9190610f55565b61065e565b6040516102009190610fad565b60405180910390f35b610223600480360381019061021e919061109d565b610680565b6040516102309190610fd5565b60405180910390f35b60605f610244610710565b905080600301805461025590611108565b80601f016020809104026020016040519081016040528092919081815260200182805461028190611108565b80156102cc5780601f106102a3576101008083540402835291602001916102cc565b820191905f5260205f20905b8154815290600101906020018083116102af57829003601f168201915b505050505091505090565b5f806102e1610737565b90506102ee81858561073e565b600191505092915050565b5f80610303610710565b9050806002015491505090565b5f8061031a610737565b9050610327858285610750565b6103328585856107e2565b60019150509392505050565b5f6012905090565b61035082826108d2565b5050565b5f8061035e610710565b9050805f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054915050919050565b5f6103b0610951565b90505f815f0160089054906101000a900460ff161590505f825f015f9054906101000a900467ffffffffffffffff1690505f808267ffffffffffffffff161480156103f85750825b90505f60018367ffffffffffffffff1614801561042b57505f3073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015610439575080155b15610470576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001855f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555083156104bd576001855f0160086101000a81548160ff0219169083151502179055505b6105316040518060400160405280600981526020017f4d794552433230563100000000000000000000000000000000000000000000008152506040518060400160405280600281526020017f4d31000000000000000000000000000000000000000000000000000000000000815250610978565b61055f3361053d61033e565b60ff16600a61054c9190611294565b620f424061055a91906112de565b6108d2565b83156105b9575f855f0160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d260016040516105b09190611374565b60405180910390a15b5050505050565b60605f6105cb610710565b90508060040180546105dc90611108565b80601f016020809104026020016040519081016040528092919081815260200182805461060890611108565b80156106535780601f1061062a57610100808354040283529160200191610653565b820191905f5260205f20905b81548152906001019060200180831161063657829003601f168201915b505050505091505090565b5f80610668610737565b90506106758185856107e2565b600191505092915050565b5f8061068a610710565b9050806001015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205491505092915050565b5f7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00905090565b5f33905090565b61074b838383600161098e565b505050565b5f61075b8484610680565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146107dc57818110156107cd578281836040517ffb8f41b20000000000000000000000000000000000000000000000000000000081526004016107c49392919061139c565b60405180910390fd5b6107db84848484035f61098e565b5b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610852575f6040517f96c6fd1e00000000000000000000000000000000000000000000000000000000815260040161084991906113d1565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108c2575f6040517fec442f050000000000000000000000000000000000000000000000000000000081526004016108b991906113d1565b60405180910390fd5b6108cd838383610b6b565b505050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610942575f6040517fec442f0500000000000000000000000000000000000000000000000000000000815260040161093991906113d1565b60405180910390fd5b61094d5f8383610b6b565b5050565b5f7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b610980610d9a565b61098a8282610dda565b5050565b5f610997610710565b90505f73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603610a09575f6040517fe602df05000000000000000000000000000000000000000000000000000000008152600401610a0091906113d1565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610a79575f6040517f94280d62000000000000000000000000000000000000000000000000000000008152600401610a7091906113d1565b60405180910390fd5b82816001015f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508115610b64578373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92585604051610b5b9190610fd5565b60405180910390a35b5050505050565b5f610b74610710565b90505f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610bc85781816002015f828254610bbc91906113ea565b92505081905550610c9a565b5f815f015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905082811015610c53578481846040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401610c4a9392919061139c565b60405180910390fd5b828103825f015f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610ce35781816002015f8282540392505081905550610d2f565b81815f015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610d8c9190610fd5565b60405180910390a350505050565b610da2610e16565b610dd8576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b610de2610d9a565b5f610deb610710565b905082816003019081610dfe91906115de565b5081816004019081610e1091906115de565b50505050565b5f610e1f610951565b5f0160089054906101000a900460ff16905090565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f610e7682610e34565b610e808185610e3e565b9350610e90818560208601610e4e565b610e9981610e5c565b840191505092915050565b5f6020820190508181035f830152610ebc8184610e6c565b905092915050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610ef182610ec8565b9050919050565b610f0181610ee7565b8114610f0b575f80fd5b50565b5f81359050610f1c81610ef8565b92915050565b5f819050919050565b610f3481610f22565b8114610f3e575f80fd5b50565b5f81359050610f4f81610f2b565b92915050565b5f8060408385031215610f6b57610f6a610ec4565b5b5f610f7885828601610f0e565b9250506020610f8985828601610f41565b9150509250929050565b5f8115159050919050565b610fa781610f93565b82525050565b5f602082019050610fc05f830184610f9e565b92915050565b610fcf81610f22565b82525050565b5f602082019050610fe85f830184610fc6565b92915050565b5f805f6060848603121561100557611004610ec4565b5b5f61101286828701610f0e565b935050602061102386828701610f0e565b925050604061103486828701610f41565b9150509250925092565b5f60ff82169050919050565b6110538161103e565b82525050565b5f60208201905061106c5f83018461104a565b92915050565b5f6020828403121561108757611086610ec4565b5b5f61109484828501610f0e565b91505092915050565b5f80604083850312156110b3576110b2610ec4565b5b5f6110c085828601610f0e565b92505060206110d185828601610f0e565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061111f57607f821691505b602082108103611132576111316110db565b5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f8160011c9050919050565b5f808291508390505b60018511156111ba5780860481111561119657611195611138565b5b60018516156111a55780820291505b80810290506111b385611165565b945061117a565b94509492505050565b5f826111d2576001905061128d565b816111df575f905061128d565b81600181146111f557600281146111ff5761122e565b600191505061128d565b60ff84111561121157611210611138565b5b8360020a91508482111561122857611227611138565b5b5061128d565b5060208310610133831016604e8410600b84101617156112635782820a90508381111561125e5761125d611138565b5b61128d565b6112708484846001611171565b9250905081840481111561128757611286611138565b5b81810290505b9392505050565b5f61129e82610f22565b91506112a983610f22565b92506112d67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846111c3565b905092915050565b5f6112e882610f22565b91506112f383610f22565b925082820261130181610f22565b9150828204841483151761131857611317611138565b5b5092915050565b5f819050919050565b5f67ffffffffffffffff82169050919050565b5f819050919050565b5f61135e6113596113548461131f565b61133b565b611328565b9050919050565b61136e81611344565b82525050565b5f6020820190506113875f830184611365565b92915050565b61139681610ee7565b82525050565b5f6060820190506113af5f83018661138d565b6113bc6020830185610fc6565b6113c96040830184610fc6565b949350505050565b5f6020820190506113e45f83018461138d565b92915050565b5f6113f482610f22565b91506113ff83610f22565b925082820190508082111561141757611416611138565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026114a67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261146b565b6114b0868361146b565b95508019841693508086168417925050509392505050565b5f6114e26114dd6114d884610f22565b61133b565b610f22565b9050919050565b5f819050919050565b6114fb836114c8565b61150f611507826114e9565b848454611477565b825550505050565b5f90565b611523611517565b61152e8184846114f2565b505050565b5b81811015611551576115465f8261151b565b600181019050611534565b5050565b601f821115611596576115678161144a565b6115708461145c565b8101602085101561157f578190505b61159361158b8561145c565b830182611533565b50505b505050565b5f82821c905092915050565b5f6115b65f198460080261159b565b1980831691505092915050565b5f6115ce83836115a7565b9150826002028217905092915050565b6115e782610e34565b67ffffffffffffffff811115611600576115ff61141d565b5b61160a8254611108565b611615828285611555565b5f60209050601f831160018114611646575f8415611634578287015190505b61163e85826115c3565b8655506116a5565b601f1984166116548661144a565b5f5b8281101561167b57848901518255600182019150602085019450602081019050611656565b868310156116985784890151611694601f8916826115a7565b8355505b6001600288020188555050505b50505050505056fea2646970667358221220ca217883c7127f872305edc8572137814500114f0d66348133af9042069b703964736f6c63430008190033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xE JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x16E3 DUP1 PUSH2 0x1C PUSH0 CODECOPY PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA7 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x40C10F19 GT PUSH2 0x6F JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x165 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x181 JUMPI DUP1 PUSH4 0x8129FC1C EQ PUSH2 0x1B1 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1BB JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x1D9 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x209 JUMPI PUSH2 0xA7 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAB JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xC9 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xF9 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x117 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x147 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xB3 PUSH2 0x239 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC0 SWAP2 SWAP1 PUSH2 0xEA4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xDE SWAP2 SWAP1 PUSH2 0xF55 JUMP JUMPDEST PUSH2 0x2D7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF0 SWAP2 SWAP1 PUSH2 0xFAD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x101 PUSH2 0x2F9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10E SWAP2 SWAP1 PUSH2 0xFD5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x131 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x12C SWAP2 SWAP1 PUSH2 0xFEE JUMP JUMPDEST PUSH2 0x310 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x13E SWAP2 SWAP1 PUSH2 0xFAD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x14F PUSH2 0x33E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15C SWAP2 SWAP1 PUSH2 0x1059 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x17F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x17A SWAP2 SWAP1 PUSH2 0xF55 JUMP JUMPDEST PUSH2 0x346 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x19B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x196 SWAP2 SWAP1 PUSH2 0x1072 JUMP JUMPDEST PUSH2 0x354 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A8 SWAP2 SWAP1 PUSH2 0xFD5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B9 PUSH2 0x3A7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C3 PUSH2 0x5C0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D0 SWAP2 SWAP1 PUSH2 0xEA4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EE SWAP2 SWAP1 PUSH2 0xF55 JUMP JUMPDEST PUSH2 0x65E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x200 SWAP2 SWAP1 PUSH2 0xFAD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x223 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x21E SWAP2 SWAP1 PUSH2 0x109D JUMP JUMPDEST PUSH2 0x680 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x230 SWAP2 SWAP1 PUSH2 0xFD5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0x244 PUSH2 0x710 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x3 ADD DUP1 SLOAD PUSH2 0x255 SWAP1 PUSH2 0x1108 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x281 SWAP1 PUSH2 0x1108 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2CC JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2A3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2CC JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2AF JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x2E1 PUSH2 0x737 JUMP JUMPDEST SWAP1 POP PUSH2 0x2EE DUP2 DUP6 DUP6 PUSH2 0x73E JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x303 PUSH2 0x710 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x2 ADD SLOAD SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x31A PUSH2 0x737 JUMP JUMPDEST SWAP1 POP PUSH2 0x327 DUP6 DUP3 DUP6 PUSH2 0x750 JUMP JUMPDEST PUSH2 0x332 DUP6 DUP6 DUP6 PUSH2 0x7E2 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x350 DUP3 DUP3 PUSH2 0x8D2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x35E PUSH2 0x710 JUMP JUMPDEST SWAP1 POP DUP1 PUSH0 ADD PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x3B0 PUSH2 0x951 JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 PUSH0 ADD PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP PUSH0 DUP3 PUSH0 ADD PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH0 DUP1 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x3F8 JUMPI POP DUP3 JUMPDEST SWAP1 POP PUSH0 PUSH1 0x1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x42B JUMPI POP PUSH0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE EQ JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0x439 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x470 JUMPI PUSH1 0x40 MLOAD PUSH32 0xF92EE8A900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP6 PUSH0 ADD PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP4 ISZERO PUSH2 0x4BD JUMPI PUSH1 0x1 DUP6 PUSH0 ADD PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH2 0x531 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x9 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4D79455243323056310000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4D31000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH2 0x978 JUMP JUMPDEST PUSH2 0x55F CALLER PUSH2 0x53D PUSH2 0x33E JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0xA PUSH2 0x54C SWAP2 SWAP1 PUSH2 0x1294 JUMP JUMPDEST PUSH3 0xF4240 PUSH2 0x55A SWAP2 SWAP1 PUSH2 0x12DE JUMP JUMPDEST PUSH2 0x8D2 JUMP JUMPDEST DUP4 ISZERO PUSH2 0x5B9 JUMPI PUSH0 DUP6 PUSH0 ADD PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0x5B0 SWAP2 SWAP1 PUSH2 0x1374 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0x5CB PUSH2 0x710 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x4 ADD DUP1 SLOAD PUSH2 0x5DC SWAP1 PUSH2 0x1108 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x608 SWAP1 PUSH2 0x1108 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x653 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x62A JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x653 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x636 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x668 PUSH2 0x737 JUMP JUMPDEST SWAP1 POP PUSH2 0x675 DUP2 DUP6 DUP6 PUSH2 0x7E2 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x68A PUSH2 0x710 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 ADD PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH32 0x52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE00 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x74B DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x98E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x75B DUP5 DUP5 PUSH2 0x680 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x7DC JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x7CD JUMPI DUP3 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xFB8F41B200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7C4 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x139C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7DB DUP5 DUP5 DUP5 DUP5 SUB PUSH0 PUSH2 0x98E JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x852 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x849 SWAP2 SWAP1 PUSH2 0x13D1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x8C2 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8B9 SWAP2 SWAP1 PUSH2 0x13D1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8CD DUP4 DUP4 DUP4 PUSH2 0xB6B JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x942 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x939 SWAP2 SWAP1 PUSH2 0x13D1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x94D PUSH0 DUP4 DUP4 PUSH2 0xB6B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x980 PUSH2 0xD9A JUMP JUMPDEST PUSH2 0x98A DUP3 DUP3 PUSH2 0xDDA JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH2 0x997 PUSH2 0x710 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xA09 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xE602DF0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA00 SWAP2 SWAP1 PUSH2 0x13D1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xA79 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x94280D6200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA70 SWAP2 SWAP1 PUSH2 0x13D1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 DUP2 PUSH1 0x1 ADD PUSH0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 ISZERO PUSH2 0xB64 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP6 PUSH1 0x40 MLOAD PUSH2 0xB5B SWAP2 SWAP1 PUSH2 0xFD5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0xB74 PUSH2 0x710 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xBC8 JUMPI DUP2 DUP2 PUSH1 0x2 ADD PUSH0 DUP3 DUP3 SLOAD PUSH2 0xBBC SWAP2 SWAP1 PUSH2 0x13EA JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0xC9A JUMP JUMPDEST PUSH0 DUP2 PUSH0 ADD PUSH0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0xC53 JUMPI DUP5 DUP2 DUP5 PUSH1 0x40 MLOAD PUSH32 0xE450D38C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC4A SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x139C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 DUP2 SUB DUP3 PUSH0 ADD PUSH0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xCE3 JUMPI DUP2 DUP2 PUSH1 0x2 ADD PUSH0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0xD2F JUMP JUMPDEST DUP2 DUP2 PUSH0 ADD PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xD8C SWAP2 SWAP1 PUSH2 0xFD5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH2 0xDA2 PUSH2 0xE16 JUMP JUMPDEST PUSH2 0xDD8 JUMPI PUSH1 0x40 MLOAD PUSH32 0xD7E6BCF800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0xDE2 PUSH2 0xD9A JUMP JUMPDEST PUSH0 PUSH2 0xDEB PUSH2 0x710 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 PUSH1 0x3 ADD SWAP1 DUP2 PUSH2 0xDFE SWAP2 SWAP1 PUSH2 0x15DE JUMP JUMPDEST POP DUP2 DUP2 PUSH1 0x4 ADD SWAP1 DUP2 PUSH2 0xE10 SWAP2 SWAP1 PUSH2 0x15DE JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0xE1F PUSH2 0x951 JUMP JUMPDEST PUSH0 ADD PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 MCOPY PUSH0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xE76 DUP3 PUSH2 0xE34 JUMP JUMPDEST PUSH2 0xE80 DUP2 DUP6 PUSH2 0xE3E JUMP JUMPDEST SWAP4 POP PUSH2 0xE90 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xE4E JUMP JUMPDEST PUSH2 0xE99 DUP2 PUSH2 0xE5C JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0xEBC DUP2 DUP5 PUSH2 0xE6C JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xEF1 DUP3 PUSH2 0xEC8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xF01 DUP2 PUSH2 0xEE7 JUMP JUMPDEST DUP2 EQ PUSH2 0xF0B JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xF1C DUP2 PUSH2 0xEF8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xF34 DUP2 PUSH2 0xF22 JUMP JUMPDEST DUP2 EQ PUSH2 0xF3E JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xF4F DUP2 PUSH2 0xF2B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF6B JUMPI PUSH2 0xF6A PUSH2 0xEC4 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0xF78 DUP6 DUP3 DUP7 ADD PUSH2 0xF0E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xF89 DUP6 DUP3 DUP7 ADD PUSH2 0xF41 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xFA7 DUP2 PUSH2 0xF93 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xFC0 PUSH0 DUP4 ADD DUP5 PUSH2 0xF9E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xFCF DUP2 PUSH2 0xF22 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xFE8 PUSH0 DUP4 ADD DUP5 PUSH2 0xFC6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1005 JUMPI PUSH2 0x1004 PUSH2 0xEC4 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1012 DUP7 DUP3 DUP8 ADD PUSH2 0xF0E JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1023 DUP7 DUP3 DUP8 ADD PUSH2 0xF0E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1034 DUP7 DUP3 DUP8 ADD PUSH2 0xF41 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1053 DUP2 PUSH2 0x103E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x106C PUSH0 DUP4 ADD DUP5 PUSH2 0x104A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1087 JUMPI PUSH2 0x1086 PUSH2 0xEC4 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1094 DUP5 DUP3 DUP6 ADD PUSH2 0xF0E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x10B3 JUMPI PUSH2 0x10B2 PUSH2 0xEC4 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x10C0 DUP6 DUP3 DUP7 ADD PUSH2 0xF0E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x10D1 DUP6 DUP3 DUP7 ADD PUSH2 0xF0E JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x111F JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1132 JUMPI PUSH2 0x1131 PUSH2 0x10DB JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP2 PUSH1 0x1 SHR SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 DUP3 SWAP2 POP DUP4 SWAP1 POP JUMPDEST PUSH1 0x1 DUP6 GT ISZERO PUSH2 0x11BA JUMPI DUP1 DUP7 DIV DUP2 GT ISZERO PUSH2 0x1196 JUMPI PUSH2 0x1195 PUSH2 0x1138 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP6 AND ISZERO PUSH2 0x11A5 JUMPI DUP1 DUP3 MUL SWAP2 POP JUMPDEST DUP1 DUP2 MUL SWAP1 POP PUSH2 0x11B3 DUP6 PUSH2 0x1165 JUMP JUMPDEST SWAP5 POP PUSH2 0x117A JUMP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH2 0x11D2 JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0x128D JUMP JUMPDEST DUP2 PUSH2 0x11DF JUMPI PUSH0 SWAP1 POP PUSH2 0x128D JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x11F5 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x11FF JUMPI PUSH2 0x122E JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x128D JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x1211 JUMPI PUSH2 0x1210 PUSH2 0x1138 JUMP JUMPDEST JUMPDEST DUP4 PUSH1 0x2 EXP SWAP2 POP DUP5 DUP3 GT ISZERO PUSH2 0x1228 JUMPI PUSH2 0x1227 PUSH2 0x1138 JUMP JUMPDEST JUMPDEST POP PUSH2 0x128D JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x1263 JUMPI DUP3 DUP3 EXP SWAP1 POP DUP4 DUP2 GT ISZERO PUSH2 0x125E JUMPI PUSH2 0x125D PUSH2 0x1138 JUMP JUMPDEST JUMPDEST PUSH2 0x128D JUMP JUMPDEST PUSH2 0x1270 DUP5 DUP5 DUP5 PUSH1 0x1 PUSH2 0x1171 JUMP JUMPDEST SWAP3 POP SWAP1 POP DUP2 DUP5 DIV DUP2 GT ISZERO PUSH2 0x1287 JUMPI PUSH2 0x1286 PUSH2 0x1138 JUMP JUMPDEST JUMPDEST DUP2 DUP2 MUL SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x129E DUP3 PUSH2 0xF22 JUMP JUMPDEST SWAP2 POP PUSH2 0x12A9 DUP4 PUSH2 0xF22 JUMP JUMPDEST SWAP3 POP PUSH2 0x12D6 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP5 PUSH2 0x11C3 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x12E8 DUP3 PUSH2 0xF22 JUMP JUMPDEST SWAP2 POP PUSH2 0x12F3 DUP4 PUSH2 0xF22 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x1301 DUP2 PUSH2 0xF22 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x1318 JUMPI PUSH2 0x1317 PUSH2 0x1138 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x135E PUSH2 0x1359 PUSH2 0x1354 DUP5 PUSH2 0x131F JUMP JUMPDEST PUSH2 0x133B JUMP JUMPDEST PUSH2 0x1328 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x136E DUP2 PUSH2 0x1344 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1387 PUSH0 DUP4 ADD DUP5 PUSH2 0x1365 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1396 DUP2 PUSH2 0xEE7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x13AF PUSH0 DUP4 ADD DUP7 PUSH2 0x138D JUMP JUMPDEST PUSH2 0x13BC PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xFC6 JUMP JUMPDEST PUSH2 0x13C9 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xFC6 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x13E4 PUSH0 DUP4 ADD DUP5 PUSH2 0x138D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x13F4 DUP3 PUSH2 0xF22 JUMP JUMPDEST SWAP2 POP PUSH2 0x13FF DUP4 PUSH2 0xF22 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x1417 JUMPI PUSH2 0x1416 PUSH2 0x1138 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP2 SWAP1 POP DUP2 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x8 DUP4 MUL PUSH2 0x14A6 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x146B JUMP JUMPDEST PUSH2 0x14B0 DUP7 DUP4 PUSH2 0x146B JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x14E2 PUSH2 0x14DD PUSH2 0x14D8 DUP5 PUSH2 0xF22 JUMP JUMPDEST PUSH2 0x133B JUMP JUMPDEST PUSH2 0xF22 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x14FB DUP4 PUSH2 0x14C8 JUMP JUMPDEST PUSH2 0x150F PUSH2 0x1507 DUP3 PUSH2 0x14E9 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x1477 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH0 SWAP1 JUMP JUMPDEST PUSH2 0x1523 PUSH2 0x1517 JUMP JUMPDEST PUSH2 0x152E DUP2 DUP5 DUP5 PUSH2 0x14F2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1551 JUMPI PUSH2 0x1546 PUSH0 DUP3 PUSH2 0x151B JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x1534 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x1596 JUMPI PUSH2 0x1567 DUP2 PUSH2 0x144A JUMP JUMPDEST PUSH2 0x1570 DUP5 PUSH2 0x145C JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x157F JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x1593 PUSH2 0x158B DUP6 PUSH2 0x145C JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x1533 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x15B6 PUSH0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x159B JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x15CE DUP4 DUP4 PUSH2 0x15A7 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x15E7 DUP3 PUSH2 0xE34 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1600 JUMPI PUSH2 0x15FF PUSH2 0x141D JUMP JUMPDEST JUMPDEST PUSH2 0x160A DUP3 SLOAD PUSH2 0x1108 JUMP JUMPDEST PUSH2 0x1615 DUP3 DUP3 DUP6 PUSH2 0x1555 JUMP JUMPDEST PUSH0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x1646 JUMPI PUSH0 DUP5 ISZERO PUSH2 0x1634 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x163E DUP6 DUP3 PUSH2 0x15C3 JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x16A5 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x1654 DUP7 PUSH2 0x144A JUMP JUMPDEST PUSH0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x167B JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1656 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x1698 JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x1694 PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x15A7 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCA 0x21 PUSH25 0x83C7127F872305EDC8572137814500114F0D66348133AF9042 MOD SWAP12 PUSH17 0x3964736F6C634300081900330000000000 ",
							"sourceMap": "374:294:10:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@__ERC20_init_321": {
									"entryPoint": 2424,
									"id": 321,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@__ERC20_init_unchained_349": {
									"entryPoint": 3546,
									"id": 349,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_approve_753": {
									"entryPoint": 1854,
									"id": 753,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_approve_821": {
									"entryPoint": 2446,
									"id": 821,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_checkInitializing_175": {
									"entryPoint": 3482,
									"id": 175,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_getERC20Storage_305": {
									"entryPoint": 1808,
									"id": 305,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_getInitializableStorage_252": {
									"entryPoint": 2385,
									"id": 252,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_isInitializing_243": {
									"entryPoint": 3606,
									"id": 243,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_mint_702": {
									"entryPoint": 2258,
									"id": 702,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_msgSender_898": {
									"entryPoint": 1847,
									"id": 898,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_spendAllowance_869": {
									"entryPoint": 1872,
									"id": 869,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_transfer_577": {
									"entryPoint": 2018,
									"id": 577,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_update_669": {
									"entryPoint": 2923,
									"id": 669,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@allowance_474": {
									"entryPoint": 1664,
									"id": 474,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@approve_498": {
									"entryPoint": 727,
									"id": 498,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@balanceOf_426": {
									"entryPoint": 852,
									"id": 426,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@decimals_390": {
									"entryPoint": 830,
									"id": 390,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@initialize_2005": {
									"entryPoint": 935,
									"id": 2005,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@mint_2018": {
									"entryPoint": 838,
									"id": 2018,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@name_365": {
									"entryPoint": 569,
									"id": 365,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@symbol_381": {
									"entryPoint": 1472,
									"id": 381,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@totalSupply_406": {
									"entryPoint": 761,
									"id": 406,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_530": {
									"entryPoint": 784,
									"id": 530,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@transfer_450": {
									"entryPoint": 1630,
									"id": 450,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_address": {
									"entryPoint": 3854,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256": {
									"entryPoint": 3905,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 4210,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 4253,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 4078,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 3925,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_t_address_to_t_address_fromStack": {
									"entryPoint": 5005,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bool_to_t_bool_fromStack": {
									"entryPoint": 3998,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_rational_1_by_1_to_t_uint64_fromStack": {
									"entryPoint": 4965,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 3692,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_uint256_to_t_uint256_fromStack": {
									"entryPoint": 4038,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_uint8_to_t_uint8_fromStack": {
									"entryPoint": 4170,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": 5073,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": 5020,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": 4013,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed": {
									"entryPoint": 4980,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 3748,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": 4053,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
									"entryPoint": 4185,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_dataslot_t_string_storage": {
									"entryPoint": 5194,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_string_memory_ptr": {
									"entryPoint": 3636,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
									"entryPoint": 3646,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 5098,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_exp_helper": {
									"entryPoint": 4465,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 2
								},
								"checked_exp_t_uint256_t_uint256": {
									"entryPoint": 4756,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_exp_unsigned": {
									"entryPoint": 4547,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 4830,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"clean_up_bytearray_end_slots_t_string_storage": {
									"entryPoint": 5461,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"cleanup_t_address": {
									"entryPoint": 3815,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bool": {
									"entryPoint": 3987,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_rational_1_by_1": {
									"entryPoint": 4895,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 3784,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 3874,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint64": {
									"entryPoint": 4904,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint8": {
									"entryPoint": 4158,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"clear_storage_range_t_bytes1": {
									"entryPoint": 5427,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"convert_t_rational_1_by_1_to_t_uint64": {
									"entryPoint": 4932,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_uint256_to_t_uint256": {
									"entryPoint": 5320,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
									"entryPoint": 5598,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"copy_memory_to_memory_with_cleanup": {
									"entryPoint": 3662,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"divide_by_32_ceil": {
									"entryPoint": 5212,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"extract_byte_array_length": {
									"entryPoint": 4360,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"extract_used_part_and_set_length_of_short_byte_array": {
									"entryPoint": 5571,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"identity": {
									"entryPoint": 4923,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"mask_bytes_dynamic": {
									"entryPoint": 5543,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 4408,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x22": {
									"entryPoint": 4315,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 5149,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"prepare_store_t_uint256": {
									"entryPoint": 5353,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 3780,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"round_up_to_mul_of_32": {
									"entryPoint": 3676,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"shift_left_dynamic": {
									"entryPoint": 5227,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"shift_right_1_unsigned": {
									"entryPoint": 4453,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"shift_right_unsigned_dynamic": {
									"entryPoint": 5531,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"storage_set_to_zero_t_uint256": {
									"entryPoint": 5403,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"update_byte_slice_dynamic32": {
									"entryPoint": 5239,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"update_storage_value_t_uint256_to_t_uint256": {
									"entryPoint": 5362,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 3832,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 3883,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"zero_value_for_split_t_uint256": {
									"entryPoint": 5399,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:15281:11",
										"nodeType": "YulBlock",
										"src": "0:15281:11",
										"statements": [
											{
												"body": {
													"nativeSrc": "66:40:11",
													"nodeType": "YulBlock",
													"src": "66:40:11",
													"statements": [
														{
															"nativeSrc": "77:22:11",
															"nodeType": "YulAssignment",
															"src": "77:22:11",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "93:5:11",
																		"nodeType": "YulIdentifier",
																		"src": "93:5:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "87:5:11",
																	"nodeType": "YulIdentifier",
																	"src": "87:5:11"
																},
																"nativeSrc": "87:12:11",
																"nodeType": "YulFunctionCall",
																"src": "87:12:11"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "77:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "77:6:11"
																}
															]
														}
													]
												},
												"name": "array_length_t_string_memory_ptr",
												"nativeSrc": "7:99:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "49:5:11",
														"nodeType": "YulTypedName",
														"src": "49:5:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "59:6:11",
														"nodeType": "YulTypedName",
														"src": "59:6:11",
														"type": ""
													}
												],
												"src": "7:99:11"
											},
											{
												"body": {
													"nativeSrc": "208:73:11",
													"nodeType": "YulBlock",
													"src": "208:73:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "225:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "225:3:11"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "230:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "230:6:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "218:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "218:6:11"
																},
																"nativeSrc": "218:19:11",
																"nodeType": "YulFunctionCall",
																"src": "218:19:11"
															},
															"nativeSrc": "218:19:11",
															"nodeType": "YulExpressionStatement",
															"src": "218:19:11"
														},
														{
															"nativeSrc": "246:29:11",
															"nodeType": "YulAssignment",
															"src": "246:29:11",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "265:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "265:3:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "270:4:11",
																		"nodeType": "YulLiteral",
																		"src": "270:4:11",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "261:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "261:3:11"
																},
																"nativeSrc": "261:14:11",
																"nodeType": "YulFunctionCall",
																"src": "261:14:11"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nativeSrc": "246:11:11",
																	"nodeType": "YulIdentifier",
																	"src": "246:11:11"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nativeSrc": "112:169:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "180:3:11",
														"nodeType": "YulTypedName",
														"src": "180:3:11",
														"type": ""
													},
													{
														"name": "length",
														"nativeSrc": "185:6:11",
														"nodeType": "YulTypedName",
														"src": "185:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nativeSrc": "196:11:11",
														"nodeType": "YulTypedName",
														"src": "196:11:11",
														"type": ""
													}
												],
												"src": "112:169:11"
											},
											{
												"body": {
													"nativeSrc": "349:77:11",
													"nodeType": "YulBlock",
													"src": "349:77:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "dst",
																		"nativeSrc": "366:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "366:3:11"
																	},
																	{
																		"name": "src",
																		"nativeSrc": "371:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "371:3:11"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "376:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "376:6:11"
																	}
																],
																"functionName": {
																	"name": "mcopy",
																	"nativeSrc": "360:5:11",
																	"nodeType": "YulIdentifier",
																	"src": "360:5:11"
																},
																"nativeSrc": "360:23:11",
																"nodeType": "YulFunctionCall",
																"src": "360:23:11"
															},
															"nativeSrc": "360:23:11",
															"nodeType": "YulExpressionStatement",
															"src": "360:23:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dst",
																				"nativeSrc": "403:3:11",
																				"nodeType": "YulIdentifier",
																				"src": "403:3:11"
																			},
																			{
																				"name": "length",
																				"nativeSrc": "408:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "408:6:11"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "399:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "399:3:11"
																		},
																		"nativeSrc": "399:16:11",
																		"nodeType": "YulFunctionCall",
																		"src": "399:16:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "417:1:11",
																		"nodeType": "YulLiteral",
																		"src": "417:1:11",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "392:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "392:6:11"
																},
																"nativeSrc": "392:27:11",
																"nodeType": "YulFunctionCall",
																"src": "392:27:11"
															},
															"nativeSrc": "392:27:11",
															"nodeType": "YulExpressionStatement",
															"src": "392:27:11"
														}
													]
												},
												"name": "copy_memory_to_memory_with_cleanup",
												"nativeSrc": "287:139:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nativeSrc": "331:3:11",
														"nodeType": "YulTypedName",
														"src": "331:3:11",
														"type": ""
													},
													{
														"name": "dst",
														"nativeSrc": "336:3:11",
														"nodeType": "YulTypedName",
														"src": "336:3:11",
														"type": ""
													},
													{
														"name": "length",
														"nativeSrc": "341:6:11",
														"nodeType": "YulTypedName",
														"src": "341:6:11",
														"type": ""
													}
												],
												"src": "287:139:11"
											},
											{
												"body": {
													"nativeSrc": "480:54:11",
													"nodeType": "YulBlock",
													"src": "480:54:11",
													"statements": [
														{
															"nativeSrc": "490:38:11",
															"nodeType": "YulAssignment",
															"src": "490:38:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "508:5:11",
																				"nodeType": "YulIdentifier",
																				"src": "508:5:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "515:2:11",
																				"nodeType": "YulLiteral",
																				"src": "515:2:11",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "504:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "504:3:11"
																		},
																		"nativeSrc": "504:14:11",
																		"nodeType": "YulFunctionCall",
																		"src": "504:14:11"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "524:2:11",
																				"nodeType": "YulLiteral",
																				"src": "524:2:11",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nativeSrc": "520:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "520:3:11"
																		},
																		"nativeSrc": "520:7:11",
																		"nodeType": "YulFunctionCall",
																		"src": "520:7:11"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "500:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "500:3:11"
																},
																"nativeSrc": "500:28:11",
																"nodeType": "YulFunctionCall",
																"src": "500:28:11"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nativeSrc": "490:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "490:6:11"
																}
															]
														}
													]
												},
												"name": "round_up_to_mul_of_32",
												"nativeSrc": "432:102:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "463:5:11",
														"nodeType": "YulTypedName",
														"src": "463:5:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nativeSrc": "473:6:11",
														"nodeType": "YulTypedName",
														"src": "473:6:11",
														"type": ""
													}
												],
												"src": "432:102:11"
											},
											{
												"body": {
													"nativeSrc": "632:285:11",
													"nodeType": "YulBlock",
													"src": "632:285:11",
													"statements": [
														{
															"nativeSrc": "642:53:11",
															"nodeType": "YulVariableDeclaration",
															"src": "642:53:11",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "689:5:11",
																		"nodeType": "YulIdentifier",
																		"src": "689:5:11"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nativeSrc": "656:32:11",
																	"nodeType": "YulIdentifier",
																	"src": "656:32:11"
																},
																"nativeSrc": "656:39:11",
																"nodeType": "YulFunctionCall",
																"src": "656:39:11"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "646:6:11",
																	"nodeType": "YulTypedName",
																	"src": "646:6:11",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "704:78:11",
															"nodeType": "YulAssignment",
															"src": "704:78:11",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "770:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "770:3:11"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "775:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "775:6:11"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nativeSrc": "711:58:11",
																	"nodeType": "YulIdentifier",
																	"src": "711:58:11"
																},
																"nativeSrc": "711:71:11",
																"nodeType": "YulFunctionCall",
																"src": "711:71:11"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "704:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "704:3:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "830:5:11",
																				"nodeType": "YulIdentifier",
																				"src": "830:5:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "837:4:11",
																				"nodeType": "YulLiteral",
																				"src": "837:4:11",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "826:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "826:3:11"
																		},
																		"nativeSrc": "826:16:11",
																		"nodeType": "YulFunctionCall",
																		"src": "826:16:11"
																	},
																	{
																		"name": "pos",
																		"nativeSrc": "844:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "844:3:11"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "849:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "849:6:11"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nativeSrc": "791:34:11",
																	"nodeType": "YulIdentifier",
																	"src": "791:34:11"
																},
																"nativeSrc": "791:65:11",
																"nodeType": "YulFunctionCall",
																"src": "791:65:11"
															},
															"nativeSrc": "791:65:11",
															"nodeType": "YulExpressionStatement",
															"src": "791:65:11"
														},
														{
															"nativeSrc": "865:46:11",
															"nodeType": "YulAssignment",
															"src": "865:46:11",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "876:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "876:3:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nativeSrc": "903:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "903:6:11"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nativeSrc": "881:21:11",
																			"nodeType": "YulIdentifier",
																			"src": "881:21:11"
																		},
																		"nativeSrc": "881:29:11",
																		"nodeType": "YulFunctionCall",
																		"src": "881:29:11"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "872:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "872:3:11"
																},
																"nativeSrc": "872:39:11",
																"nodeType": "YulFunctionCall",
																"src": "872:39:11"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "865:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "865:3:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "540:377:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "613:5:11",
														"nodeType": "YulTypedName",
														"src": "613:5:11",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "620:3:11",
														"nodeType": "YulTypedName",
														"src": "620:3:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "628:3:11",
														"nodeType": "YulTypedName",
														"src": "628:3:11",
														"type": ""
													}
												],
												"src": "540:377:11"
											},
											{
												"body": {
													"nativeSrc": "1041:195:11",
													"nodeType": "YulBlock",
													"src": "1041:195:11",
													"statements": [
														{
															"nativeSrc": "1051:26:11",
															"nodeType": "YulAssignment",
															"src": "1051:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1063:9:11",
																		"nodeType": "YulIdentifier",
																		"src": "1063:9:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1074:2:11",
																		"nodeType": "YulLiteral",
																		"src": "1074:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1059:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "1059:3:11"
																},
																"nativeSrc": "1059:18:11",
																"nodeType": "YulFunctionCall",
																"src": "1059:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1051:4:11",
																	"nodeType": "YulIdentifier",
																	"src": "1051:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1098:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "1098:9:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1109:1:11",
																				"nodeType": "YulLiteral",
																				"src": "1109:1:11",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1094:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "1094:3:11"
																		},
																		"nativeSrc": "1094:17:11",
																		"nodeType": "YulFunctionCall",
																		"src": "1094:17:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nativeSrc": "1117:4:11",
																				"nodeType": "YulIdentifier",
																				"src": "1117:4:11"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "1123:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "1123:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "1113:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "1113:3:11"
																		},
																		"nativeSrc": "1113:20:11",
																		"nodeType": "YulFunctionCall",
																		"src": "1113:20:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1087:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "1087:6:11"
																},
																"nativeSrc": "1087:47:11",
																"nodeType": "YulFunctionCall",
																"src": "1087:47:11"
															},
															"nativeSrc": "1087:47:11",
															"nodeType": "YulExpressionStatement",
															"src": "1087:47:11"
														},
														{
															"nativeSrc": "1143:86:11",
															"nodeType": "YulAssignment",
															"src": "1143:86:11",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "1215:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "1215:6:11"
																	},
																	{
																		"name": "tail",
																		"nativeSrc": "1224:4:11",
																		"nodeType": "YulIdentifier",
																		"src": "1224:4:11"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
																	"nativeSrc": "1151:63:11",
																	"nodeType": "YulIdentifier",
																	"src": "1151:63:11"
																},
																"nativeSrc": "1151:78:11",
																"nodeType": "YulFunctionCall",
																"src": "1151:78:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1143:4:11",
																	"nodeType": "YulIdentifier",
																	"src": "1143:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "923:313:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1013:9:11",
														"nodeType": "YulTypedName",
														"src": "1013:9:11",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "1025:6:11",
														"nodeType": "YulTypedName",
														"src": "1025:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1036:4:11",
														"nodeType": "YulTypedName",
														"src": "1036:4:11",
														"type": ""
													}
												],
												"src": "923:313:11"
											},
											{
												"body": {
													"nativeSrc": "1282:35:11",
													"nodeType": "YulBlock",
													"src": "1282:35:11",
													"statements": [
														{
															"nativeSrc": "1292:19:11",
															"nodeType": "YulAssignment",
															"src": "1292:19:11",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1308:2:11",
																		"nodeType": "YulLiteral",
																		"src": "1308:2:11",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "1302:5:11",
																	"nodeType": "YulIdentifier",
																	"src": "1302:5:11"
																},
																"nativeSrc": "1302:9:11",
																"nodeType": "YulFunctionCall",
																"src": "1302:9:11"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nativeSrc": "1292:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "1292:6:11"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nativeSrc": "1242:75:11",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nativeSrc": "1275:6:11",
														"nodeType": "YulTypedName",
														"src": "1275:6:11",
														"type": ""
													}
												],
												"src": "1242:75:11"
											},
											{
												"body": {
													"nativeSrc": "1412:28:11",
													"nodeType": "YulBlock",
													"src": "1412:28:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1429:1:11",
																		"nodeType": "YulLiteral",
																		"src": "1429:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1432:1:11",
																		"nodeType": "YulLiteral",
																		"src": "1432:1:11",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "1422:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "1422:6:11"
																},
																"nativeSrc": "1422:12:11",
																"nodeType": "YulFunctionCall",
																"src": "1422:12:11"
															},
															"nativeSrc": "1422:12:11",
															"nodeType": "YulExpressionStatement",
															"src": "1422:12:11"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nativeSrc": "1323:117:11",
												"nodeType": "YulFunctionDefinition",
												"src": "1323:117:11"
											},
											{
												"body": {
													"nativeSrc": "1535:28:11",
													"nodeType": "YulBlock",
													"src": "1535:28:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1552:1:11",
																		"nodeType": "YulLiteral",
																		"src": "1552:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1555:1:11",
																		"nodeType": "YulLiteral",
																		"src": "1555:1:11",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "1545:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "1545:6:11"
																},
																"nativeSrc": "1545:12:11",
																"nodeType": "YulFunctionCall",
																"src": "1545:12:11"
															},
															"nativeSrc": "1545:12:11",
															"nodeType": "YulExpressionStatement",
															"src": "1545:12:11"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nativeSrc": "1446:117:11",
												"nodeType": "YulFunctionDefinition",
												"src": "1446:117:11"
											},
											{
												"body": {
													"nativeSrc": "1614:81:11",
													"nodeType": "YulBlock",
													"src": "1614:81:11",
													"statements": [
														{
															"nativeSrc": "1624:65:11",
															"nodeType": "YulAssignment",
															"src": "1624:65:11",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "1639:5:11",
																		"nodeType": "YulIdentifier",
																		"src": "1639:5:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1646:42:11",
																		"nodeType": "YulLiteral",
																		"src": "1646:42:11",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "1635:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "1635:3:11"
																},
																"nativeSrc": "1635:54:11",
																"nodeType": "YulFunctionCall",
																"src": "1635:54:11"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "1624:7:11",
																	"nodeType": "YulIdentifier",
																	"src": "1624:7:11"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nativeSrc": "1569:126:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "1596:5:11",
														"nodeType": "YulTypedName",
														"src": "1596:5:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "1606:7:11",
														"nodeType": "YulTypedName",
														"src": "1606:7:11",
														"type": ""
													}
												],
												"src": "1569:126:11"
											},
											{
												"body": {
													"nativeSrc": "1746:51:11",
													"nodeType": "YulBlock",
													"src": "1746:51:11",
													"statements": [
														{
															"nativeSrc": "1756:35:11",
															"nodeType": "YulAssignment",
															"src": "1756:35:11",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "1785:5:11",
																		"nodeType": "YulIdentifier",
																		"src": "1785:5:11"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nativeSrc": "1767:17:11",
																	"nodeType": "YulIdentifier",
																	"src": "1767:17:11"
																},
																"nativeSrc": "1767:24:11",
																"nodeType": "YulFunctionCall",
																"src": "1767:24:11"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "1756:7:11",
																	"nodeType": "YulIdentifier",
																	"src": "1756:7:11"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nativeSrc": "1701:96:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "1728:5:11",
														"nodeType": "YulTypedName",
														"src": "1728:5:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "1738:7:11",
														"nodeType": "YulTypedName",
														"src": "1738:7:11",
														"type": ""
													}
												],
												"src": "1701:96:11"
											},
											{
												"body": {
													"nativeSrc": "1846:79:11",
													"nodeType": "YulBlock",
													"src": "1846:79:11",
													"statements": [
														{
															"body": {
																"nativeSrc": "1903:16:11",
																"nodeType": "YulBlock",
																"src": "1903:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1912:1:11",
																					"nodeType": "YulLiteral",
																					"src": "1912:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1915:1:11",
																					"nodeType": "YulLiteral",
																					"src": "1915:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1905:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "1905:6:11"
																			},
																			"nativeSrc": "1905:12:11",
																			"nodeType": "YulFunctionCall",
																			"src": "1905:12:11"
																		},
																		"nativeSrc": "1905:12:11",
																		"nodeType": "YulExpressionStatement",
																		"src": "1905:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "1869:5:11",
																				"nodeType": "YulIdentifier",
																				"src": "1869:5:11"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "1894:5:11",
																						"nodeType": "YulIdentifier",
																						"src": "1894:5:11"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nativeSrc": "1876:17:11",
																					"nodeType": "YulIdentifier",
																					"src": "1876:17:11"
																				},
																				"nativeSrc": "1876:24:11",
																				"nodeType": "YulFunctionCall",
																				"src": "1876:24:11"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "1866:2:11",
																			"nodeType": "YulIdentifier",
																			"src": "1866:2:11"
																		},
																		"nativeSrc": "1866:35:11",
																		"nodeType": "YulFunctionCall",
																		"src": "1866:35:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "1859:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "1859:6:11"
																},
																"nativeSrc": "1859:43:11",
																"nodeType": "YulFunctionCall",
																"src": "1859:43:11"
															},
															"nativeSrc": "1856:63:11",
															"nodeType": "YulIf",
															"src": "1856:63:11"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nativeSrc": "1803:122:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "1839:5:11",
														"nodeType": "YulTypedName",
														"src": "1839:5:11",
														"type": ""
													}
												],
												"src": "1803:122:11"
											},
											{
												"body": {
													"nativeSrc": "1983:87:11",
													"nodeType": "YulBlock",
													"src": "1983:87:11",
													"statements": [
														{
															"nativeSrc": "1993:29:11",
															"nodeType": "YulAssignment",
															"src": "1993:29:11",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "2015:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "2015:6:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "2002:12:11",
																	"nodeType": "YulIdentifier",
																	"src": "2002:12:11"
																},
																"nativeSrc": "2002:20:11",
																"nodeType": "YulFunctionCall",
																"src": "2002:20:11"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "1993:5:11",
																	"nodeType": "YulIdentifier",
																	"src": "1993:5:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "2058:5:11",
																		"nodeType": "YulIdentifier",
																		"src": "2058:5:11"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nativeSrc": "2031:26:11",
																	"nodeType": "YulIdentifier",
																	"src": "2031:26:11"
																},
																"nativeSrc": "2031:33:11",
																"nodeType": "YulFunctionCall",
																"src": "2031:33:11"
															},
															"nativeSrc": "2031:33:11",
															"nodeType": "YulExpressionStatement",
															"src": "2031:33:11"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nativeSrc": "1931:139:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "1961:6:11",
														"nodeType": "YulTypedName",
														"src": "1961:6:11",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "1969:3:11",
														"nodeType": "YulTypedName",
														"src": "1969:3:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "1977:5:11",
														"nodeType": "YulTypedName",
														"src": "1977:5:11",
														"type": ""
													}
												],
												"src": "1931:139:11"
											},
											{
												"body": {
													"nativeSrc": "2121:32:11",
													"nodeType": "YulBlock",
													"src": "2121:32:11",
													"statements": [
														{
															"nativeSrc": "2131:16:11",
															"nodeType": "YulAssignment",
															"src": "2131:16:11",
															"value": {
																"name": "value",
																"nativeSrc": "2142:5:11",
																"nodeType": "YulIdentifier",
																"src": "2142:5:11"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "2131:7:11",
																	"nodeType": "YulIdentifier",
																	"src": "2131:7:11"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nativeSrc": "2076:77:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "2103:5:11",
														"nodeType": "YulTypedName",
														"src": "2103:5:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "2113:7:11",
														"nodeType": "YulTypedName",
														"src": "2113:7:11",
														"type": ""
													}
												],
												"src": "2076:77:11"
											},
											{
												"body": {
													"nativeSrc": "2202:79:11",
													"nodeType": "YulBlock",
													"src": "2202:79:11",
													"statements": [
														{
															"body": {
																"nativeSrc": "2259:16:11",
																"nodeType": "YulBlock",
																"src": "2259:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2268:1:11",
																					"nodeType": "YulLiteral",
																					"src": "2268:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2271:1:11",
																					"nodeType": "YulLiteral",
																					"src": "2271:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "2261:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "2261:6:11"
																			},
																			"nativeSrc": "2261:12:11",
																			"nodeType": "YulFunctionCall",
																			"src": "2261:12:11"
																		},
																		"nativeSrc": "2261:12:11",
																		"nodeType": "YulExpressionStatement",
																		"src": "2261:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "2225:5:11",
																				"nodeType": "YulIdentifier",
																				"src": "2225:5:11"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "2250:5:11",
																						"nodeType": "YulIdentifier",
																						"src": "2250:5:11"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nativeSrc": "2232:17:11",
																					"nodeType": "YulIdentifier",
																					"src": "2232:17:11"
																				},
																				"nativeSrc": "2232:24:11",
																				"nodeType": "YulFunctionCall",
																				"src": "2232:24:11"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "2222:2:11",
																			"nodeType": "YulIdentifier",
																			"src": "2222:2:11"
																		},
																		"nativeSrc": "2222:35:11",
																		"nodeType": "YulFunctionCall",
																		"src": "2222:35:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "2215:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "2215:6:11"
																},
																"nativeSrc": "2215:43:11",
																"nodeType": "YulFunctionCall",
																"src": "2215:43:11"
															},
															"nativeSrc": "2212:63:11",
															"nodeType": "YulIf",
															"src": "2212:63:11"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nativeSrc": "2159:122:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "2195:5:11",
														"nodeType": "YulTypedName",
														"src": "2195:5:11",
														"type": ""
													}
												],
												"src": "2159:122:11"
											},
											{
												"body": {
													"nativeSrc": "2339:87:11",
													"nodeType": "YulBlock",
													"src": "2339:87:11",
													"statements": [
														{
															"nativeSrc": "2349:29:11",
															"nodeType": "YulAssignment",
															"src": "2349:29:11",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "2371:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "2371:6:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "2358:12:11",
																	"nodeType": "YulIdentifier",
																	"src": "2358:12:11"
																},
																"nativeSrc": "2358:20:11",
																"nodeType": "YulFunctionCall",
																"src": "2358:20:11"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "2349:5:11",
																	"nodeType": "YulIdentifier",
																	"src": "2349:5:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "2414:5:11",
																		"nodeType": "YulIdentifier",
																		"src": "2414:5:11"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nativeSrc": "2387:26:11",
																	"nodeType": "YulIdentifier",
																	"src": "2387:26:11"
																},
																"nativeSrc": "2387:33:11",
																"nodeType": "YulFunctionCall",
																"src": "2387:33:11"
															},
															"nativeSrc": "2387:33:11",
															"nodeType": "YulExpressionStatement",
															"src": "2387:33:11"
														}
													]
												},
												"name": "abi_decode_t_uint256",
												"nativeSrc": "2287:139:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "2317:6:11",
														"nodeType": "YulTypedName",
														"src": "2317:6:11",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "2325:3:11",
														"nodeType": "YulTypedName",
														"src": "2325:3:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "2333:5:11",
														"nodeType": "YulTypedName",
														"src": "2333:5:11",
														"type": ""
													}
												],
												"src": "2287:139:11"
											},
											{
												"body": {
													"nativeSrc": "2515:391:11",
													"nodeType": "YulBlock",
													"src": "2515:391:11",
													"statements": [
														{
															"body": {
																"nativeSrc": "2561:83:11",
																"nodeType": "YulBlock",
																"src": "2561:83:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "2563:77:11",
																				"nodeType": "YulIdentifier",
																				"src": "2563:77:11"
																			},
																			"nativeSrc": "2563:79:11",
																			"nodeType": "YulFunctionCall",
																			"src": "2563:79:11"
																		},
																		"nativeSrc": "2563:79:11",
																		"nodeType": "YulExpressionStatement",
																		"src": "2563:79:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "2536:7:11",
																				"nodeType": "YulIdentifier",
																				"src": "2536:7:11"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "2545:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "2545:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "2532:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "2532:3:11"
																		},
																		"nativeSrc": "2532:23:11",
																		"nodeType": "YulFunctionCall",
																		"src": "2532:23:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2557:2:11",
																		"nodeType": "YulLiteral",
																		"src": "2557:2:11",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "2528:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "2528:3:11"
																},
																"nativeSrc": "2528:32:11",
																"nodeType": "YulFunctionCall",
																"src": "2528:32:11"
															},
															"nativeSrc": "2525:119:11",
															"nodeType": "YulIf",
															"src": "2525:119:11"
														},
														{
															"nativeSrc": "2654:117:11",
															"nodeType": "YulBlock",
															"src": "2654:117:11",
															"statements": [
																{
																	"nativeSrc": "2669:15:11",
																	"nodeType": "YulVariableDeclaration",
																	"src": "2669:15:11",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "2683:1:11",
																		"nodeType": "YulLiteral",
																		"src": "2683:1:11",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "2673:6:11",
																			"nodeType": "YulTypedName",
																			"src": "2673:6:11",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "2698:63:11",
																	"nodeType": "YulAssignment",
																	"src": "2698:63:11",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "2733:9:11",
																						"nodeType": "YulIdentifier",
																						"src": "2733:9:11"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "2744:6:11",
																						"nodeType": "YulIdentifier",
																						"src": "2744:6:11"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "2729:3:11",
																					"nodeType": "YulIdentifier",
																					"src": "2729:3:11"
																				},
																				"nativeSrc": "2729:22:11",
																				"nodeType": "YulFunctionCall",
																				"src": "2729:22:11"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "2753:7:11",
																				"nodeType": "YulIdentifier",
																				"src": "2753:7:11"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "2708:20:11",
																			"nodeType": "YulIdentifier",
																			"src": "2708:20:11"
																		},
																		"nativeSrc": "2708:53:11",
																		"nodeType": "YulFunctionCall",
																		"src": "2708:53:11"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "2698:6:11",
																			"nodeType": "YulIdentifier",
																			"src": "2698:6:11"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "2781:118:11",
															"nodeType": "YulBlock",
															"src": "2781:118:11",
															"statements": [
																{
																	"nativeSrc": "2796:16:11",
																	"nodeType": "YulVariableDeclaration",
																	"src": "2796:16:11",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "2810:2:11",
																		"nodeType": "YulLiteral",
																		"src": "2810:2:11",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "2800:6:11",
																			"nodeType": "YulTypedName",
																			"src": "2800:6:11",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "2826:63:11",
																	"nodeType": "YulAssignment",
																	"src": "2826:63:11",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "2861:9:11",
																						"nodeType": "YulIdentifier",
																						"src": "2861:9:11"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "2872:6:11",
																						"nodeType": "YulIdentifier",
																						"src": "2872:6:11"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "2857:3:11",
																					"nodeType": "YulIdentifier",
																					"src": "2857:3:11"
																				},
																				"nativeSrc": "2857:22:11",
																				"nodeType": "YulFunctionCall",
																				"src": "2857:22:11"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "2881:7:11",
																				"nodeType": "YulIdentifier",
																				"src": "2881:7:11"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nativeSrc": "2836:20:11",
																			"nodeType": "YulIdentifier",
																			"src": "2836:20:11"
																		},
																		"nativeSrc": "2836:53:11",
																		"nodeType": "YulFunctionCall",
																		"src": "2836:53:11"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nativeSrc": "2826:6:11",
																			"nodeType": "YulIdentifier",
																			"src": "2826:6:11"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nativeSrc": "2432:474:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2477:9:11",
														"nodeType": "YulTypedName",
														"src": "2477:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "2488:7:11",
														"nodeType": "YulTypedName",
														"src": "2488:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "2500:6:11",
														"nodeType": "YulTypedName",
														"src": "2500:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "2508:6:11",
														"nodeType": "YulTypedName",
														"src": "2508:6:11",
														"type": ""
													}
												],
												"src": "2432:474:11"
											},
											{
												"body": {
													"nativeSrc": "2954:48:11",
													"nodeType": "YulBlock",
													"src": "2954:48:11",
													"statements": [
														{
															"nativeSrc": "2964:32:11",
															"nodeType": "YulAssignment",
															"src": "2964:32:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "2989:5:11",
																				"nodeType": "YulIdentifier",
																				"src": "2989:5:11"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nativeSrc": "2982:6:11",
																			"nodeType": "YulIdentifier",
																			"src": "2982:6:11"
																		},
																		"nativeSrc": "2982:13:11",
																		"nodeType": "YulFunctionCall",
																		"src": "2982:13:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "2975:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "2975:6:11"
																},
																"nativeSrc": "2975:21:11",
																"nodeType": "YulFunctionCall",
																"src": "2975:21:11"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "2964:7:11",
																	"nodeType": "YulIdentifier",
																	"src": "2964:7:11"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nativeSrc": "2912:90:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "2936:5:11",
														"nodeType": "YulTypedName",
														"src": "2936:5:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "2946:7:11",
														"nodeType": "YulTypedName",
														"src": "2946:7:11",
														"type": ""
													}
												],
												"src": "2912:90:11"
											},
											{
												"body": {
													"nativeSrc": "3067:50:11",
													"nodeType": "YulBlock",
													"src": "3067:50:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "3084:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "3084:3:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "3104:5:11",
																				"nodeType": "YulIdentifier",
																				"src": "3104:5:11"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bool",
																			"nativeSrc": "3089:14:11",
																			"nodeType": "YulIdentifier",
																			"src": "3089:14:11"
																		},
																		"nativeSrc": "3089:21:11",
																		"nodeType": "YulFunctionCall",
																		"src": "3089:21:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3077:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "3077:6:11"
																},
																"nativeSrc": "3077:34:11",
																"nodeType": "YulFunctionCall",
																"src": "3077:34:11"
															},
															"nativeSrc": "3077:34:11",
															"nodeType": "YulExpressionStatement",
															"src": "3077:34:11"
														}
													]
												},
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nativeSrc": "3008:109:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "3055:5:11",
														"nodeType": "YulTypedName",
														"src": "3055:5:11",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "3062:3:11",
														"nodeType": "YulTypedName",
														"src": "3062:3:11",
														"type": ""
													}
												],
												"src": "3008:109:11"
											},
											{
												"body": {
													"nativeSrc": "3215:118:11",
													"nodeType": "YulBlock",
													"src": "3215:118:11",
													"statements": [
														{
															"nativeSrc": "3225:26:11",
															"nodeType": "YulAssignment",
															"src": "3225:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3237:9:11",
																		"nodeType": "YulIdentifier",
																		"src": "3237:9:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3248:2:11",
																		"nodeType": "YulLiteral",
																		"src": "3248:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3233:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "3233:3:11"
																},
																"nativeSrc": "3233:18:11",
																"nodeType": "YulFunctionCall",
																"src": "3233:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "3225:4:11",
																	"nodeType": "YulIdentifier",
																	"src": "3225:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "3299:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "3299:6:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3312:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "3312:9:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3323:1:11",
																				"nodeType": "YulLiteral",
																				"src": "3323:1:11",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3308:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "3308:3:11"
																		},
																		"nativeSrc": "3308:17:11",
																		"nodeType": "YulFunctionCall",
																		"src": "3308:17:11"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bool_to_t_bool_fromStack",
																	"nativeSrc": "3261:37:11",
																	"nodeType": "YulIdentifier",
																	"src": "3261:37:11"
																},
																"nativeSrc": "3261:65:11",
																"nodeType": "YulFunctionCall",
																"src": "3261:65:11"
															},
															"nativeSrc": "3261:65:11",
															"nodeType": "YulExpressionStatement",
															"src": "3261:65:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nativeSrc": "3123:210:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3187:9:11",
														"nodeType": "YulTypedName",
														"src": "3187:9:11",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "3199:6:11",
														"nodeType": "YulTypedName",
														"src": "3199:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "3210:4:11",
														"nodeType": "YulTypedName",
														"src": "3210:4:11",
														"type": ""
													}
												],
												"src": "3123:210:11"
											},
											{
												"body": {
													"nativeSrc": "3404:53:11",
													"nodeType": "YulBlock",
													"src": "3404:53:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "3421:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "3421:3:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "3444:5:11",
																				"nodeType": "YulIdentifier",
																				"src": "3444:5:11"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nativeSrc": "3426:17:11",
																			"nodeType": "YulIdentifier",
																			"src": "3426:17:11"
																		},
																		"nativeSrc": "3426:24:11",
																		"nodeType": "YulFunctionCall",
																		"src": "3426:24:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3414:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "3414:6:11"
																},
																"nativeSrc": "3414:37:11",
																"nodeType": "YulFunctionCall",
																"src": "3414:37:11"
															},
															"nativeSrc": "3414:37:11",
															"nodeType": "YulExpressionStatement",
															"src": "3414:37:11"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nativeSrc": "3339:118:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "3392:5:11",
														"nodeType": "YulTypedName",
														"src": "3392:5:11",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "3399:3:11",
														"nodeType": "YulTypedName",
														"src": "3399:3:11",
														"type": ""
													}
												],
												"src": "3339:118:11"
											},
											{
												"body": {
													"nativeSrc": "3561:124:11",
													"nodeType": "YulBlock",
													"src": "3561:124:11",
													"statements": [
														{
															"nativeSrc": "3571:26:11",
															"nodeType": "YulAssignment",
															"src": "3571:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3583:9:11",
																		"nodeType": "YulIdentifier",
																		"src": "3583:9:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3594:2:11",
																		"nodeType": "YulLiteral",
																		"src": "3594:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3579:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "3579:3:11"
																},
																"nativeSrc": "3579:18:11",
																"nodeType": "YulFunctionCall",
																"src": "3579:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "3571:4:11",
																	"nodeType": "YulIdentifier",
																	"src": "3571:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "3651:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "3651:6:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3664:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "3664:9:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3675:1:11",
																				"nodeType": "YulLiteral",
																				"src": "3675:1:11",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3660:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "3660:3:11"
																		},
																		"nativeSrc": "3660:17:11",
																		"nodeType": "YulFunctionCall",
																		"src": "3660:17:11"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "3607:43:11",
																	"nodeType": "YulIdentifier",
																	"src": "3607:43:11"
																},
																"nativeSrc": "3607:71:11",
																"nodeType": "YulFunctionCall",
																"src": "3607:71:11"
															},
															"nativeSrc": "3607:71:11",
															"nodeType": "YulExpressionStatement",
															"src": "3607:71:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nativeSrc": "3463:222:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3533:9:11",
														"nodeType": "YulTypedName",
														"src": "3533:9:11",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "3545:6:11",
														"nodeType": "YulTypedName",
														"src": "3545:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "3556:4:11",
														"nodeType": "YulTypedName",
														"src": "3556:4:11",
														"type": ""
													}
												],
												"src": "3463:222:11"
											},
											{
												"body": {
													"nativeSrc": "3791:519:11",
													"nodeType": "YulBlock",
													"src": "3791:519:11",
													"statements": [
														{
															"body": {
																"nativeSrc": "3837:83:11",
																"nodeType": "YulBlock",
																"src": "3837:83:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "3839:77:11",
																				"nodeType": "YulIdentifier",
																				"src": "3839:77:11"
																			},
																			"nativeSrc": "3839:79:11",
																			"nodeType": "YulFunctionCall",
																			"src": "3839:79:11"
																		},
																		"nativeSrc": "3839:79:11",
																		"nodeType": "YulExpressionStatement",
																		"src": "3839:79:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "3812:7:11",
																				"nodeType": "YulIdentifier",
																				"src": "3812:7:11"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "3821:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "3821:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "3808:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "3808:3:11"
																		},
																		"nativeSrc": "3808:23:11",
																		"nodeType": "YulFunctionCall",
																		"src": "3808:23:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3833:2:11",
																		"nodeType": "YulLiteral",
																		"src": "3833:2:11",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "3804:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "3804:3:11"
																},
																"nativeSrc": "3804:32:11",
																"nodeType": "YulFunctionCall",
																"src": "3804:32:11"
															},
															"nativeSrc": "3801:119:11",
															"nodeType": "YulIf",
															"src": "3801:119:11"
														},
														{
															"nativeSrc": "3930:117:11",
															"nodeType": "YulBlock",
															"src": "3930:117:11",
															"statements": [
																{
																	"nativeSrc": "3945:15:11",
																	"nodeType": "YulVariableDeclaration",
																	"src": "3945:15:11",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "3959:1:11",
																		"nodeType": "YulLiteral",
																		"src": "3959:1:11",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "3949:6:11",
																			"nodeType": "YulTypedName",
																			"src": "3949:6:11",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "3974:63:11",
																	"nodeType": "YulAssignment",
																	"src": "3974:63:11",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "4009:9:11",
																						"nodeType": "YulIdentifier",
																						"src": "4009:9:11"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "4020:6:11",
																						"nodeType": "YulIdentifier",
																						"src": "4020:6:11"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "4005:3:11",
																					"nodeType": "YulIdentifier",
																					"src": "4005:3:11"
																				},
																				"nativeSrc": "4005:22:11",
																				"nodeType": "YulFunctionCall",
																				"src": "4005:22:11"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "4029:7:11",
																				"nodeType": "YulIdentifier",
																				"src": "4029:7:11"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "3984:20:11",
																			"nodeType": "YulIdentifier",
																			"src": "3984:20:11"
																		},
																		"nativeSrc": "3984:53:11",
																		"nodeType": "YulFunctionCall",
																		"src": "3984:53:11"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "3974:6:11",
																			"nodeType": "YulIdentifier",
																			"src": "3974:6:11"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "4057:118:11",
															"nodeType": "YulBlock",
															"src": "4057:118:11",
															"statements": [
																{
																	"nativeSrc": "4072:16:11",
																	"nodeType": "YulVariableDeclaration",
																	"src": "4072:16:11",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "4086:2:11",
																		"nodeType": "YulLiteral",
																		"src": "4086:2:11",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "4076:6:11",
																			"nodeType": "YulTypedName",
																			"src": "4076:6:11",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "4102:63:11",
																	"nodeType": "YulAssignment",
																	"src": "4102:63:11",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "4137:9:11",
																						"nodeType": "YulIdentifier",
																						"src": "4137:9:11"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "4148:6:11",
																						"nodeType": "YulIdentifier",
																						"src": "4148:6:11"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "4133:3:11",
																					"nodeType": "YulIdentifier",
																					"src": "4133:3:11"
																				},
																				"nativeSrc": "4133:22:11",
																				"nodeType": "YulFunctionCall",
																				"src": "4133:22:11"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "4157:7:11",
																				"nodeType": "YulIdentifier",
																				"src": "4157:7:11"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "4112:20:11",
																			"nodeType": "YulIdentifier",
																			"src": "4112:20:11"
																		},
																		"nativeSrc": "4112:53:11",
																		"nodeType": "YulFunctionCall",
																		"src": "4112:53:11"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nativeSrc": "4102:6:11",
																			"nodeType": "YulIdentifier",
																			"src": "4102:6:11"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "4185:118:11",
															"nodeType": "YulBlock",
															"src": "4185:118:11",
															"statements": [
																{
																	"nativeSrc": "4200:16:11",
																	"nodeType": "YulVariableDeclaration",
																	"src": "4200:16:11",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "4214:2:11",
																		"nodeType": "YulLiteral",
																		"src": "4214:2:11",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "4204:6:11",
																			"nodeType": "YulTypedName",
																			"src": "4204:6:11",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "4230:63:11",
																	"nodeType": "YulAssignment",
																	"src": "4230:63:11",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "4265:9:11",
																						"nodeType": "YulIdentifier",
																						"src": "4265:9:11"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "4276:6:11",
																						"nodeType": "YulIdentifier",
																						"src": "4276:6:11"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "4261:3:11",
																					"nodeType": "YulIdentifier",
																					"src": "4261:3:11"
																				},
																				"nativeSrc": "4261:22:11",
																				"nodeType": "YulFunctionCall",
																				"src": "4261:22:11"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "4285:7:11",
																				"nodeType": "YulIdentifier",
																				"src": "4285:7:11"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nativeSrc": "4240:20:11",
																			"nodeType": "YulIdentifier",
																			"src": "4240:20:11"
																		},
																		"nativeSrc": "4240:53:11",
																		"nodeType": "YulFunctionCall",
																		"src": "4240:53:11"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nativeSrc": "4230:6:11",
																			"nodeType": "YulIdentifier",
																			"src": "4230:6:11"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nativeSrc": "3691:619:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3745:9:11",
														"nodeType": "YulTypedName",
														"src": "3745:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "3756:7:11",
														"nodeType": "YulTypedName",
														"src": "3756:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "3768:6:11",
														"nodeType": "YulTypedName",
														"src": "3768:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "3776:6:11",
														"nodeType": "YulTypedName",
														"src": "3776:6:11",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "3784:6:11",
														"nodeType": "YulTypedName",
														"src": "3784:6:11",
														"type": ""
													}
												],
												"src": "3691:619:11"
											},
											{
												"body": {
													"nativeSrc": "4359:43:11",
													"nodeType": "YulBlock",
													"src": "4359:43:11",
													"statements": [
														{
															"nativeSrc": "4369:27:11",
															"nodeType": "YulAssignment",
															"src": "4369:27:11",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "4384:5:11",
																		"nodeType": "YulIdentifier",
																		"src": "4384:5:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4391:4:11",
																		"nodeType": "YulLiteral",
																		"src": "4391:4:11",
																		"type": "",
																		"value": "0xff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "4380:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "4380:3:11"
																},
																"nativeSrc": "4380:16:11",
																"nodeType": "YulFunctionCall",
																"src": "4380:16:11"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "4369:7:11",
																	"nodeType": "YulIdentifier",
																	"src": "4369:7:11"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint8",
												"nativeSrc": "4316:86:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "4341:5:11",
														"nodeType": "YulTypedName",
														"src": "4341:5:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "4351:7:11",
														"nodeType": "YulTypedName",
														"src": "4351:7:11",
														"type": ""
													}
												],
												"src": "4316:86:11"
											},
											{
												"body": {
													"nativeSrc": "4469:51:11",
													"nodeType": "YulBlock",
													"src": "4469:51:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "4486:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "4486:3:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "4507:5:11",
																				"nodeType": "YulIdentifier",
																				"src": "4507:5:11"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint8",
																			"nativeSrc": "4491:15:11",
																			"nodeType": "YulIdentifier",
																			"src": "4491:15:11"
																		},
																		"nativeSrc": "4491:22:11",
																		"nodeType": "YulFunctionCall",
																		"src": "4491:22:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4479:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "4479:6:11"
																},
																"nativeSrc": "4479:35:11",
																"nodeType": "YulFunctionCall",
																"src": "4479:35:11"
															},
															"nativeSrc": "4479:35:11",
															"nodeType": "YulExpressionStatement",
															"src": "4479:35:11"
														}
													]
												},
												"name": "abi_encode_t_uint8_to_t_uint8_fromStack",
												"nativeSrc": "4408:112:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "4457:5:11",
														"nodeType": "YulTypedName",
														"src": "4457:5:11",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "4464:3:11",
														"nodeType": "YulTypedName",
														"src": "4464:3:11",
														"type": ""
													}
												],
												"src": "4408:112:11"
											},
											{
												"body": {
													"nativeSrc": "4620:120:11",
													"nodeType": "YulBlock",
													"src": "4620:120:11",
													"statements": [
														{
															"nativeSrc": "4630:26:11",
															"nodeType": "YulAssignment",
															"src": "4630:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "4642:9:11",
																		"nodeType": "YulIdentifier",
																		"src": "4642:9:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4653:2:11",
																		"nodeType": "YulLiteral",
																		"src": "4653:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "4638:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "4638:3:11"
																},
																"nativeSrc": "4638:18:11",
																"nodeType": "YulFunctionCall",
																"src": "4638:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "4630:4:11",
																	"nodeType": "YulIdentifier",
																	"src": "4630:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "4706:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "4706:6:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4719:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "4719:9:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4730:1:11",
																				"nodeType": "YulLiteral",
																				"src": "4730:1:11",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4715:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "4715:3:11"
																		},
																		"nativeSrc": "4715:17:11",
																		"nodeType": "YulFunctionCall",
																		"src": "4715:17:11"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint8_to_t_uint8_fromStack",
																	"nativeSrc": "4666:39:11",
																	"nodeType": "YulIdentifier",
																	"src": "4666:39:11"
																},
																"nativeSrc": "4666:67:11",
																"nodeType": "YulFunctionCall",
																"src": "4666:67:11"
															},
															"nativeSrc": "4666:67:11",
															"nodeType": "YulExpressionStatement",
															"src": "4666:67:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nativeSrc": "4526:214:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "4592:9:11",
														"nodeType": "YulTypedName",
														"src": "4592:9:11",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "4604:6:11",
														"nodeType": "YulTypedName",
														"src": "4604:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "4615:4:11",
														"nodeType": "YulTypedName",
														"src": "4615:4:11",
														"type": ""
													}
												],
												"src": "4526:214:11"
											},
											{
												"body": {
													"nativeSrc": "4812:263:11",
													"nodeType": "YulBlock",
													"src": "4812:263:11",
													"statements": [
														{
															"body": {
																"nativeSrc": "4858:83:11",
																"nodeType": "YulBlock",
																"src": "4858:83:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "4860:77:11",
																				"nodeType": "YulIdentifier",
																				"src": "4860:77:11"
																			},
																			"nativeSrc": "4860:79:11",
																			"nodeType": "YulFunctionCall",
																			"src": "4860:79:11"
																		},
																		"nativeSrc": "4860:79:11",
																		"nodeType": "YulExpressionStatement",
																		"src": "4860:79:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "4833:7:11",
																				"nodeType": "YulIdentifier",
																				"src": "4833:7:11"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "4842:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "4842:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "4829:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "4829:3:11"
																		},
																		"nativeSrc": "4829:23:11",
																		"nodeType": "YulFunctionCall",
																		"src": "4829:23:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4854:2:11",
																		"nodeType": "YulLiteral",
																		"src": "4854:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "4825:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "4825:3:11"
																},
																"nativeSrc": "4825:32:11",
																"nodeType": "YulFunctionCall",
																"src": "4825:32:11"
															},
															"nativeSrc": "4822:119:11",
															"nodeType": "YulIf",
															"src": "4822:119:11"
														},
														{
															"nativeSrc": "4951:117:11",
															"nodeType": "YulBlock",
															"src": "4951:117:11",
															"statements": [
																{
																	"nativeSrc": "4966:15:11",
																	"nodeType": "YulVariableDeclaration",
																	"src": "4966:15:11",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "4980:1:11",
																		"nodeType": "YulLiteral",
																		"src": "4980:1:11",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "4970:6:11",
																			"nodeType": "YulTypedName",
																			"src": "4970:6:11",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "4995:63:11",
																	"nodeType": "YulAssignment",
																	"src": "4995:63:11",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "5030:9:11",
																						"nodeType": "YulIdentifier",
																						"src": "5030:9:11"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "5041:6:11",
																						"nodeType": "YulIdentifier",
																						"src": "5041:6:11"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "5026:3:11",
																					"nodeType": "YulIdentifier",
																					"src": "5026:3:11"
																				},
																				"nativeSrc": "5026:22:11",
																				"nodeType": "YulFunctionCall",
																				"src": "5026:22:11"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "5050:7:11",
																				"nodeType": "YulIdentifier",
																				"src": "5050:7:11"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "5005:20:11",
																			"nodeType": "YulIdentifier",
																			"src": "5005:20:11"
																		},
																		"nativeSrc": "5005:53:11",
																		"nodeType": "YulFunctionCall",
																		"src": "5005:53:11"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "4995:6:11",
																			"nodeType": "YulIdentifier",
																			"src": "4995:6:11"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nativeSrc": "4746:329:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "4782:9:11",
														"nodeType": "YulTypedName",
														"src": "4782:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "4793:7:11",
														"nodeType": "YulTypedName",
														"src": "4793:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "4805:6:11",
														"nodeType": "YulTypedName",
														"src": "4805:6:11",
														"type": ""
													}
												],
												"src": "4746:329:11"
											},
											{
												"body": {
													"nativeSrc": "5164:391:11",
													"nodeType": "YulBlock",
													"src": "5164:391:11",
													"statements": [
														{
															"body": {
																"nativeSrc": "5210:83:11",
																"nodeType": "YulBlock",
																"src": "5210:83:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "5212:77:11",
																				"nodeType": "YulIdentifier",
																				"src": "5212:77:11"
																			},
																			"nativeSrc": "5212:79:11",
																			"nodeType": "YulFunctionCall",
																			"src": "5212:79:11"
																		},
																		"nativeSrc": "5212:79:11",
																		"nodeType": "YulExpressionStatement",
																		"src": "5212:79:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "5185:7:11",
																				"nodeType": "YulIdentifier",
																				"src": "5185:7:11"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "5194:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "5194:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "5181:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "5181:3:11"
																		},
																		"nativeSrc": "5181:23:11",
																		"nodeType": "YulFunctionCall",
																		"src": "5181:23:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5206:2:11",
																		"nodeType": "YulLiteral",
																		"src": "5206:2:11",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "5177:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "5177:3:11"
																},
																"nativeSrc": "5177:32:11",
																"nodeType": "YulFunctionCall",
																"src": "5177:32:11"
															},
															"nativeSrc": "5174:119:11",
															"nodeType": "YulIf",
															"src": "5174:119:11"
														},
														{
															"nativeSrc": "5303:117:11",
															"nodeType": "YulBlock",
															"src": "5303:117:11",
															"statements": [
																{
																	"nativeSrc": "5318:15:11",
																	"nodeType": "YulVariableDeclaration",
																	"src": "5318:15:11",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "5332:1:11",
																		"nodeType": "YulLiteral",
																		"src": "5332:1:11",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "5322:6:11",
																			"nodeType": "YulTypedName",
																			"src": "5322:6:11",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "5347:63:11",
																	"nodeType": "YulAssignment",
																	"src": "5347:63:11",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "5382:9:11",
																						"nodeType": "YulIdentifier",
																						"src": "5382:9:11"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "5393:6:11",
																						"nodeType": "YulIdentifier",
																						"src": "5393:6:11"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "5378:3:11",
																					"nodeType": "YulIdentifier",
																					"src": "5378:3:11"
																				},
																				"nativeSrc": "5378:22:11",
																				"nodeType": "YulFunctionCall",
																				"src": "5378:22:11"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "5402:7:11",
																				"nodeType": "YulIdentifier",
																				"src": "5402:7:11"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "5357:20:11",
																			"nodeType": "YulIdentifier",
																			"src": "5357:20:11"
																		},
																		"nativeSrc": "5357:53:11",
																		"nodeType": "YulFunctionCall",
																		"src": "5357:53:11"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "5347:6:11",
																			"nodeType": "YulIdentifier",
																			"src": "5347:6:11"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "5430:118:11",
															"nodeType": "YulBlock",
															"src": "5430:118:11",
															"statements": [
																{
																	"nativeSrc": "5445:16:11",
																	"nodeType": "YulVariableDeclaration",
																	"src": "5445:16:11",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "5459:2:11",
																		"nodeType": "YulLiteral",
																		"src": "5459:2:11",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "5449:6:11",
																			"nodeType": "YulTypedName",
																			"src": "5449:6:11",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "5475:63:11",
																	"nodeType": "YulAssignment",
																	"src": "5475:63:11",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "5510:9:11",
																						"nodeType": "YulIdentifier",
																						"src": "5510:9:11"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "5521:6:11",
																						"nodeType": "YulIdentifier",
																						"src": "5521:6:11"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "5506:3:11",
																					"nodeType": "YulIdentifier",
																					"src": "5506:3:11"
																				},
																				"nativeSrc": "5506:22:11",
																				"nodeType": "YulFunctionCall",
																				"src": "5506:22:11"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "5530:7:11",
																				"nodeType": "YulIdentifier",
																				"src": "5530:7:11"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "5485:20:11",
																			"nodeType": "YulIdentifier",
																			"src": "5485:20:11"
																		},
																		"nativeSrc": "5485:53:11",
																		"nodeType": "YulFunctionCall",
																		"src": "5485:53:11"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nativeSrc": "5475:6:11",
																			"nodeType": "YulIdentifier",
																			"src": "5475:6:11"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nativeSrc": "5081:474:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "5126:9:11",
														"nodeType": "YulTypedName",
														"src": "5126:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "5137:7:11",
														"nodeType": "YulTypedName",
														"src": "5137:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "5149:6:11",
														"nodeType": "YulTypedName",
														"src": "5149:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "5157:6:11",
														"nodeType": "YulTypedName",
														"src": "5157:6:11",
														"type": ""
													}
												],
												"src": "5081:474:11"
											},
											{
												"body": {
													"nativeSrc": "5589:152:11",
													"nodeType": "YulBlock",
													"src": "5589:152:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "5606:1:11",
																		"nodeType": "YulLiteral",
																		"src": "5606:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5609:77:11",
																		"nodeType": "YulLiteral",
																		"src": "5609:77:11",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5599:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "5599:6:11"
																},
																"nativeSrc": "5599:88:11",
																"nodeType": "YulFunctionCall",
																"src": "5599:88:11"
															},
															"nativeSrc": "5599:88:11",
															"nodeType": "YulExpressionStatement",
															"src": "5599:88:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "5703:1:11",
																		"nodeType": "YulLiteral",
																		"src": "5703:1:11",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5706:4:11",
																		"nodeType": "YulLiteral",
																		"src": "5706:4:11",
																		"type": "",
																		"value": "0x22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5696:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "5696:6:11"
																},
																"nativeSrc": "5696:15:11",
																"nodeType": "YulFunctionCall",
																"src": "5696:15:11"
															},
															"nativeSrc": "5696:15:11",
															"nodeType": "YulExpressionStatement",
															"src": "5696:15:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "5727:1:11",
																		"nodeType": "YulLiteral",
																		"src": "5727:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5730:4:11",
																		"nodeType": "YulLiteral",
																		"src": "5730:4:11",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "5720:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "5720:6:11"
																},
																"nativeSrc": "5720:15:11",
																"nodeType": "YulFunctionCall",
																"src": "5720:15:11"
															},
															"nativeSrc": "5720:15:11",
															"nodeType": "YulExpressionStatement",
															"src": "5720:15:11"
														}
													]
												},
												"name": "panic_error_0x22",
												"nativeSrc": "5561:180:11",
												"nodeType": "YulFunctionDefinition",
												"src": "5561:180:11"
											},
											{
												"body": {
													"nativeSrc": "5798:269:11",
													"nodeType": "YulBlock",
													"src": "5798:269:11",
													"statements": [
														{
															"nativeSrc": "5808:22:11",
															"nodeType": "YulAssignment",
															"src": "5808:22:11",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "5822:4:11",
																		"nodeType": "YulIdentifier",
																		"src": "5822:4:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5828:1:11",
																		"nodeType": "YulLiteral",
																		"src": "5828:1:11",
																		"type": "",
																		"value": "2"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nativeSrc": "5818:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "5818:3:11"
																},
																"nativeSrc": "5818:12:11",
																"nodeType": "YulFunctionCall",
																"src": "5818:12:11"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "5808:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "5808:6:11"
																}
															]
														},
														{
															"nativeSrc": "5839:38:11",
															"nodeType": "YulVariableDeclaration",
															"src": "5839:38:11",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "5869:4:11",
																		"nodeType": "YulIdentifier",
																		"src": "5869:4:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5875:1:11",
																		"nodeType": "YulLiteral",
																		"src": "5875:1:11",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "5865:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "5865:3:11"
																},
																"nativeSrc": "5865:12:11",
																"nodeType": "YulFunctionCall",
																"src": "5865:12:11"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nativeSrc": "5843:18:11",
																	"nodeType": "YulTypedName",
																	"src": "5843:18:11",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "5916:51:11",
																"nodeType": "YulBlock",
																"src": "5916:51:11",
																"statements": [
																	{
																		"nativeSrc": "5930:27:11",
																		"nodeType": "YulAssignment",
																		"src": "5930:27:11",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nativeSrc": "5944:6:11",
																					"nodeType": "YulIdentifier",
																					"src": "5944:6:11"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "5952:4:11",
																					"nodeType": "YulLiteral",
																					"src": "5952:4:11",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nativeSrc": "5940:3:11",
																				"nodeType": "YulIdentifier",
																				"src": "5940:3:11"
																			},
																			"nativeSrc": "5940:17:11",
																			"nodeType": "YulFunctionCall",
																			"src": "5940:17:11"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nativeSrc": "5930:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "5930:6:11"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "5896:18:11",
																		"nodeType": "YulIdentifier",
																		"src": "5896:18:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "5889:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "5889:6:11"
																},
																"nativeSrc": "5889:26:11",
																"nodeType": "YulFunctionCall",
																"src": "5889:26:11"
															},
															"nativeSrc": "5886:81:11",
															"nodeType": "YulIf",
															"src": "5886:81:11"
														},
														{
															"body": {
																"nativeSrc": "6019:42:11",
																"nodeType": "YulBlock",
																"src": "6019:42:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x22",
																				"nativeSrc": "6033:16:11",
																				"nodeType": "YulIdentifier",
																				"src": "6033:16:11"
																			},
																			"nativeSrc": "6033:18:11",
																			"nodeType": "YulFunctionCall",
																			"src": "6033:18:11"
																		},
																		"nativeSrc": "6033:18:11",
																		"nodeType": "YulExpressionStatement",
																		"src": "6033:18:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "5983:18:11",
																		"nodeType": "YulIdentifier",
																		"src": "5983:18:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nativeSrc": "6006:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "6006:6:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6014:2:11",
																				"nodeType": "YulLiteral",
																				"src": "6014:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nativeSrc": "6003:2:11",
																			"nodeType": "YulIdentifier",
																			"src": "6003:2:11"
																		},
																		"nativeSrc": "6003:14:11",
																		"nodeType": "YulFunctionCall",
																		"src": "6003:14:11"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nativeSrc": "5980:2:11",
																	"nodeType": "YulIdentifier",
																	"src": "5980:2:11"
																},
																"nativeSrc": "5980:38:11",
																"nodeType": "YulFunctionCall",
																"src": "5980:38:11"
															},
															"nativeSrc": "5977:84:11",
															"nodeType": "YulIf",
															"src": "5977:84:11"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nativeSrc": "5747:320:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "5782:4:11",
														"nodeType": "YulTypedName",
														"src": "5782:4:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "5791:6:11",
														"nodeType": "YulTypedName",
														"src": "5791:6:11",
														"type": ""
													}
												],
												"src": "5747:320:11"
											},
											{
												"body": {
													"nativeSrc": "6101:152:11",
													"nodeType": "YulBlock",
													"src": "6101:152:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "6118:1:11",
																		"nodeType": "YulLiteral",
																		"src": "6118:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6121:77:11",
																		"nodeType": "YulLiteral",
																		"src": "6121:77:11",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6111:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "6111:6:11"
																},
																"nativeSrc": "6111:88:11",
																"nodeType": "YulFunctionCall",
																"src": "6111:88:11"
															},
															"nativeSrc": "6111:88:11",
															"nodeType": "YulExpressionStatement",
															"src": "6111:88:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "6215:1:11",
																		"nodeType": "YulLiteral",
																		"src": "6215:1:11",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6218:4:11",
																		"nodeType": "YulLiteral",
																		"src": "6218:4:11",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6208:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "6208:6:11"
																},
																"nativeSrc": "6208:15:11",
																"nodeType": "YulFunctionCall",
																"src": "6208:15:11"
															},
															"nativeSrc": "6208:15:11",
															"nodeType": "YulExpressionStatement",
															"src": "6208:15:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "6239:1:11",
																		"nodeType": "YulLiteral",
																		"src": "6239:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6242:4:11",
																		"nodeType": "YulLiteral",
																		"src": "6242:4:11",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "6232:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "6232:6:11"
																},
																"nativeSrc": "6232:15:11",
																"nodeType": "YulFunctionCall",
																"src": "6232:15:11"
															},
															"nativeSrc": "6232:15:11",
															"nodeType": "YulExpressionStatement",
															"src": "6232:15:11"
														}
													]
												},
												"name": "panic_error_0x11",
												"nativeSrc": "6073:180:11",
												"nodeType": "YulFunctionDefinition",
												"src": "6073:180:11"
											},
											{
												"body": {
													"nativeSrc": "6310:51:11",
													"nodeType": "YulBlock",
													"src": "6310:51:11",
													"statements": [
														{
															"nativeSrc": "6320:34:11",
															"nodeType": "YulAssignment",
															"src": "6320:34:11",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "6345:1:11",
																		"nodeType": "YulLiteral",
																		"src": "6345:1:11",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "value",
																		"nativeSrc": "6348:5:11",
																		"nodeType": "YulIdentifier",
																		"src": "6348:5:11"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nativeSrc": "6341:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "6341:3:11"
																},
																"nativeSrc": "6341:13:11",
																"nodeType": "YulFunctionCall",
																"src": "6341:13:11"
															},
															"variableNames": [
																{
																	"name": "newValue",
																	"nativeSrc": "6320:8:11",
																	"nodeType": "YulIdentifier",
																	"src": "6320:8:11"
																}
															]
														}
													]
												},
												"name": "shift_right_1_unsigned",
												"nativeSrc": "6259:102:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "6291:5:11",
														"nodeType": "YulTypedName",
														"src": "6291:5:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "newValue",
														"nativeSrc": "6301:8:11",
														"nodeType": "YulTypedName",
														"src": "6301:8:11",
														"type": ""
													}
												],
												"src": "6259:102:11"
											},
											{
												"body": {
													"nativeSrc": "6440:775:11",
													"nodeType": "YulBlock",
													"src": "6440:775:11",
													"statements": [
														{
															"nativeSrc": "6450:15:11",
															"nodeType": "YulAssignment",
															"src": "6450:15:11",
															"value": {
																"name": "_power",
																"nativeSrc": "6459:6:11",
																"nodeType": "YulIdentifier",
																"src": "6459:6:11"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nativeSrc": "6450:5:11",
																	"nodeType": "YulIdentifier",
																	"src": "6450:5:11"
																}
															]
														},
														{
															"nativeSrc": "6474:14:11",
															"nodeType": "YulAssignment",
															"src": "6474:14:11",
															"value": {
																"name": "_base",
																"nativeSrc": "6483:5:11",
																"nodeType": "YulIdentifier",
																"src": "6483:5:11"
															},
															"variableNames": [
																{
																	"name": "base",
																	"nativeSrc": "6474:4:11",
																	"nodeType": "YulIdentifier",
																	"src": "6474:4:11"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "6532:677:11",
																"nodeType": "YulBlock",
																"src": "6532:677:11",
																"statements": [
																	{
																		"body": {
																			"nativeSrc": "6620:22:11",
																			"nodeType": "YulBlock",
																			"src": "6620:22:11",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [],
																						"functionName": {
																							"name": "panic_error_0x11",
																							"nativeSrc": "6622:16:11",
																							"nodeType": "YulIdentifier",
																							"src": "6622:16:11"
																						},
																						"nativeSrc": "6622:18:11",
																						"nodeType": "YulFunctionCall",
																						"src": "6622:18:11"
																					},
																					"nativeSrc": "6622:18:11",
																					"nodeType": "YulExpressionStatement",
																					"src": "6622:18:11"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "base",
																					"nativeSrc": "6598:4:11",
																					"nodeType": "YulIdentifier",
																					"src": "6598:4:11"
																				},
																				{
																					"arguments": [
																						{
																							"name": "max",
																							"nativeSrc": "6608:3:11",
																							"nodeType": "YulIdentifier",
																							"src": "6608:3:11"
																						},
																						{
																							"name": "base",
																							"nativeSrc": "6613:4:11",
																							"nodeType": "YulIdentifier",
																							"src": "6613:4:11"
																						}
																					],
																					"functionName": {
																						"name": "div",
																						"nativeSrc": "6604:3:11",
																						"nodeType": "YulIdentifier",
																						"src": "6604:3:11"
																					},
																					"nativeSrc": "6604:14:11",
																					"nodeType": "YulFunctionCall",
																					"src": "6604:14:11"
																				}
																			],
																			"functionName": {
																				"name": "gt",
																				"nativeSrc": "6595:2:11",
																				"nodeType": "YulIdentifier",
																				"src": "6595:2:11"
																			},
																			"nativeSrc": "6595:24:11",
																			"nodeType": "YulFunctionCall",
																			"src": "6595:24:11"
																		},
																		"nativeSrc": "6592:50:11",
																		"nodeType": "YulIf",
																		"src": "6592:50:11"
																	},
																	{
																		"body": {
																			"nativeSrc": "6687:419:11",
																			"nodeType": "YulBlock",
																			"src": "6687:419:11",
																			"statements": [
																				{
																					"nativeSrc": "7067:25:11",
																					"nodeType": "YulAssignment",
																					"src": "7067:25:11",
																					"value": {
																						"arguments": [
																							{
																								"name": "power",
																								"nativeSrc": "7080:5:11",
																								"nodeType": "YulIdentifier",
																								"src": "7080:5:11"
																							},
																							{
																								"name": "base",
																								"nativeSrc": "7087:4:11",
																								"nodeType": "YulIdentifier",
																								"src": "7087:4:11"
																							}
																						],
																						"functionName": {
																							"name": "mul",
																							"nativeSrc": "7076:3:11",
																							"nodeType": "YulIdentifier",
																							"src": "7076:3:11"
																						},
																						"nativeSrc": "7076:16:11",
																						"nodeType": "YulFunctionCall",
																						"src": "7076:16:11"
																					},
																					"variableNames": [
																						{
																							"name": "power",
																							"nativeSrc": "7067:5:11",
																							"nodeType": "YulIdentifier",
																							"src": "7067:5:11"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "exponent",
																					"nativeSrc": "6662:8:11",
																					"nodeType": "YulIdentifier",
																					"src": "6662:8:11"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "6672:1:11",
																					"nodeType": "YulLiteral",
																					"src": "6672:1:11",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nativeSrc": "6658:3:11",
																				"nodeType": "YulIdentifier",
																				"src": "6658:3:11"
																			},
																			"nativeSrc": "6658:16:11",
																			"nodeType": "YulFunctionCall",
																			"src": "6658:16:11"
																		},
																		"nativeSrc": "6655:451:11",
																		"nodeType": "YulIf",
																		"src": "6655:451:11"
																	},
																	{
																		"nativeSrc": "7119:23:11",
																		"nodeType": "YulAssignment",
																		"src": "7119:23:11",
																		"value": {
																			"arguments": [
																				{
																					"name": "base",
																					"nativeSrc": "7131:4:11",
																					"nodeType": "YulIdentifier",
																					"src": "7131:4:11"
																				},
																				{
																					"name": "base",
																					"nativeSrc": "7137:4:11",
																					"nodeType": "YulIdentifier",
																					"src": "7137:4:11"
																				}
																			],
																			"functionName": {
																				"name": "mul",
																				"nativeSrc": "7127:3:11",
																				"nodeType": "YulIdentifier",
																				"src": "7127:3:11"
																			},
																			"nativeSrc": "7127:15:11",
																			"nodeType": "YulFunctionCall",
																			"src": "7127:15:11"
																		},
																		"variableNames": [
																			{
																				"name": "base",
																				"nativeSrc": "7119:4:11",
																				"nodeType": "YulIdentifier",
																				"src": "7119:4:11"
																			}
																		]
																	},
																	{
																		"nativeSrc": "7155:44:11",
																		"nodeType": "YulAssignment",
																		"src": "7155:44:11",
																		"value": {
																			"arguments": [
																				{
																					"name": "exponent",
																					"nativeSrc": "7190:8:11",
																					"nodeType": "YulIdentifier",
																					"src": "7190:8:11"
																				}
																			],
																			"functionName": {
																				"name": "shift_right_1_unsigned",
																				"nativeSrc": "7167:22:11",
																				"nodeType": "YulIdentifier",
																				"src": "7167:22:11"
																			},
																			"nativeSrc": "7167:32:11",
																			"nodeType": "YulFunctionCall",
																			"src": "7167:32:11"
																		},
																		"variableNames": [
																			{
																				"name": "exponent",
																				"nativeSrc": "7155:8:11",
																				"nodeType": "YulIdentifier",
																				"src": "7155:8:11"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nativeSrc": "6508:8:11",
																		"nodeType": "YulIdentifier",
																		"src": "6508:8:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6518:1:11",
																		"nodeType": "YulLiteral",
																		"src": "6518:1:11",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "6505:2:11",
																	"nodeType": "YulIdentifier",
																	"src": "6505:2:11"
																},
																"nativeSrc": "6505:15:11",
																"nodeType": "YulFunctionCall",
																"src": "6505:15:11"
															},
															"nativeSrc": "6497:712:11",
															"nodeType": "YulForLoop",
															"post": {
																"nativeSrc": "6521:2:11",
																"nodeType": "YulBlock",
																"src": "6521:2:11",
																"statements": []
															},
															"pre": {
																"nativeSrc": "6501:3:11",
																"nodeType": "YulBlock",
																"src": "6501:3:11",
																"statements": []
															},
															"src": "6497:712:11"
														}
													]
												},
												"name": "checked_exp_helper",
												"nativeSrc": "6367:848:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "_power",
														"nativeSrc": "6395:6:11",
														"nodeType": "YulTypedName",
														"src": "6395:6:11",
														"type": ""
													},
													{
														"name": "_base",
														"nativeSrc": "6403:5:11",
														"nodeType": "YulTypedName",
														"src": "6403:5:11",
														"type": ""
													},
													{
														"name": "exponent",
														"nativeSrc": "6410:8:11",
														"nodeType": "YulTypedName",
														"src": "6410:8:11",
														"type": ""
													},
													{
														"name": "max",
														"nativeSrc": "6420:3:11",
														"nodeType": "YulTypedName",
														"src": "6420:3:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nativeSrc": "6428:5:11",
														"nodeType": "YulTypedName",
														"src": "6428:5:11",
														"type": ""
													},
													{
														"name": "base",
														"nativeSrc": "6435:4:11",
														"nodeType": "YulTypedName",
														"src": "6435:4:11",
														"type": ""
													}
												],
												"src": "6367:848:11"
											},
											{
												"body": {
													"nativeSrc": "7281:1013:11",
													"nodeType": "YulBlock",
													"src": "7281:1013:11",
													"statements": [
														{
															"body": {
																"nativeSrc": "7476:20:11",
																"nodeType": "YulBlock",
																"src": "7476:20:11",
																"statements": [
																	{
																		"nativeSrc": "7478:10:11",
																		"nodeType": "YulAssignment",
																		"src": "7478:10:11",
																		"value": {
																			"kind": "number",
																			"nativeSrc": "7487:1:11",
																			"nodeType": "YulLiteral",
																			"src": "7487:1:11",
																			"type": "",
																			"value": "1"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nativeSrc": "7478:5:11",
																				"nodeType": "YulIdentifier",
																				"src": "7478:5:11"
																			}
																		]
																	},
																	{
																		"nativeSrc": "7489:5:11",
																		"nodeType": "YulLeave",
																		"src": "7489:5:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nativeSrc": "7466:8:11",
																		"nodeType": "YulIdentifier",
																		"src": "7466:8:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "7459:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "7459:6:11"
																},
																"nativeSrc": "7459:16:11",
																"nodeType": "YulFunctionCall",
																"src": "7459:16:11"
															},
															"nativeSrc": "7456:40:11",
															"nodeType": "YulIf",
															"src": "7456:40:11"
														},
														{
															"body": {
																"nativeSrc": "7521:20:11",
																"nodeType": "YulBlock",
																"src": "7521:20:11",
																"statements": [
																	{
																		"nativeSrc": "7523:10:11",
																		"nodeType": "YulAssignment",
																		"src": "7523:10:11",
																		"value": {
																			"kind": "number",
																			"nativeSrc": "7532:1:11",
																			"nodeType": "YulLiteral",
																			"src": "7532:1:11",
																			"type": "",
																			"value": "0"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nativeSrc": "7523:5:11",
																				"nodeType": "YulIdentifier",
																				"src": "7523:5:11"
																			}
																		]
																	},
																	{
																		"nativeSrc": "7534:5:11",
																		"nodeType": "YulLeave",
																		"src": "7534:5:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "base",
																		"nativeSrc": "7515:4:11",
																		"nodeType": "YulIdentifier",
																		"src": "7515:4:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "7508:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "7508:6:11"
																},
																"nativeSrc": "7508:12:11",
																"nodeType": "YulFunctionCall",
																"src": "7508:12:11"
															},
															"nativeSrc": "7505:36:11",
															"nodeType": "YulIf",
															"src": "7505:36:11"
														},
														{
															"cases": [
																{
																	"body": {
																		"nativeSrc": "7651:20:11",
																		"nodeType": "YulBlock",
																		"src": "7651:20:11",
																		"statements": [
																			{
																				"nativeSrc": "7653:10:11",
																				"nodeType": "YulAssignment",
																				"src": "7653:10:11",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "7662:1:11",
																					"nodeType": "YulLiteral",
																					"src": "7662:1:11",
																					"type": "",
																					"value": "1"
																				},
																				"variableNames": [
																					{
																						"name": "power",
																						"nativeSrc": "7653:5:11",
																						"nodeType": "YulIdentifier",
																						"src": "7653:5:11"
																					}
																				]
																			},
																			{
																				"nativeSrc": "7664:5:11",
																				"nodeType": "YulLeave",
																				"src": "7664:5:11"
																			}
																		]
																	},
																	"nativeSrc": "7644:27:11",
																	"nodeType": "YulCase",
																	"src": "7644:27:11",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "7649:1:11",
																		"nodeType": "YulLiteral",
																		"src": "7649:1:11",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nativeSrc": "7695:176:11",
																		"nodeType": "YulBlock",
																		"src": "7695:176:11",
																		"statements": [
																			{
																				"body": {
																					"nativeSrc": "7730:22:11",
																					"nodeType": "YulBlock",
																					"src": "7730:22:11",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [],
																								"functionName": {
																									"name": "panic_error_0x11",
																									"nativeSrc": "7732:16:11",
																									"nodeType": "YulIdentifier",
																									"src": "7732:16:11"
																								},
																								"nativeSrc": "7732:18:11",
																								"nodeType": "YulFunctionCall",
																								"src": "7732:18:11"
																							},
																							"nativeSrc": "7732:18:11",
																							"nodeType": "YulExpressionStatement",
																							"src": "7732:18:11"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "exponent",
																							"nativeSrc": "7715:8:11",
																							"nodeType": "YulIdentifier",
																							"src": "7715:8:11"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "7725:3:11",
																							"nodeType": "YulLiteral",
																							"src": "7725:3:11",
																							"type": "",
																							"value": "255"
																						}
																					],
																					"functionName": {
																						"name": "gt",
																						"nativeSrc": "7712:2:11",
																						"nodeType": "YulIdentifier",
																						"src": "7712:2:11"
																					},
																					"nativeSrc": "7712:17:11",
																					"nodeType": "YulFunctionCall",
																					"src": "7712:17:11"
																				},
																				"nativeSrc": "7709:43:11",
																				"nodeType": "YulIf",
																				"src": "7709:43:11"
																			},
																			{
																				"nativeSrc": "7765:25:11",
																				"nodeType": "YulAssignment",
																				"src": "7765:25:11",
																				"value": {
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "7778:1:11",
																							"nodeType": "YulLiteral",
																							"src": "7778:1:11",
																							"type": "",
																							"value": "2"
																						},
																						{
																							"name": "exponent",
																							"nativeSrc": "7781:8:11",
																							"nodeType": "YulIdentifier",
																							"src": "7781:8:11"
																						}
																					],
																					"functionName": {
																						"name": "exp",
																						"nativeSrc": "7774:3:11",
																						"nodeType": "YulIdentifier",
																						"src": "7774:3:11"
																					},
																					"nativeSrc": "7774:16:11",
																					"nodeType": "YulFunctionCall",
																					"src": "7774:16:11"
																				},
																				"variableNames": [
																					{
																						"name": "power",
																						"nativeSrc": "7765:5:11",
																						"nodeType": "YulIdentifier",
																						"src": "7765:5:11"
																					}
																				]
																			},
																			{
																				"body": {
																					"nativeSrc": "7821:22:11",
																					"nodeType": "YulBlock",
																					"src": "7821:22:11",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [],
																								"functionName": {
																									"name": "panic_error_0x11",
																									"nativeSrc": "7823:16:11",
																									"nodeType": "YulIdentifier",
																									"src": "7823:16:11"
																								},
																								"nativeSrc": "7823:18:11",
																								"nodeType": "YulFunctionCall",
																								"src": "7823:18:11"
																							},
																							"nativeSrc": "7823:18:11",
																							"nodeType": "YulExpressionStatement",
																							"src": "7823:18:11"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "power",
																							"nativeSrc": "7809:5:11",
																							"nodeType": "YulIdentifier",
																							"src": "7809:5:11"
																						},
																						{
																							"name": "max",
																							"nativeSrc": "7816:3:11",
																							"nodeType": "YulIdentifier",
																							"src": "7816:3:11"
																						}
																					],
																					"functionName": {
																						"name": "gt",
																						"nativeSrc": "7806:2:11",
																						"nodeType": "YulIdentifier",
																						"src": "7806:2:11"
																					},
																					"nativeSrc": "7806:14:11",
																					"nodeType": "YulFunctionCall",
																					"src": "7806:14:11"
																				},
																				"nativeSrc": "7803:40:11",
																				"nodeType": "YulIf",
																				"src": "7803:40:11"
																			},
																			{
																				"nativeSrc": "7856:5:11",
																				"nodeType": "YulLeave",
																				"src": "7856:5:11"
																			}
																		]
																	},
																	"nativeSrc": "7680:191:11",
																	"nodeType": "YulCase",
																	"src": "7680:191:11",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "7685:1:11",
																		"nodeType": "YulLiteral",
																		"src": "7685:1:11",
																		"type": "",
																		"value": "2"
																	}
																}
															],
															"expression": {
																"name": "base",
																"nativeSrc": "7601:4:11",
																"nodeType": "YulIdentifier",
																"src": "7601:4:11"
															},
															"nativeSrc": "7594:277:11",
															"nodeType": "YulSwitch",
															"src": "7594:277:11"
														},
														{
															"body": {
																"nativeSrc": "8003:123:11",
																"nodeType": "YulBlock",
																"src": "8003:123:11",
																"statements": [
																	{
																		"nativeSrc": "8017:28:11",
																		"nodeType": "YulAssignment",
																		"src": "8017:28:11",
																		"value": {
																			"arguments": [
																				{
																					"name": "base",
																					"nativeSrc": "8030:4:11",
																					"nodeType": "YulIdentifier",
																					"src": "8030:4:11"
																				},
																				{
																					"name": "exponent",
																					"nativeSrc": "8036:8:11",
																					"nodeType": "YulIdentifier",
																					"src": "8036:8:11"
																				}
																			],
																			"functionName": {
																				"name": "exp",
																				"nativeSrc": "8026:3:11",
																				"nodeType": "YulIdentifier",
																				"src": "8026:3:11"
																			},
																			"nativeSrc": "8026:19:11",
																			"nodeType": "YulFunctionCall",
																			"src": "8026:19:11"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nativeSrc": "8017:5:11",
																				"nodeType": "YulIdentifier",
																				"src": "8017:5:11"
																			}
																		]
																	},
																	{
																		"body": {
																			"nativeSrc": "8076:22:11",
																			"nodeType": "YulBlock",
																			"src": "8076:22:11",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [],
																						"functionName": {
																							"name": "panic_error_0x11",
																							"nativeSrc": "8078:16:11",
																							"nodeType": "YulIdentifier",
																							"src": "8078:16:11"
																						},
																						"nativeSrc": "8078:18:11",
																						"nodeType": "YulFunctionCall",
																						"src": "8078:18:11"
																					},
																					"nativeSrc": "8078:18:11",
																					"nodeType": "YulExpressionStatement",
																					"src": "8078:18:11"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "power",
																					"nativeSrc": "8064:5:11",
																					"nodeType": "YulIdentifier",
																					"src": "8064:5:11"
																				},
																				{
																					"name": "max",
																					"nativeSrc": "8071:3:11",
																					"nodeType": "YulIdentifier",
																					"src": "8071:3:11"
																				}
																			],
																			"functionName": {
																				"name": "gt",
																				"nativeSrc": "8061:2:11",
																				"nodeType": "YulIdentifier",
																				"src": "8061:2:11"
																			},
																			"nativeSrc": "8061:14:11",
																			"nodeType": "YulFunctionCall",
																			"src": "8061:14:11"
																		},
																		"nativeSrc": "8058:40:11",
																		"nodeType": "YulIf",
																		"src": "8058:40:11"
																	},
																	{
																		"nativeSrc": "8111:5:11",
																		"nodeType": "YulLeave",
																		"src": "8111:5:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "base",
																						"nativeSrc": "7906:4:11",
																						"nodeType": "YulIdentifier",
																						"src": "7906:4:11"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "7912:2:11",
																						"nodeType": "YulLiteral",
																						"src": "7912:2:11",
																						"type": "",
																						"value": "11"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "7903:2:11",
																					"nodeType": "YulIdentifier",
																					"src": "7903:2:11"
																				},
																				"nativeSrc": "7903:12:11",
																				"nodeType": "YulFunctionCall",
																				"src": "7903:12:11"
																			},
																			{
																				"arguments": [
																					{
																						"name": "exponent",
																						"nativeSrc": "7920:8:11",
																						"nodeType": "YulIdentifier",
																						"src": "7920:8:11"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "7930:2:11",
																						"nodeType": "YulLiteral",
																						"src": "7930:2:11",
																						"type": "",
																						"value": "78"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "7917:2:11",
																					"nodeType": "YulIdentifier",
																					"src": "7917:2:11"
																				},
																				"nativeSrc": "7917:16:11",
																				"nodeType": "YulFunctionCall",
																				"src": "7917:16:11"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "7899:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "7899:3:11"
																		},
																		"nativeSrc": "7899:35:11",
																		"nodeType": "YulFunctionCall",
																		"src": "7899:35:11"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "base",
																						"nativeSrc": "7955:4:11",
																						"nodeType": "YulIdentifier",
																						"src": "7955:4:11"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "7961:3:11",
																						"nodeType": "YulLiteral",
																						"src": "7961:3:11",
																						"type": "",
																						"value": "307"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "7952:2:11",
																					"nodeType": "YulIdentifier",
																					"src": "7952:2:11"
																				},
																				"nativeSrc": "7952:13:11",
																				"nodeType": "YulFunctionCall",
																				"src": "7952:13:11"
																			},
																			{
																				"arguments": [
																					{
																						"name": "exponent",
																						"nativeSrc": "7970:8:11",
																						"nodeType": "YulIdentifier",
																						"src": "7970:8:11"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "7980:2:11",
																						"nodeType": "YulLiteral",
																						"src": "7980:2:11",
																						"type": "",
																						"value": "32"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "7967:2:11",
																					"nodeType": "YulIdentifier",
																					"src": "7967:2:11"
																				},
																				"nativeSrc": "7967:16:11",
																				"nodeType": "YulFunctionCall",
																				"src": "7967:16:11"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "7948:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "7948:3:11"
																		},
																		"nativeSrc": "7948:36:11",
																		"nodeType": "YulFunctionCall",
																		"src": "7948:36:11"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nativeSrc": "7883:2:11",
																	"nodeType": "YulIdentifier",
																	"src": "7883:2:11"
																},
																"nativeSrc": "7883:111:11",
																"nodeType": "YulFunctionCall",
																"src": "7883:111:11"
															},
															"nativeSrc": "7880:246:11",
															"nodeType": "YulIf",
															"src": "7880:246:11"
														},
														{
															"nativeSrc": "8136:57:11",
															"nodeType": "YulAssignment",
															"src": "8136:57:11",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "8170:1:11",
																		"nodeType": "YulLiteral",
																		"src": "8170:1:11",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "base",
																		"nativeSrc": "8173:4:11",
																		"nodeType": "YulIdentifier",
																		"src": "8173:4:11"
																	},
																	{
																		"name": "exponent",
																		"nativeSrc": "8179:8:11",
																		"nodeType": "YulIdentifier",
																		"src": "8179:8:11"
																	},
																	{
																		"name": "max",
																		"nativeSrc": "8189:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "8189:3:11"
																	}
																],
																"functionName": {
																	"name": "checked_exp_helper",
																	"nativeSrc": "8151:18:11",
																	"nodeType": "YulIdentifier",
																	"src": "8151:18:11"
																},
																"nativeSrc": "8151:42:11",
																"nodeType": "YulFunctionCall",
																"src": "8151:42:11"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nativeSrc": "8136:5:11",
																	"nodeType": "YulIdentifier",
																	"src": "8136:5:11"
																},
																{
																	"name": "base",
																	"nativeSrc": "8143:4:11",
																	"nodeType": "YulIdentifier",
																	"src": "8143:4:11"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "8232:22:11",
																"nodeType": "YulBlock",
																"src": "8232:22:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "8234:16:11",
																				"nodeType": "YulIdentifier",
																				"src": "8234:16:11"
																			},
																			"nativeSrc": "8234:18:11",
																			"nodeType": "YulFunctionCall",
																			"src": "8234:18:11"
																		},
																		"nativeSrc": "8234:18:11",
																		"nodeType": "YulExpressionStatement",
																		"src": "8234:18:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "power",
																		"nativeSrc": "8209:5:11",
																		"nodeType": "YulIdentifier",
																		"src": "8209:5:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "max",
																				"nativeSrc": "8220:3:11",
																				"nodeType": "YulIdentifier",
																				"src": "8220:3:11"
																			},
																			{
																				"name": "base",
																				"nativeSrc": "8225:4:11",
																				"nodeType": "YulIdentifier",
																				"src": "8225:4:11"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nativeSrc": "8216:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "8216:3:11"
																		},
																		"nativeSrc": "8216:14:11",
																		"nodeType": "YulFunctionCall",
																		"src": "8216:14:11"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "8206:2:11",
																	"nodeType": "YulIdentifier",
																	"src": "8206:2:11"
																},
																"nativeSrc": "8206:25:11",
																"nodeType": "YulFunctionCall",
																"src": "8206:25:11"
															},
															"nativeSrc": "8203:51:11",
															"nodeType": "YulIf",
															"src": "8203:51:11"
														},
														{
															"nativeSrc": "8263:25:11",
															"nodeType": "YulAssignment",
															"src": "8263:25:11",
															"value": {
																"arguments": [
																	{
																		"name": "power",
																		"nativeSrc": "8276:5:11",
																		"nodeType": "YulIdentifier",
																		"src": "8276:5:11"
																	},
																	{
																		"name": "base",
																		"nativeSrc": "8283:4:11",
																		"nodeType": "YulIdentifier",
																		"src": "8283:4:11"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nativeSrc": "8272:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "8272:3:11"
																},
																"nativeSrc": "8272:16:11",
																"nodeType": "YulFunctionCall",
																"src": "8272:16:11"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nativeSrc": "8263:5:11",
																	"nodeType": "YulIdentifier",
																	"src": "8263:5:11"
																}
															]
														}
													]
												},
												"name": "checked_exp_unsigned",
												"nativeSrc": "7221:1073:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base",
														"nativeSrc": "7251:4:11",
														"nodeType": "YulTypedName",
														"src": "7251:4:11",
														"type": ""
													},
													{
														"name": "exponent",
														"nativeSrc": "7257:8:11",
														"nodeType": "YulTypedName",
														"src": "7257:8:11",
														"type": ""
													},
													{
														"name": "max",
														"nativeSrc": "7267:3:11",
														"nodeType": "YulTypedName",
														"src": "7267:3:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nativeSrc": "7275:5:11",
														"nodeType": "YulTypedName",
														"src": "7275:5:11",
														"type": ""
													}
												],
												"src": "7221:1073:11"
											},
											{
												"body": {
													"nativeSrc": "8366:219:11",
													"nodeType": "YulBlock",
													"src": "8366:219:11",
													"statements": [
														{
															"nativeSrc": "8376:31:11",
															"nodeType": "YulAssignment",
															"src": "8376:31:11",
															"value": {
																"arguments": [
																	{
																		"name": "base",
																		"nativeSrc": "8402:4:11",
																		"nodeType": "YulIdentifier",
																		"src": "8402:4:11"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "8384:17:11",
																	"nodeType": "YulIdentifier",
																	"src": "8384:17:11"
																},
																"nativeSrc": "8384:23:11",
																"nodeType": "YulFunctionCall",
																"src": "8384:23:11"
															},
															"variableNames": [
																{
																	"name": "base",
																	"nativeSrc": "8376:4:11",
																	"nodeType": "YulIdentifier",
																	"src": "8376:4:11"
																}
															]
														},
														{
															"nativeSrc": "8416:39:11",
															"nodeType": "YulAssignment",
															"src": "8416:39:11",
															"value": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nativeSrc": "8446:8:11",
																		"nodeType": "YulIdentifier",
																		"src": "8446:8:11"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "8428:17:11",
																	"nodeType": "YulIdentifier",
																	"src": "8428:17:11"
																},
																"nativeSrc": "8428:27:11",
																"nodeType": "YulFunctionCall",
																"src": "8428:27:11"
															},
															"variableNames": [
																{
																	"name": "exponent",
																	"nativeSrc": "8416:8:11",
																	"nodeType": "YulIdentifier",
																	"src": "8416:8:11"
																}
															]
														},
														{
															"nativeSrc": "8465:113:11",
															"nodeType": "YulAssignment",
															"src": "8465:113:11",
															"value": {
																"arguments": [
																	{
																		"name": "base",
																		"nativeSrc": "8495:4:11",
																		"nodeType": "YulIdentifier",
																		"src": "8495:4:11"
																	},
																	{
																		"name": "exponent",
																		"nativeSrc": "8501:8:11",
																		"nodeType": "YulIdentifier",
																		"src": "8501:8:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8511:66:11",
																		"nodeType": "YulLiteral",
																		"src": "8511:66:11",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "checked_exp_unsigned",
																	"nativeSrc": "8474:20:11",
																	"nodeType": "YulIdentifier",
																	"src": "8474:20:11"
																},
																"nativeSrc": "8474:104:11",
																"nodeType": "YulFunctionCall",
																"src": "8474:104:11"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nativeSrc": "8465:5:11",
																	"nodeType": "YulIdentifier",
																	"src": "8465:5:11"
																}
															]
														}
													]
												},
												"name": "checked_exp_t_uint256_t_uint256",
												"nativeSrc": "8300:285:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base",
														"nativeSrc": "8341:4:11",
														"nodeType": "YulTypedName",
														"src": "8341:4:11",
														"type": ""
													},
													{
														"name": "exponent",
														"nativeSrc": "8347:8:11",
														"nodeType": "YulTypedName",
														"src": "8347:8:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nativeSrc": "8360:5:11",
														"nodeType": "YulTypedName",
														"src": "8360:5:11",
														"type": ""
													}
												],
												"src": "8300:285:11"
											},
											{
												"body": {
													"nativeSrc": "8639:362:11",
													"nodeType": "YulBlock",
													"src": "8639:362:11",
													"statements": [
														{
															"nativeSrc": "8649:25:11",
															"nodeType": "YulAssignment",
															"src": "8649:25:11",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "8672:1:11",
																		"nodeType": "YulIdentifier",
																		"src": "8672:1:11"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "8654:17:11",
																	"nodeType": "YulIdentifier",
																	"src": "8654:17:11"
																},
																"nativeSrc": "8654:20:11",
																"nodeType": "YulFunctionCall",
																"src": "8654:20:11"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nativeSrc": "8649:1:11",
																	"nodeType": "YulIdentifier",
																	"src": "8649:1:11"
																}
															]
														},
														{
															"nativeSrc": "8683:25:11",
															"nodeType": "YulAssignment",
															"src": "8683:25:11",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nativeSrc": "8706:1:11",
																		"nodeType": "YulIdentifier",
																		"src": "8706:1:11"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "8688:17:11",
																	"nodeType": "YulIdentifier",
																	"src": "8688:17:11"
																},
																"nativeSrc": "8688:20:11",
																"nodeType": "YulFunctionCall",
																"src": "8688:20:11"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nativeSrc": "8683:1:11",
																	"nodeType": "YulIdentifier",
																	"src": "8683:1:11"
																}
															]
														},
														{
															"nativeSrc": "8717:28:11",
															"nodeType": "YulVariableDeclaration",
															"src": "8717:28:11",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "8740:1:11",
																		"nodeType": "YulIdentifier",
																		"src": "8740:1:11"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "8743:1:11",
																		"nodeType": "YulIdentifier",
																		"src": "8743:1:11"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nativeSrc": "8736:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "8736:3:11"
																},
																"nativeSrc": "8736:9:11",
																"nodeType": "YulFunctionCall",
																"src": "8736:9:11"
															},
															"variables": [
																{
																	"name": "product_raw",
																	"nativeSrc": "8721:11:11",
																	"nodeType": "YulTypedName",
																	"src": "8721:11:11",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "8754:41:11",
															"nodeType": "YulAssignment",
															"src": "8754:41:11",
															"value": {
																"arguments": [
																	{
																		"name": "product_raw",
																		"nativeSrc": "8783:11:11",
																		"nodeType": "YulIdentifier",
																		"src": "8783:11:11"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "8765:17:11",
																	"nodeType": "YulIdentifier",
																	"src": "8765:17:11"
																},
																"nativeSrc": "8765:30:11",
																"nodeType": "YulFunctionCall",
																"src": "8765:30:11"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nativeSrc": "8754:7:11",
																	"nodeType": "YulIdentifier",
																	"src": "8754:7:11"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "8972:22:11",
																"nodeType": "YulBlock",
																"src": "8972:22:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "8974:16:11",
																				"nodeType": "YulIdentifier",
																				"src": "8974:16:11"
																			},
																			"nativeSrc": "8974:18:11",
																			"nodeType": "YulFunctionCall",
																			"src": "8974:18:11"
																		},
																		"nativeSrc": "8974:18:11",
																		"nodeType": "YulExpressionStatement",
																		"src": "8974:18:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nativeSrc": "8905:1:11",
																						"nodeType": "YulIdentifier",
																						"src": "8905:1:11"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nativeSrc": "8898:6:11",
																					"nodeType": "YulIdentifier",
																					"src": "8898:6:11"
																				},
																				"nativeSrc": "8898:9:11",
																				"nodeType": "YulFunctionCall",
																				"src": "8898:9:11"
																			},
																			{
																				"arguments": [
																					{
																						"name": "y",
																						"nativeSrc": "8928:1:11",
																						"nodeType": "YulIdentifier",
																						"src": "8928:1:11"
																					},
																					{
																						"arguments": [
																							{
																								"name": "product",
																								"nativeSrc": "8935:7:11",
																								"nodeType": "YulIdentifier",
																								"src": "8935:7:11"
																							},
																							{
																								"name": "x",
																								"nativeSrc": "8944:1:11",
																								"nodeType": "YulIdentifier",
																								"src": "8944:1:11"
																							}
																						],
																						"functionName": {
																							"name": "div",
																							"nativeSrc": "8931:3:11",
																							"nodeType": "YulIdentifier",
																							"src": "8931:3:11"
																						},
																						"nativeSrc": "8931:15:11",
																						"nodeType": "YulFunctionCall",
																						"src": "8931:15:11"
																					}
																				],
																				"functionName": {
																					"name": "eq",
																					"nativeSrc": "8925:2:11",
																					"nodeType": "YulIdentifier",
																					"src": "8925:2:11"
																				},
																				"nativeSrc": "8925:22:11",
																				"nodeType": "YulFunctionCall",
																				"src": "8925:22:11"
																			}
																		],
																		"functionName": {
																			"name": "or",
																			"nativeSrc": "8878:2:11",
																			"nodeType": "YulIdentifier",
																			"src": "8878:2:11"
																		},
																		"nativeSrc": "8878:83:11",
																		"nodeType": "YulFunctionCall",
																		"src": "8878:83:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "8858:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "8858:6:11"
																},
																"nativeSrc": "8858:113:11",
																"nodeType": "YulFunctionCall",
																"src": "8858:113:11"
															},
															"nativeSrc": "8855:139:11",
															"nodeType": "YulIf",
															"src": "8855:139:11"
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nativeSrc": "8591:410:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "8622:1:11",
														"nodeType": "YulTypedName",
														"src": "8622:1:11",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "8625:1:11",
														"nodeType": "YulTypedName",
														"src": "8625:1:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nativeSrc": "8631:7:11",
														"nodeType": "YulTypedName",
														"src": "8631:7:11",
														"type": ""
													}
												],
												"src": "8591:410:11"
											},
											{
												"body": {
													"nativeSrc": "9060:32:11",
													"nodeType": "YulBlock",
													"src": "9060:32:11",
													"statements": [
														{
															"nativeSrc": "9070:16:11",
															"nodeType": "YulAssignment",
															"src": "9070:16:11",
															"value": {
																"name": "value",
																"nativeSrc": "9081:5:11",
																"nodeType": "YulIdentifier",
																"src": "9081:5:11"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "9070:7:11",
																	"nodeType": "YulIdentifier",
																	"src": "9070:7:11"
																}
															]
														}
													]
												},
												"name": "cleanup_t_rational_1_by_1",
												"nativeSrc": "9007:85:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "9042:5:11",
														"nodeType": "YulTypedName",
														"src": "9042:5:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "9052:7:11",
														"nodeType": "YulTypedName",
														"src": "9052:7:11",
														"type": ""
													}
												],
												"src": "9007:85:11"
											},
											{
												"body": {
													"nativeSrc": "9142:57:11",
													"nodeType": "YulBlock",
													"src": "9142:57:11",
													"statements": [
														{
															"nativeSrc": "9152:41:11",
															"nodeType": "YulAssignment",
															"src": "9152:41:11",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "9167:5:11",
																		"nodeType": "YulIdentifier",
																		"src": "9167:5:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9174:18:11",
																		"nodeType": "YulLiteral",
																		"src": "9174:18:11",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "9163:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "9163:3:11"
																},
																"nativeSrc": "9163:30:11",
																"nodeType": "YulFunctionCall",
																"src": "9163:30:11"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "9152:7:11",
																	"nodeType": "YulIdentifier",
																	"src": "9152:7:11"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint64",
												"nativeSrc": "9098:101:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "9124:5:11",
														"nodeType": "YulTypedName",
														"src": "9124:5:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "9134:7:11",
														"nodeType": "YulTypedName",
														"src": "9134:7:11",
														"type": ""
													}
												],
												"src": "9098:101:11"
											},
											{
												"body": {
													"nativeSrc": "9237:28:11",
													"nodeType": "YulBlock",
													"src": "9237:28:11",
													"statements": [
														{
															"nativeSrc": "9247:12:11",
															"nodeType": "YulAssignment",
															"src": "9247:12:11",
															"value": {
																"name": "value",
																"nativeSrc": "9254:5:11",
																"nodeType": "YulIdentifier",
																"src": "9254:5:11"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nativeSrc": "9247:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "9247:3:11"
																}
															]
														}
													]
												},
												"name": "identity",
												"nativeSrc": "9205:60:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "9223:5:11",
														"nodeType": "YulTypedName",
														"src": "9223:5:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nativeSrc": "9233:3:11",
														"nodeType": "YulTypedName",
														"src": "9233:3:11",
														"type": ""
													}
												],
												"src": "9205:60:11"
											},
											{
												"body": {
													"nativeSrc": "9338:89:11",
													"nodeType": "YulBlock",
													"src": "9338:89:11",
													"statements": [
														{
															"nativeSrc": "9348:73:11",
															"nodeType": "YulAssignment",
															"src": "9348:73:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "9413:5:11",
																						"nodeType": "YulIdentifier",
																						"src": "9413:5:11"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_rational_1_by_1",
																					"nativeSrc": "9387:25:11",
																					"nodeType": "YulIdentifier",
																					"src": "9387:25:11"
																				},
																				"nativeSrc": "9387:32:11",
																				"nodeType": "YulFunctionCall",
																				"src": "9387:32:11"
																			}
																		],
																		"functionName": {
																			"name": "identity",
																			"nativeSrc": "9378:8:11",
																			"nodeType": "YulIdentifier",
																			"src": "9378:8:11"
																		},
																		"nativeSrc": "9378:42:11",
																		"nodeType": "YulFunctionCall",
																		"src": "9378:42:11"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint64",
																	"nativeSrc": "9361:16:11",
																	"nodeType": "YulIdentifier",
																	"src": "9361:16:11"
																},
																"nativeSrc": "9361:60:11",
																"nodeType": "YulFunctionCall",
																"src": "9361:60:11"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nativeSrc": "9348:9:11",
																	"nodeType": "YulIdentifier",
																	"src": "9348:9:11"
																}
															]
														}
													]
												},
												"name": "convert_t_rational_1_by_1_to_t_uint64",
												"nativeSrc": "9271:156:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "9318:5:11",
														"nodeType": "YulTypedName",
														"src": "9318:5:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nativeSrc": "9328:9:11",
														"nodeType": "YulTypedName",
														"src": "9328:9:11",
														"type": ""
													}
												],
												"src": "9271:156:11"
											},
											{
												"body": {
													"nativeSrc": "9505:73:11",
													"nodeType": "YulBlock",
													"src": "9505:73:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "9522:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "9522:3:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "9565:5:11",
																				"nodeType": "YulIdentifier",
																				"src": "9565:5:11"
																			}
																		],
																		"functionName": {
																			"name": "convert_t_rational_1_by_1_to_t_uint64",
																			"nativeSrc": "9527:37:11",
																			"nodeType": "YulIdentifier",
																			"src": "9527:37:11"
																		},
																		"nativeSrc": "9527:44:11",
																		"nodeType": "YulFunctionCall",
																		"src": "9527:44:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "9515:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "9515:6:11"
																},
																"nativeSrc": "9515:57:11",
																"nodeType": "YulFunctionCall",
																"src": "9515:57:11"
															},
															"nativeSrc": "9515:57:11",
															"nodeType": "YulExpressionStatement",
															"src": "9515:57:11"
														}
													]
												},
												"name": "abi_encode_t_rational_1_by_1_to_t_uint64_fromStack",
												"nativeSrc": "9433:145:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "9493:5:11",
														"nodeType": "YulTypedName",
														"src": "9493:5:11",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "9500:3:11",
														"nodeType": "YulTypedName",
														"src": "9500:3:11",
														"type": ""
													}
												],
												"src": "9433:145:11"
											},
											{
												"body": {
													"nativeSrc": "9689:131:11",
													"nodeType": "YulBlock",
													"src": "9689:131:11",
													"statements": [
														{
															"nativeSrc": "9699:26:11",
															"nodeType": "YulAssignment",
															"src": "9699:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "9711:9:11",
																		"nodeType": "YulIdentifier",
																		"src": "9711:9:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9722:2:11",
																		"nodeType": "YulLiteral",
																		"src": "9722:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "9707:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "9707:3:11"
																},
																"nativeSrc": "9707:18:11",
																"nodeType": "YulFunctionCall",
																"src": "9707:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "9699:4:11",
																	"nodeType": "YulIdentifier",
																	"src": "9699:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "9786:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "9786:6:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "9799:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "9799:9:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "9810:1:11",
																				"nodeType": "YulLiteral",
																				"src": "9810:1:11",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "9795:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "9795:3:11"
																		},
																		"nativeSrc": "9795:17:11",
																		"nodeType": "YulFunctionCall",
																		"src": "9795:17:11"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_rational_1_by_1_to_t_uint64_fromStack",
																	"nativeSrc": "9735:50:11",
																	"nodeType": "YulIdentifier",
																	"src": "9735:50:11"
																},
																"nativeSrc": "9735:78:11",
																"nodeType": "YulFunctionCall",
																"src": "9735:78:11"
															},
															"nativeSrc": "9735:78:11",
															"nodeType": "YulExpressionStatement",
															"src": "9735:78:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed",
												"nativeSrc": "9584:236:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "9661:9:11",
														"nodeType": "YulTypedName",
														"src": "9661:9:11",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "9673:6:11",
														"nodeType": "YulTypedName",
														"src": "9673:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "9684:4:11",
														"nodeType": "YulTypedName",
														"src": "9684:4:11",
														"type": ""
													}
												],
												"src": "9584:236:11"
											},
											{
												"body": {
													"nativeSrc": "9891:53:11",
													"nodeType": "YulBlock",
													"src": "9891:53:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "9908:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "9908:3:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "9931:5:11",
																				"nodeType": "YulIdentifier",
																				"src": "9931:5:11"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nativeSrc": "9913:17:11",
																			"nodeType": "YulIdentifier",
																			"src": "9913:17:11"
																		},
																		"nativeSrc": "9913:24:11",
																		"nodeType": "YulFunctionCall",
																		"src": "9913:24:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "9901:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "9901:6:11"
																},
																"nativeSrc": "9901:37:11",
																"nodeType": "YulFunctionCall",
																"src": "9901:37:11"
															},
															"nativeSrc": "9901:37:11",
															"nodeType": "YulExpressionStatement",
															"src": "9901:37:11"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nativeSrc": "9826:118:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "9879:5:11",
														"nodeType": "YulTypedName",
														"src": "9879:5:11",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "9886:3:11",
														"nodeType": "YulTypedName",
														"src": "9886:3:11",
														"type": ""
													}
												],
												"src": "9826:118:11"
											},
											{
												"body": {
													"nativeSrc": "10104:288:11",
													"nodeType": "YulBlock",
													"src": "10104:288:11",
													"statements": [
														{
															"nativeSrc": "10114:26:11",
															"nodeType": "YulAssignment",
															"src": "10114:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "10126:9:11",
																		"nodeType": "YulIdentifier",
																		"src": "10126:9:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "10137:2:11",
																		"nodeType": "YulLiteral",
																		"src": "10137:2:11",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "10122:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "10122:3:11"
																},
																"nativeSrc": "10122:18:11",
																"nodeType": "YulFunctionCall",
																"src": "10122:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "10114:4:11",
																	"nodeType": "YulIdentifier",
																	"src": "10114:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "10194:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "10194:6:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "10207:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "10207:9:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "10218:1:11",
																				"nodeType": "YulLiteral",
																				"src": "10218:1:11",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "10203:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "10203:3:11"
																		},
																		"nativeSrc": "10203:17:11",
																		"nodeType": "YulFunctionCall",
																		"src": "10203:17:11"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "10150:43:11",
																	"nodeType": "YulIdentifier",
																	"src": "10150:43:11"
																},
																"nativeSrc": "10150:71:11",
																"nodeType": "YulFunctionCall",
																"src": "10150:71:11"
															},
															"nativeSrc": "10150:71:11",
															"nodeType": "YulExpressionStatement",
															"src": "10150:71:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nativeSrc": "10275:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "10275:6:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "10288:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "10288:9:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "10299:2:11",
																				"nodeType": "YulLiteral",
																				"src": "10299:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "10284:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "10284:3:11"
																		},
																		"nativeSrc": "10284:18:11",
																		"nodeType": "YulFunctionCall",
																		"src": "10284:18:11"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "10231:43:11",
																	"nodeType": "YulIdentifier",
																	"src": "10231:43:11"
																},
																"nativeSrc": "10231:72:11",
																"nodeType": "YulFunctionCall",
																"src": "10231:72:11"
															},
															"nativeSrc": "10231:72:11",
															"nodeType": "YulExpressionStatement",
															"src": "10231:72:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nativeSrc": "10357:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "10357:6:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "10370:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "10370:9:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "10381:2:11",
																				"nodeType": "YulLiteral",
																				"src": "10381:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "10366:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "10366:3:11"
																		},
																		"nativeSrc": "10366:18:11",
																		"nodeType": "YulFunctionCall",
																		"src": "10366:18:11"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "10313:43:11",
																	"nodeType": "YulIdentifier",
																	"src": "10313:43:11"
																},
																"nativeSrc": "10313:72:11",
																"nodeType": "YulFunctionCall",
																"src": "10313:72:11"
															},
															"nativeSrc": "10313:72:11",
															"nodeType": "YulExpressionStatement",
															"src": "10313:72:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed",
												"nativeSrc": "9950:442:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "10060:9:11",
														"nodeType": "YulTypedName",
														"src": "10060:9:11",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "10072:6:11",
														"nodeType": "YulTypedName",
														"src": "10072:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "10080:6:11",
														"nodeType": "YulTypedName",
														"src": "10080:6:11",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "10088:6:11",
														"nodeType": "YulTypedName",
														"src": "10088:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "10099:4:11",
														"nodeType": "YulTypedName",
														"src": "10099:4:11",
														"type": ""
													}
												],
												"src": "9950:442:11"
											},
											{
												"body": {
													"nativeSrc": "10496:124:11",
													"nodeType": "YulBlock",
													"src": "10496:124:11",
													"statements": [
														{
															"nativeSrc": "10506:26:11",
															"nodeType": "YulAssignment",
															"src": "10506:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "10518:9:11",
																		"nodeType": "YulIdentifier",
																		"src": "10518:9:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "10529:2:11",
																		"nodeType": "YulLiteral",
																		"src": "10529:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "10514:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "10514:3:11"
																},
																"nativeSrc": "10514:18:11",
																"nodeType": "YulFunctionCall",
																"src": "10514:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "10506:4:11",
																	"nodeType": "YulIdentifier",
																	"src": "10506:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "10586:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "10586:6:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "10599:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "10599:9:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "10610:1:11",
																				"nodeType": "YulLiteral",
																				"src": "10610:1:11",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "10595:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "10595:3:11"
																		},
																		"nativeSrc": "10595:17:11",
																		"nodeType": "YulFunctionCall",
																		"src": "10595:17:11"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "10542:43:11",
																	"nodeType": "YulIdentifier",
																	"src": "10542:43:11"
																},
																"nativeSrc": "10542:71:11",
																"nodeType": "YulFunctionCall",
																"src": "10542:71:11"
															},
															"nativeSrc": "10542:71:11",
															"nodeType": "YulExpressionStatement",
															"src": "10542:71:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nativeSrc": "10398:222:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "10468:9:11",
														"nodeType": "YulTypedName",
														"src": "10468:9:11",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "10480:6:11",
														"nodeType": "YulTypedName",
														"src": "10480:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "10491:4:11",
														"nodeType": "YulTypedName",
														"src": "10491:4:11",
														"type": ""
													}
												],
												"src": "10398:222:11"
											},
											{
												"body": {
													"nativeSrc": "10670:147:11",
													"nodeType": "YulBlock",
													"src": "10670:147:11",
													"statements": [
														{
															"nativeSrc": "10680:25:11",
															"nodeType": "YulAssignment",
															"src": "10680:25:11",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "10703:1:11",
																		"nodeType": "YulIdentifier",
																		"src": "10703:1:11"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "10685:17:11",
																	"nodeType": "YulIdentifier",
																	"src": "10685:17:11"
																},
																"nativeSrc": "10685:20:11",
																"nodeType": "YulFunctionCall",
																"src": "10685:20:11"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nativeSrc": "10680:1:11",
																	"nodeType": "YulIdentifier",
																	"src": "10680:1:11"
																}
															]
														},
														{
															"nativeSrc": "10714:25:11",
															"nodeType": "YulAssignment",
															"src": "10714:25:11",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nativeSrc": "10737:1:11",
																		"nodeType": "YulIdentifier",
																		"src": "10737:1:11"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "10719:17:11",
																	"nodeType": "YulIdentifier",
																	"src": "10719:17:11"
																},
																"nativeSrc": "10719:20:11",
																"nodeType": "YulFunctionCall",
																"src": "10719:20:11"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nativeSrc": "10714:1:11",
																	"nodeType": "YulIdentifier",
																	"src": "10714:1:11"
																}
															]
														},
														{
															"nativeSrc": "10748:16:11",
															"nodeType": "YulAssignment",
															"src": "10748:16:11",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "10759:1:11",
																		"nodeType": "YulIdentifier",
																		"src": "10759:1:11"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "10762:1:11",
																		"nodeType": "YulIdentifier",
																		"src": "10762:1:11"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "10755:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "10755:3:11"
																},
																"nativeSrc": "10755:9:11",
																"nodeType": "YulFunctionCall",
																"src": "10755:9:11"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nativeSrc": "10748:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "10748:3:11"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "10788:22:11",
																"nodeType": "YulBlock",
																"src": "10788:22:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "10790:16:11",
																				"nodeType": "YulIdentifier",
																				"src": "10790:16:11"
																			},
																			"nativeSrc": "10790:18:11",
																			"nodeType": "YulFunctionCall",
																			"src": "10790:18:11"
																		},
																		"nativeSrc": "10790:18:11",
																		"nodeType": "YulExpressionStatement",
																		"src": "10790:18:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "10780:1:11",
																		"nodeType": "YulIdentifier",
																		"src": "10780:1:11"
																	},
																	{
																		"name": "sum",
																		"nativeSrc": "10783:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "10783:3:11"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "10777:2:11",
																	"nodeType": "YulIdentifier",
																	"src": "10777:2:11"
																},
																"nativeSrc": "10777:10:11",
																"nodeType": "YulFunctionCall",
																"src": "10777:10:11"
															},
															"nativeSrc": "10774:36:11",
															"nodeType": "YulIf",
															"src": "10774:36:11"
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nativeSrc": "10626:191:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "10657:1:11",
														"nodeType": "YulTypedName",
														"src": "10657:1:11",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "10660:1:11",
														"nodeType": "YulTypedName",
														"src": "10660:1:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nativeSrc": "10666:3:11",
														"nodeType": "YulTypedName",
														"src": "10666:3:11",
														"type": ""
													}
												],
												"src": "10626:191:11"
											},
											{
												"body": {
													"nativeSrc": "10851:152:11",
													"nodeType": "YulBlock",
													"src": "10851:152:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "10868:1:11",
																		"nodeType": "YulLiteral",
																		"src": "10868:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "10871:77:11",
																		"nodeType": "YulLiteral",
																		"src": "10871:77:11",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "10861:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "10861:6:11"
																},
																"nativeSrc": "10861:88:11",
																"nodeType": "YulFunctionCall",
																"src": "10861:88:11"
															},
															"nativeSrc": "10861:88:11",
															"nodeType": "YulExpressionStatement",
															"src": "10861:88:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "10965:1:11",
																		"nodeType": "YulLiteral",
																		"src": "10965:1:11",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "10968:4:11",
																		"nodeType": "YulLiteral",
																		"src": "10968:4:11",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "10958:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "10958:6:11"
																},
																"nativeSrc": "10958:15:11",
																"nodeType": "YulFunctionCall",
																"src": "10958:15:11"
															},
															"nativeSrc": "10958:15:11",
															"nodeType": "YulExpressionStatement",
															"src": "10958:15:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "10989:1:11",
																		"nodeType": "YulLiteral",
																		"src": "10989:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "10992:4:11",
																		"nodeType": "YulLiteral",
																		"src": "10992:4:11",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "10982:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "10982:6:11"
																},
																"nativeSrc": "10982:15:11",
																"nodeType": "YulFunctionCall",
																"src": "10982:15:11"
															},
															"nativeSrc": "10982:15:11",
															"nodeType": "YulExpressionStatement",
															"src": "10982:15:11"
														}
													]
												},
												"name": "panic_error_0x41",
												"nativeSrc": "10823:180:11",
												"nodeType": "YulFunctionDefinition",
												"src": "10823:180:11"
											},
											{
												"body": {
													"nativeSrc": "11063:87:11",
													"nodeType": "YulBlock",
													"src": "11063:87:11",
													"statements": [
														{
															"nativeSrc": "11073:11:11",
															"nodeType": "YulAssignment",
															"src": "11073:11:11",
															"value": {
																"name": "ptr",
																"nativeSrc": "11081:3:11",
																"nodeType": "YulIdentifier",
																"src": "11081:3:11"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nativeSrc": "11073:4:11",
																	"nodeType": "YulIdentifier",
																	"src": "11073:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "11101:1:11",
																		"nodeType": "YulLiteral",
																		"src": "11101:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"name": "ptr",
																		"nativeSrc": "11104:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "11104:3:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "11094:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "11094:6:11"
																},
																"nativeSrc": "11094:14:11",
																"nodeType": "YulFunctionCall",
																"src": "11094:14:11"
															},
															"nativeSrc": "11094:14:11",
															"nodeType": "YulExpressionStatement",
															"src": "11094:14:11"
														},
														{
															"nativeSrc": "11117:26:11",
															"nodeType": "YulAssignment",
															"src": "11117:26:11",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "11135:1:11",
																		"nodeType": "YulLiteral",
																		"src": "11135:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "11138:4:11",
																		"nodeType": "YulLiteral",
																		"src": "11138:4:11",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nativeSrc": "11125:9:11",
																	"nodeType": "YulIdentifier",
																	"src": "11125:9:11"
																},
																"nativeSrc": "11125:18:11",
																"nodeType": "YulFunctionCall",
																"src": "11125:18:11"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nativeSrc": "11117:4:11",
																	"nodeType": "YulIdentifier",
																	"src": "11117:4:11"
																}
															]
														}
													]
												},
												"name": "array_dataslot_t_string_storage",
												"nativeSrc": "11009:141:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nativeSrc": "11050:3:11",
														"nodeType": "YulTypedName",
														"src": "11050:3:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "data",
														"nativeSrc": "11058:4:11",
														"nodeType": "YulTypedName",
														"src": "11058:4:11",
														"type": ""
													}
												],
												"src": "11009:141:11"
											},
											{
												"body": {
													"nativeSrc": "11200:49:11",
													"nodeType": "YulBlock",
													"src": "11200:49:11",
													"statements": [
														{
															"nativeSrc": "11210:33:11",
															"nodeType": "YulAssignment",
															"src": "11210:33:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "11228:5:11",
																				"nodeType": "YulIdentifier",
																				"src": "11228:5:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "11235:2:11",
																				"nodeType": "YulLiteral",
																				"src": "11235:2:11",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "11224:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "11224:3:11"
																		},
																		"nativeSrc": "11224:14:11",
																		"nodeType": "YulFunctionCall",
																		"src": "11224:14:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "11240:2:11",
																		"nodeType": "YulLiteral",
																		"src": "11240:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nativeSrc": "11220:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "11220:3:11"
																},
																"nativeSrc": "11220:23:11",
																"nodeType": "YulFunctionCall",
																"src": "11220:23:11"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nativeSrc": "11210:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "11210:6:11"
																}
															]
														}
													]
												},
												"name": "divide_by_32_ceil",
												"nativeSrc": "11156:93:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "11183:5:11",
														"nodeType": "YulTypedName",
														"src": "11183:5:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nativeSrc": "11193:6:11",
														"nodeType": "YulTypedName",
														"src": "11193:6:11",
														"type": ""
													}
												],
												"src": "11156:93:11"
											},
											{
												"body": {
													"nativeSrc": "11308:54:11",
													"nodeType": "YulBlock",
													"src": "11308:54:11",
													"statements": [
														{
															"nativeSrc": "11318:37:11",
															"nodeType": "YulAssignment",
															"src": "11318:37:11",
															"value": {
																"arguments": [
																	{
																		"name": "bits",
																		"nativeSrc": "11343:4:11",
																		"nodeType": "YulIdentifier",
																		"src": "11343:4:11"
																	},
																	{
																		"name": "value",
																		"nativeSrc": "11349:5:11",
																		"nodeType": "YulIdentifier",
																		"src": "11349:5:11"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nativeSrc": "11339:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "11339:3:11"
																},
																"nativeSrc": "11339:16:11",
																"nodeType": "YulFunctionCall",
																"src": "11339:16:11"
															},
															"variableNames": [
																{
																	"name": "newValue",
																	"nativeSrc": "11318:8:11",
																	"nodeType": "YulIdentifier",
																	"src": "11318:8:11"
																}
															]
														}
													]
												},
												"name": "shift_left_dynamic",
												"nativeSrc": "11255:107:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "bits",
														"nativeSrc": "11283:4:11",
														"nodeType": "YulTypedName",
														"src": "11283:4:11",
														"type": ""
													},
													{
														"name": "value",
														"nativeSrc": "11289:5:11",
														"nodeType": "YulTypedName",
														"src": "11289:5:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "newValue",
														"nativeSrc": "11299:8:11",
														"nodeType": "YulTypedName",
														"src": "11299:8:11",
														"type": ""
													}
												],
												"src": "11255:107:11"
											},
											{
												"body": {
													"nativeSrc": "11444:317:11",
													"nodeType": "YulBlock",
													"src": "11444:317:11",
													"statements": [
														{
															"nativeSrc": "11454:35:11",
															"nodeType": "YulVariableDeclaration",
															"src": "11454:35:11",
															"value": {
																"arguments": [
																	{
																		"name": "shiftBytes",
																		"nativeSrc": "11475:10:11",
																		"nodeType": "YulIdentifier",
																		"src": "11475:10:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "11487:1:11",
																		"nodeType": "YulLiteral",
																		"src": "11487:1:11",
																		"type": "",
																		"value": "8"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nativeSrc": "11471:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "11471:3:11"
																},
																"nativeSrc": "11471:18:11",
																"nodeType": "YulFunctionCall",
																"src": "11471:18:11"
															},
															"variables": [
																{
																	"name": "shiftBits",
																	"nativeSrc": "11458:9:11",
																	"nodeType": "YulTypedName",
																	"src": "11458:9:11",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "11498:109:11",
															"nodeType": "YulVariableDeclaration",
															"src": "11498:109:11",
															"value": {
																"arguments": [
																	{
																		"name": "shiftBits",
																		"nativeSrc": "11529:9:11",
																		"nodeType": "YulIdentifier",
																		"src": "11529:9:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "11540:66:11",
																		"nodeType": "YulLiteral",
																		"src": "11540:66:11",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "shift_left_dynamic",
																	"nativeSrc": "11510:18:11",
																	"nodeType": "YulIdentifier",
																	"src": "11510:18:11"
																},
																"nativeSrc": "11510:97:11",
																"nodeType": "YulFunctionCall",
																"src": "11510:97:11"
															},
															"variables": [
																{
																	"name": "mask",
																	"nativeSrc": "11502:4:11",
																	"nodeType": "YulTypedName",
																	"src": "11502:4:11",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "11616:51:11",
															"nodeType": "YulAssignment",
															"src": "11616:51:11",
															"value": {
																"arguments": [
																	{
																		"name": "shiftBits",
																		"nativeSrc": "11647:9:11",
																		"nodeType": "YulIdentifier",
																		"src": "11647:9:11"
																	},
																	{
																		"name": "toInsert",
																		"nativeSrc": "11658:8:11",
																		"nodeType": "YulIdentifier",
																		"src": "11658:8:11"
																	}
																],
																"functionName": {
																	"name": "shift_left_dynamic",
																	"nativeSrc": "11628:18:11",
																	"nodeType": "YulIdentifier",
																	"src": "11628:18:11"
																},
																"nativeSrc": "11628:39:11",
																"nodeType": "YulFunctionCall",
																"src": "11628:39:11"
															},
															"variableNames": [
																{
																	"name": "toInsert",
																	"nativeSrc": "11616:8:11",
																	"nodeType": "YulIdentifier",
																	"src": "11616:8:11"
																}
															]
														},
														{
															"nativeSrc": "11676:30:11",
															"nodeType": "YulAssignment",
															"src": "11676:30:11",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "11689:5:11",
																		"nodeType": "YulIdentifier",
																		"src": "11689:5:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "mask",
																				"nativeSrc": "11700:4:11",
																				"nodeType": "YulIdentifier",
																				"src": "11700:4:11"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nativeSrc": "11696:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "11696:3:11"
																		},
																		"nativeSrc": "11696:9:11",
																		"nodeType": "YulFunctionCall",
																		"src": "11696:9:11"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "11685:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "11685:3:11"
																},
																"nativeSrc": "11685:21:11",
																"nodeType": "YulFunctionCall",
																"src": "11685:21:11"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "11676:5:11",
																	"nodeType": "YulIdentifier",
																	"src": "11676:5:11"
																}
															]
														},
														{
															"nativeSrc": "11715:40:11",
															"nodeType": "YulAssignment",
															"src": "11715:40:11",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "11728:5:11",
																		"nodeType": "YulIdentifier",
																		"src": "11728:5:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "toInsert",
																				"nativeSrc": "11739:8:11",
																				"nodeType": "YulIdentifier",
																				"src": "11739:8:11"
																			},
																			{
																				"name": "mask",
																				"nativeSrc": "11749:4:11",
																				"nodeType": "YulIdentifier",
																				"src": "11749:4:11"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "11735:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "11735:3:11"
																		},
																		"nativeSrc": "11735:19:11",
																		"nodeType": "YulFunctionCall",
																		"src": "11735:19:11"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nativeSrc": "11725:2:11",
																	"nodeType": "YulIdentifier",
																	"src": "11725:2:11"
																},
																"nativeSrc": "11725:30:11",
																"nodeType": "YulFunctionCall",
																"src": "11725:30:11"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nativeSrc": "11715:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "11715:6:11"
																}
															]
														}
													]
												},
												"name": "update_byte_slice_dynamic32",
												"nativeSrc": "11368:393:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "11405:5:11",
														"nodeType": "YulTypedName",
														"src": "11405:5:11",
														"type": ""
													},
													{
														"name": "shiftBytes",
														"nativeSrc": "11412:10:11",
														"nodeType": "YulTypedName",
														"src": "11412:10:11",
														"type": ""
													},
													{
														"name": "toInsert",
														"nativeSrc": "11424:8:11",
														"nodeType": "YulTypedName",
														"src": "11424:8:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nativeSrc": "11437:6:11",
														"nodeType": "YulTypedName",
														"src": "11437:6:11",
														"type": ""
													}
												],
												"src": "11368:393:11"
											},
											{
												"body": {
													"nativeSrc": "11827:82:11",
													"nodeType": "YulBlock",
													"src": "11827:82:11",
													"statements": [
														{
															"nativeSrc": "11837:66:11",
															"nodeType": "YulAssignment",
															"src": "11837:66:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "11895:5:11",
																						"nodeType": "YulIdentifier",
																						"src": "11895:5:11"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nativeSrc": "11877:17:11",
																					"nodeType": "YulIdentifier",
																					"src": "11877:17:11"
																				},
																				"nativeSrc": "11877:24:11",
																				"nodeType": "YulFunctionCall",
																				"src": "11877:24:11"
																			}
																		],
																		"functionName": {
																			"name": "identity",
																			"nativeSrc": "11868:8:11",
																			"nodeType": "YulIdentifier",
																			"src": "11868:8:11"
																		},
																		"nativeSrc": "11868:34:11",
																		"nodeType": "YulFunctionCall",
																		"src": "11868:34:11"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "11850:17:11",
																	"nodeType": "YulIdentifier",
																	"src": "11850:17:11"
																},
																"nativeSrc": "11850:53:11",
																"nodeType": "YulFunctionCall",
																"src": "11850:53:11"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nativeSrc": "11837:9:11",
																	"nodeType": "YulIdentifier",
																	"src": "11837:9:11"
																}
															]
														}
													]
												},
												"name": "convert_t_uint256_to_t_uint256",
												"nativeSrc": "11767:142:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "11807:5:11",
														"nodeType": "YulTypedName",
														"src": "11807:5:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nativeSrc": "11817:9:11",
														"nodeType": "YulTypedName",
														"src": "11817:9:11",
														"type": ""
													}
												],
												"src": "11767:142:11"
											},
											{
												"body": {
													"nativeSrc": "11962:28:11",
													"nodeType": "YulBlock",
													"src": "11962:28:11",
													"statements": [
														{
															"nativeSrc": "11972:12:11",
															"nodeType": "YulAssignment",
															"src": "11972:12:11",
															"value": {
																"name": "value",
																"nativeSrc": "11979:5:11",
																"nodeType": "YulIdentifier",
																"src": "11979:5:11"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nativeSrc": "11972:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "11972:3:11"
																}
															]
														}
													]
												},
												"name": "prepare_store_t_uint256",
												"nativeSrc": "11915:75:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "11948:5:11",
														"nodeType": "YulTypedName",
														"src": "11948:5:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nativeSrc": "11958:3:11",
														"nodeType": "YulTypedName",
														"src": "11958:3:11",
														"type": ""
													}
												],
												"src": "11915:75:11"
											},
											{
												"body": {
													"nativeSrc": "12072:193:11",
													"nodeType": "YulBlock",
													"src": "12072:193:11",
													"statements": [
														{
															"nativeSrc": "12082:63:11",
															"nodeType": "YulVariableDeclaration",
															"src": "12082:63:11",
															"value": {
																"arguments": [
																	{
																		"name": "value_0",
																		"nativeSrc": "12137:7:11",
																		"nodeType": "YulIdentifier",
																		"src": "12137:7:11"
																	}
																],
																"functionName": {
																	"name": "convert_t_uint256_to_t_uint256",
																	"nativeSrc": "12106:30:11",
																	"nodeType": "YulIdentifier",
																	"src": "12106:30:11"
																},
																"nativeSrc": "12106:39:11",
																"nodeType": "YulFunctionCall",
																"src": "12106:39:11"
															},
															"variables": [
																{
																	"name": "convertedValue_0",
																	"nativeSrc": "12086:16:11",
																	"nodeType": "YulTypedName",
																	"src": "12086:16:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "12161:4:11",
																		"nodeType": "YulIdentifier",
																		"src": "12161:4:11"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "slot",
																						"nativeSrc": "12201:4:11",
																						"nodeType": "YulIdentifier",
																						"src": "12201:4:11"
																					}
																				],
																				"functionName": {
																					"name": "sload",
																					"nativeSrc": "12195:5:11",
																					"nodeType": "YulIdentifier",
																					"src": "12195:5:11"
																				},
																				"nativeSrc": "12195:11:11",
																				"nodeType": "YulFunctionCall",
																				"src": "12195:11:11"
																			},
																			{
																				"name": "offset",
																				"nativeSrc": "12208:6:11",
																				"nodeType": "YulIdentifier",
																				"src": "12208:6:11"
																			},
																			{
																				"arguments": [
																					{
																						"name": "convertedValue_0",
																						"nativeSrc": "12240:16:11",
																						"nodeType": "YulIdentifier",
																						"src": "12240:16:11"
																					}
																				],
																				"functionName": {
																					"name": "prepare_store_t_uint256",
																					"nativeSrc": "12216:23:11",
																					"nodeType": "YulIdentifier",
																					"src": "12216:23:11"
																				},
																				"nativeSrc": "12216:41:11",
																				"nodeType": "YulFunctionCall",
																				"src": "12216:41:11"
																			}
																		],
																		"functionName": {
																			"name": "update_byte_slice_dynamic32",
																			"nativeSrc": "12167:27:11",
																			"nodeType": "YulIdentifier",
																			"src": "12167:27:11"
																		},
																		"nativeSrc": "12167:91:11",
																		"nodeType": "YulFunctionCall",
																		"src": "12167:91:11"
																	}
																],
																"functionName": {
																	"name": "sstore",
																	"nativeSrc": "12154:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "12154:6:11"
																},
																"nativeSrc": "12154:105:11",
																"nodeType": "YulFunctionCall",
																"src": "12154:105:11"
															},
															"nativeSrc": "12154:105:11",
															"nodeType": "YulExpressionStatement",
															"src": "12154:105:11"
														}
													]
												},
												"name": "update_storage_value_t_uint256_to_t_uint256",
												"nativeSrc": "11996:269:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nativeSrc": "12049:4:11",
														"nodeType": "YulTypedName",
														"src": "12049:4:11",
														"type": ""
													},
													{
														"name": "offset",
														"nativeSrc": "12055:6:11",
														"nodeType": "YulTypedName",
														"src": "12055:6:11",
														"type": ""
													},
													{
														"name": "value_0",
														"nativeSrc": "12063:7:11",
														"nodeType": "YulTypedName",
														"src": "12063:7:11",
														"type": ""
													}
												],
												"src": "11996:269:11"
											},
											{
												"body": {
													"nativeSrc": "12320:24:11",
													"nodeType": "YulBlock",
													"src": "12320:24:11",
													"statements": [
														{
															"nativeSrc": "12330:8:11",
															"nodeType": "YulAssignment",
															"src": "12330:8:11",
															"value": {
																"kind": "number",
																"nativeSrc": "12337:1:11",
																"nodeType": "YulLiteral",
																"src": "12337:1:11",
																"type": "",
																"value": "0"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nativeSrc": "12330:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "12330:3:11"
																}
															]
														}
													]
												},
												"name": "zero_value_for_split_t_uint256",
												"nativeSrc": "12271:73:11",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "ret",
														"nativeSrc": "12316:3:11",
														"nodeType": "YulTypedName",
														"src": "12316:3:11",
														"type": ""
													}
												],
												"src": "12271:73:11"
											},
											{
												"body": {
													"nativeSrc": "12403:136:11",
													"nodeType": "YulBlock",
													"src": "12403:136:11",
													"statements": [
														{
															"nativeSrc": "12413:46:11",
															"nodeType": "YulVariableDeclaration",
															"src": "12413:46:11",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "zero_value_for_split_t_uint256",
																	"nativeSrc": "12427:30:11",
																	"nodeType": "YulIdentifier",
																	"src": "12427:30:11"
																},
																"nativeSrc": "12427:32:11",
																"nodeType": "YulFunctionCall",
																"src": "12427:32:11"
															},
															"variables": [
																{
																	"name": "zero_0",
																	"nativeSrc": "12417:6:11",
																	"nodeType": "YulTypedName",
																	"src": "12417:6:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "12512:4:11",
																		"nodeType": "YulIdentifier",
																		"src": "12512:4:11"
																	},
																	{
																		"name": "offset",
																		"nativeSrc": "12518:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "12518:6:11"
																	},
																	{
																		"name": "zero_0",
																		"nativeSrc": "12526:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "12526:6:11"
																	}
																],
																"functionName": {
																	"name": "update_storage_value_t_uint256_to_t_uint256",
																	"nativeSrc": "12468:43:11",
																	"nodeType": "YulIdentifier",
																	"src": "12468:43:11"
																},
																"nativeSrc": "12468:65:11",
																"nodeType": "YulFunctionCall",
																"src": "12468:65:11"
															},
															"nativeSrc": "12468:65:11",
															"nodeType": "YulExpressionStatement",
															"src": "12468:65:11"
														}
													]
												},
												"name": "storage_set_to_zero_t_uint256",
												"nativeSrc": "12350:189:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nativeSrc": "12389:4:11",
														"nodeType": "YulTypedName",
														"src": "12389:4:11",
														"type": ""
													},
													{
														"name": "offset",
														"nativeSrc": "12395:6:11",
														"nodeType": "YulTypedName",
														"src": "12395:6:11",
														"type": ""
													}
												],
												"src": "12350:189:11"
											},
											{
												"body": {
													"nativeSrc": "12595:136:11",
													"nodeType": "YulBlock",
													"src": "12595:136:11",
													"statements": [
														{
															"body": {
																"nativeSrc": "12662:63:11",
																"nodeType": "YulBlock",
																"src": "12662:63:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "start",
																					"nativeSrc": "12706:5:11",
																					"nodeType": "YulIdentifier",
																					"src": "12706:5:11"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "12713:1:11",
																					"nodeType": "YulLiteral",
																					"src": "12713:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "storage_set_to_zero_t_uint256",
																				"nativeSrc": "12676:29:11",
																				"nodeType": "YulIdentifier",
																				"src": "12676:29:11"
																			},
																			"nativeSrc": "12676:39:11",
																			"nodeType": "YulFunctionCall",
																			"src": "12676:39:11"
																		},
																		"nativeSrc": "12676:39:11",
																		"nodeType": "YulExpressionStatement",
																		"src": "12676:39:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "start",
																		"nativeSrc": "12615:5:11",
																		"nodeType": "YulIdentifier",
																		"src": "12615:5:11"
																	},
																	{
																		"name": "end",
																		"nativeSrc": "12622:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "12622:3:11"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nativeSrc": "12612:2:11",
																	"nodeType": "YulIdentifier",
																	"src": "12612:2:11"
																},
																"nativeSrc": "12612:14:11",
																"nodeType": "YulFunctionCall",
																"src": "12612:14:11"
															},
															"nativeSrc": "12605:120:11",
															"nodeType": "YulForLoop",
															"post": {
																"nativeSrc": "12627:26:11",
																"nodeType": "YulBlock",
																"src": "12627:26:11",
																"statements": [
																	{
																		"nativeSrc": "12629:22:11",
																		"nodeType": "YulAssignment",
																		"src": "12629:22:11",
																		"value": {
																			"arguments": [
																				{
																					"name": "start",
																					"nativeSrc": "12642:5:11",
																					"nodeType": "YulIdentifier",
																					"src": "12642:5:11"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "12649:1:11",
																					"nodeType": "YulLiteral",
																					"src": "12649:1:11",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "12638:3:11",
																				"nodeType": "YulIdentifier",
																				"src": "12638:3:11"
																			},
																			"nativeSrc": "12638:13:11",
																			"nodeType": "YulFunctionCall",
																			"src": "12638:13:11"
																		},
																		"variableNames": [
																			{
																				"name": "start",
																				"nativeSrc": "12629:5:11",
																				"nodeType": "YulIdentifier",
																				"src": "12629:5:11"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nativeSrc": "12609:2:11",
																"nodeType": "YulBlock",
																"src": "12609:2:11",
																"statements": []
															},
															"src": "12605:120:11"
														}
													]
												},
												"name": "clear_storage_range_t_bytes1",
												"nativeSrc": "12545:186:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "start",
														"nativeSrc": "12583:5:11",
														"nodeType": "YulTypedName",
														"src": "12583:5:11",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "12590:3:11",
														"nodeType": "YulTypedName",
														"src": "12590:3:11",
														"type": ""
													}
												],
												"src": "12545:186:11"
											},
											{
												"body": {
													"nativeSrc": "12816:464:11",
													"nodeType": "YulBlock",
													"src": "12816:464:11",
													"statements": [
														{
															"body": {
																"nativeSrc": "12842:431:11",
																"nodeType": "YulBlock",
																"src": "12842:431:11",
																"statements": [
																	{
																		"nativeSrc": "12856:54:11",
																		"nodeType": "YulVariableDeclaration",
																		"src": "12856:54:11",
																		"value": {
																			"arguments": [
																				{
																					"name": "array",
																					"nativeSrc": "12904:5:11",
																					"nodeType": "YulIdentifier",
																					"src": "12904:5:11"
																				}
																			],
																			"functionName": {
																				"name": "array_dataslot_t_string_storage",
																				"nativeSrc": "12872:31:11",
																				"nodeType": "YulIdentifier",
																				"src": "12872:31:11"
																			},
																			"nativeSrc": "12872:38:11",
																			"nodeType": "YulFunctionCall",
																			"src": "12872:38:11"
																		},
																		"variables": [
																			{
																				"name": "dataArea",
																				"nativeSrc": "12860:8:11",
																				"nodeType": "YulTypedName",
																				"src": "12860:8:11",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nativeSrc": "12923:63:11",
																		"nodeType": "YulVariableDeclaration",
																		"src": "12923:63:11",
																		"value": {
																			"arguments": [
																				{
																					"name": "dataArea",
																					"nativeSrc": "12946:8:11",
																					"nodeType": "YulIdentifier",
																					"src": "12946:8:11"
																				},
																				{
																					"arguments": [
																						{
																							"name": "startIndex",
																							"nativeSrc": "12974:10:11",
																							"nodeType": "YulIdentifier",
																							"src": "12974:10:11"
																						}
																					],
																					"functionName": {
																						"name": "divide_by_32_ceil",
																						"nativeSrc": "12956:17:11",
																						"nodeType": "YulIdentifier",
																						"src": "12956:17:11"
																					},
																					"nativeSrc": "12956:29:11",
																					"nodeType": "YulFunctionCall",
																					"src": "12956:29:11"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "12942:3:11",
																				"nodeType": "YulIdentifier",
																				"src": "12942:3:11"
																			},
																			"nativeSrc": "12942:44:11",
																			"nodeType": "YulFunctionCall",
																			"src": "12942:44:11"
																		},
																		"variables": [
																			{
																				"name": "deleteStart",
																				"nativeSrc": "12927:11:11",
																				"nodeType": "YulTypedName",
																				"src": "12927:11:11",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nativeSrc": "13143:27:11",
																			"nodeType": "YulBlock",
																			"src": "13143:27:11",
																			"statements": [
																				{
																					"nativeSrc": "13145:23:11",
																					"nodeType": "YulAssignment",
																					"src": "13145:23:11",
																					"value": {
																						"name": "dataArea",
																						"nativeSrc": "13160:8:11",
																						"nodeType": "YulIdentifier",
																						"src": "13160:8:11"
																					},
																					"variableNames": [
																						{
																							"name": "deleteStart",
																							"nativeSrc": "13145:11:11",
																							"nodeType": "YulIdentifier",
																							"src": "13145:11:11"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "startIndex",
																					"nativeSrc": "13127:10:11",
																					"nodeType": "YulIdentifier",
																					"src": "13127:10:11"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "13139:2:11",
																					"nodeType": "YulLiteral",
																					"src": "13139:2:11",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nativeSrc": "13124:2:11",
																				"nodeType": "YulIdentifier",
																				"src": "13124:2:11"
																			},
																			"nativeSrc": "13124:18:11",
																			"nodeType": "YulFunctionCall",
																			"src": "13124:18:11"
																		},
																		"nativeSrc": "13121:49:11",
																		"nodeType": "YulIf",
																		"src": "13121:49:11"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "deleteStart",
																					"nativeSrc": "13212:11:11",
																					"nodeType": "YulIdentifier",
																					"src": "13212:11:11"
																				},
																				{
																					"arguments": [
																						{
																							"name": "dataArea",
																							"nativeSrc": "13229:8:11",
																							"nodeType": "YulIdentifier",
																							"src": "13229:8:11"
																						},
																						{
																							"arguments": [
																								{
																									"name": "len",
																									"nativeSrc": "13257:3:11",
																									"nodeType": "YulIdentifier",
																									"src": "13257:3:11"
																								}
																							],
																							"functionName": {
																								"name": "divide_by_32_ceil",
																								"nativeSrc": "13239:17:11",
																								"nodeType": "YulIdentifier",
																								"src": "13239:17:11"
																							},
																							"nativeSrc": "13239:22:11",
																							"nodeType": "YulFunctionCall",
																							"src": "13239:22:11"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "13225:3:11",
																						"nodeType": "YulIdentifier",
																						"src": "13225:3:11"
																					},
																					"nativeSrc": "13225:37:11",
																					"nodeType": "YulFunctionCall",
																					"src": "13225:37:11"
																				}
																			],
																			"functionName": {
																				"name": "clear_storage_range_t_bytes1",
																				"nativeSrc": "13183:28:11",
																				"nodeType": "YulIdentifier",
																				"src": "13183:28:11"
																			},
																			"nativeSrc": "13183:80:11",
																			"nodeType": "YulFunctionCall",
																			"src": "13183:80:11"
																		},
																		"nativeSrc": "13183:80:11",
																		"nodeType": "YulExpressionStatement",
																		"src": "13183:80:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "len",
																		"nativeSrc": "12833:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "12833:3:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "12838:2:11",
																		"nodeType": "YulLiteral",
																		"src": "12838:2:11",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "12830:2:11",
																	"nodeType": "YulIdentifier",
																	"src": "12830:2:11"
																},
																"nativeSrc": "12830:11:11",
																"nodeType": "YulFunctionCall",
																"src": "12830:11:11"
															},
															"nativeSrc": "12827:446:11",
															"nodeType": "YulIf",
															"src": "12827:446:11"
														}
													]
												},
												"name": "clean_up_bytearray_end_slots_t_string_storage",
												"nativeSrc": "12737:543:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "array",
														"nativeSrc": "12792:5:11",
														"nodeType": "YulTypedName",
														"src": "12792:5:11",
														"type": ""
													},
													{
														"name": "len",
														"nativeSrc": "12799:3:11",
														"nodeType": "YulTypedName",
														"src": "12799:3:11",
														"type": ""
													},
													{
														"name": "startIndex",
														"nativeSrc": "12804:10:11",
														"nodeType": "YulTypedName",
														"src": "12804:10:11",
														"type": ""
													}
												],
												"src": "12737:543:11"
											},
											{
												"body": {
													"nativeSrc": "13349:54:11",
													"nodeType": "YulBlock",
													"src": "13349:54:11",
													"statements": [
														{
															"nativeSrc": "13359:37:11",
															"nodeType": "YulAssignment",
															"src": "13359:37:11",
															"value": {
																"arguments": [
																	{
																		"name": "bits",
																		"nativeSrc": "13384:4:11",
																		"nodeType": "YulIdentifier",
																		"src": "13384:4:11"
																	},
																	{
																		"name": "value",
																		"nativeSrc": "13390:5:11",
																		"nodeType": "YulIdentifier",
																		"src": "13390:5:11"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nativeSrc": "13380:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "13380:3:11"
																},
																"nativeSrc": "13380:16:11",
																"nodeType": "YulFunctionCall",
																"src": "13380:16:11"
															},
															"variableNames": [
																{
																	"name": "newValue",
																	"nativeSrc": "13359:8:11",
																	"nodeType": "YulIdentifier",
																	"src": "13359:8:11"
																}
															]
														}
													]
												},
												"name": "shift_right_unsigned_dynamic",
												"nativeSrc": "13286:117:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "bits",
														"nativeSrc": "13324:4:11",
														"nodeType": "YulTypedName",
														"src": "13324:4:11",
														"type": ""
													},
													{
														"name": "value",
														"nativeSrc": "13330:5:11",
														"nodeType": "YulTypedName",
														"src": "13330:5:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "newValue",
														"nativeSrc": "13340:8:11",
														"nodeType": "YulTypedName",
														"src": "13340:8:11",
														"type": ""
													}
												],
												"src": "13286:117:11"
											},
											{
												"body": {
													"nativeSrc": "13460:118:11",
													"nodeType": "YulBlock",
													"src": "13460:118:11",
													"statements": [
														{
															"nativeSrc": "13470:68:11",
															"nodeType": "YulVariableDeclaration",
															"src": "13470:68:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "13519:1:11",
																						"nodeType": "YulLiteral",
																						"src": "13519:1:11",
																						"type": "",
																						"value": "8"
																					},
																					{
																						"name": "bytes",
																						"nativeSrc": "13522:5:11",
																						"nodeType": "YulIdentifier",
																						"src": "13522:5:11"
																					}
																				],
																				"functionName": {
																					"name": "mul",
																					"nativeSrc": "13515:3:11",
																					"nodeType": "YulIdentifier",
																					"src": "13515:3:11"
																				},
																				"nativeSrc": "13515:13:11",
																				"nodeType": "YulFunctionCall",
																				"src": "13515:13:11"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "13534:1:11",
																						"nodeType": "YulLiteral",
																						"src": "13534:1:11",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nativeSrc": "13530:3:11",
																					"nodeType": "YulIdentifier",
																					"src": "13530:3:11"
																				},
																				"nativeSrc": "13530:6:11",
																				"nodeType": "YulFunctionCall",
																				"src": "13530:6:11"
																			}
																		],
																		"functionName": {
																			"name": "shift_right_unsigned_dynamic",
																			"nativeSrc": "13486:28:11",
																			"nodeType": "YulIdentifier",
																			"src": "13486:28:11"
																		},
																		"nativeSrc": "13486:51:11",
																		"nodeType": "YulFunctionCall",
																		"src": "13486:51:11"
																	}
																],
																"functionName": {
																	"name": "not",
																	"nativeSrc": "13482:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "13482:3:11"
																},
																"nativeSrc": "13482:56:11",
																"nodeType": "YulFunctionCall",
																"src": "13482:56:11"
															},
															"variables": [
																{
																	"name": "mask",
																	"nativeSrc": "13474:4:11",
																	"nodeType": "YulTypedName",
																	"src": "13474:4:11",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "13547:25:11",
															"nodeType": "YulAssignment",
															"src": "13547:25:11",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "13561:4:11",
																		"nodeType": "YulIdentifier",
																		"src": "13561:4:11"
																	},
																	{
																		"name": "mask",
																		"nativeSrc": "13567:4:11",
																		"nodeType": "YulIdentifier",
																		"src": "13567:4:11"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "13557:3:11",
																	"nodeType": "YulIdentifier",
																	"src": "13557:3:11"
																},
																"nativeSrc": "13557:15:11",
																"nodeType": "YulFunctionCall",
																"src": "13557:15:11"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nativeSrc": "13547:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "13547:6:11"
																}
															]
														}
													]
												},
												"name": "mask_bytes_dynamic",
												"nativeSrc": "13409:169:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "13437:4:11",
														"nodeType": "YulTypedName",
														"src": "13437:4:11",
														"type": ""
													},
													{
														"name": "bytes",
														"nativeSrc": "13443:5:11",
														"nodeType": "YulTypedName",
														"src": "13443:5:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nativeSrc": "13453:6:11",
														"nodeType": "YulTypedName",
														"src": "13453:6:11",
														"type": ""
													}
												],
												"src": "13409:169:11"
											},
											{
												"body": {
													"nativeSrc": "13664:214:11",
													"nodeType": "YulBlock",
													"src": "13664:214:11",
													"statements": [
														{
															"nativeSrc": "13797:37:11",
															"nodeType": "YulAssignment",
															"src": "13797:37:11",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "13824:4:11",
																		"nodeType": "YulIdentifier",
																		"src": "13824:4:11"
																	},
																	{
																		"name": "len",
																		"nativeSrc": "13830:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "13830:3:11"
																	}
																],
																"functionName": {
																	"name": "mask_bytes_dynamic",
																	"nativeSrc": "13805:18:11",
																	"nodeType": "YulIdentifier",
																	"src": "13805:18:11"
																},
																"nativeSrc": "13805:29:11",
																"nodeType": "YulFunctionCall",
																"src": "13805:29:11"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nativeSrc": "13797:4:11",
																	"nodeType": "YulIdentifier",
																	"src": "13797:4:11"
																}
															]
														},
														{
															"nativeSrc": "13843:29:11",
															"nodeType": "YulAssignment",
															"src": "13843:29:11",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "13854:4:11",
																		"nodeType": "YulIdentifier",
																		"src": "13854:4:11"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "13864:1:11",
																				"nodeType": "YulLiteral",
																				"src": "13864:1:11",
																				"type": "",
																				"value": "2"
																			},
																			{
																				"name": "len",
																				"nativeSrc": "13867:3:11",
																				"nodeType": "YulIdentifier",
																				"src": "13867:3:11"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nativeSrc": "13860:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "13860:3:11"
																		},
																		"nativeSrc": "13860:11:11",
																		"nodeType": "YulFunctionCall",
																		"src": "13860:11:11"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nativeSrc": "13851:2:11",
																	"nodeType": "YulIdentifier",
																	"src": "13851:2:11"
																},
																"nativeSrc": "13851:21:11",
																"nodeType": "YulFunctionCall",
																"src": "13851:21:11"
															},
															"variableNames": [
																{
																	"name": "used",
																	"nativeSrc": "13843:4:11",
																	"nodeType": "YulIdentifier",
																	"src": "13843:4:11"
																}
															]
														}
													]
												},
												"name": "extract_used_part_and_set_length_of_short_byte_array",
												"nativeSrc": "13583:295:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "13645:4:11",
														"nodeType": "YulTypedName",
														"src": "13645:4:11",
														"type": ""
													},
													{
														"name": "len",
														"nativeSrc": "13651:3:11",
														"nodeType": "YulTypedName",
														"src": "13651:3:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "used",
														"nativeSrc": "13659:4:11",
														"nodeType": "YulTypedName",
														"src": "13659:4:11",
														"type": ""
													}
												],
												"src": "13583:295:11"
											},
											{
												"body": {
													"nativeSrc": "13975:1303:11",
													"nodeType": "YulBlock",
													"src": "13975:1303:11",
													"statements": [
														{
															"nativeSrc": "13986:51:11",
															"nodeType": "YulVariableDeclaration",
															"src": "13986:51:11",
															"value": {
																"arguments": [
																	{
																		"name": "src",
																		"nativeSrc": "14033:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "14033:3:11"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nativeSrc": "14000:32:11",
																	"nodeType": "YulIdentifier",
																	"src": "14000:32:11"
																},
																"nativeSrc": "14000:37:11",
																"nodeType": "YulFunctionCall",
																"src": "14000:37:11"
															},
															"variables": [
																{
																	"name": "newLen",
																	"nativeSrc": "13990:6:11",
																	"nodeType": "YulTypedName",
																	"src": "13990:6:11",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "14122:22:11",
																"nodeType": "YulBlock",
																"src": "14122:22:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nativeSrc": "14124:16:11",
																				"nodeType": "YulIdentifier",
																				"src": "14124:16:11"
																			},
																			"nativeSrc": "14124:18:11",
																			"nodeType": "YulFunctionCall",
																			"src": "14124:18:11"
																		},
																		"nativeSrc": "14124:18:11",
																		"nodeType": "YulExpressionStatement",
																		"src": "14124:18:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nativeSrc": "14094:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "14094:6:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "14102:18:11",
																		"nodeType": "YulLiteral",
																		"src": "14102:18:11",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "14091:2:11",
																	"nodeType": "YulIdentifier",
																	"src": "14091:2:11"
																},
																"nativeSrc": "14091:30:11",
																"nodeType": "YulFunctionCall",
																"src": "14091:30:11"
															},
															"nativeSrc": "14088:56:11",
															"nodeType": "YulIf",
															"src": "14088:56:11"
														},
														{
															"nativeSrc": "14154:52:11",
															"nodeType": "YulVariableDeclaration",
															"src": "14154:52:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "slot",
																				"nativeSrc": "14200:4:11",
																				"nodeType": "YulIdentifier",
																				"src": "14200:4:11"
																			}
																		],
																		"functionName": {
																			"name": "sload",
																			"nativeSrc": "14194:5:11",
																			"nodeType": "YulIdentifier",
																			"src": "14194:5:11"
																		},
																		"nativeSrc": "14194:11:11",
																		"nodeType": "YulFunctionCall",
																		"src": "14194:11:11"
																	}
																],
																"functionName": {
																	"name": "extract_byte_array_length",
																	"nativeSrc": "14168:25:11",
																	"nodeType": "YulIdentifier",
																	"src": "14168:25:11"
																},
																"nativeSrc": "14168:38:11",
																"nodeType": "YulFunctionCall",
																"src": "14168:38:11"
															},
															"variables": [
																{
																	"name": "oldLen",
																	"nativeSrc": "14158:6:11",
																	"nodeType": "YulTypedName",
																	"src": "14158:6:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "14299:4:11",
																		"nodeType": "YulIdentifier",
																		"src": "14299:4:11"
																	},
																	{
																		"name": "oldLen",
																		"nativeSrc": "14305:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "14305:6:11"
																	},
																	{
																		"name": "newLen",
																		"nativeSrc": "14313:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "14313:6:11"
																	}
																],
																"functionName": {
																	"name": "clean_up_bytearray_end_slots_t_string_storage",
																	"nativeSrc": "14253:45:11",
																	"nodeType": "YulIdentifier",
																	"src": "14253:45:11"
																},
																"nativeSrc": "14253:67:11",
																"nodeType": "YulFunctionCall",
																"src": "14253:67:11"
															},
															"nativeSrc": "14253:67:11",
															"nodeType": "YulExpressionStatement",
															"src": "14253:67:11"
														},
														{
															"nativeSrc": "14330:18:11",
															"nodeType": "YulVariableDeclaration",
															"src": "14330:18:11",
															"value": {
																"kind": "number",
																"nativeSrc": "14347:1:11",
																"nodeType": "YulLiteral",
																"src": "14347:1:11",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "srcOffset",
																	"nativeSrc": "14334:9:11",
																	"nodeType": "YulTypedName",
																	"src": "14334:9:11",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "14358:17:11",
															"nodeType": "YulAssignment",
															"src": "14358:17:11",
															"value": {
																"kind": "number",
																"nativeSrc": "14371:4:11",
																"nodeType": "YulLiteral",
																"src": "14371:4:11",
																"type": "",
																"value": "0x20"
															},
															"variableNames": [
																{
																	"name": "srcOffset",
																	"nativeSrc": "14358:9:11",
																	"nodeType": "YulIdentifier",
																	"src": "14358:9:11"
																}
															]
														},
														{
															"cases": [
																{
																	"body": {
																		"nativeSrc": "14422:611:11",
																		"nodeType": "YulBlock",
																		"src": "14422:611:11",
																		"statements": [
																			{
																				"nativeSrc": "14436:37:11",
																				"nodeType": "YulVariableDeclaration",
																				"src": "14436:37:11",
																				"value": {
																					"arguments": [
																						{
																							"name": "newLen",
																							"nativeSrc": "14455:6:11",
																							"nodeType": "YulIdentifier",
																							"src": "14455:6:11"
																						},
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nativeSrc": "14467:4:11",
																									"nodeType": "YulLiteral",
																									"src": "14467:4:11",
																									"type": "",
																									"value": "0x1f"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nativeSrc": "14463:3:11",
																								"nodeType": "YulIdentifier",
																								"src": "14463:3:11"
																							},
																							"nativeSrc": "14463:9:11",
																							"nodeType": "YulFunctionCall",
																							"src": "14463:9:11"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nativeSrc": "14451:3:11",
																						"nodeType": "YulIdentifier",
																						"src": "14451:3:11"
																					},
																					"nativeSrc": "14451:22:11",
																					"nodeType": "YulFunctionCall",
																					"src": "14451:22:11"
																				},
																				"variables": [
																					{
																						"name": "loopEnd",
																						"nativeSrc": "14440:7:11",
																						"nodeType": "YulTypedName",
																						"src": "14440:7:11",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nativeSrc": "14487:51:11",
																				"nodeType": "YulVariableDeclaration",
																				"src": "14487:51:11",
																				"value": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "14533:4:11",
																							"nodeType": "YulIdentifier",
																							"src": "14533:4:11"
																						}
																					],
																					"functionName": {
																						"name": "array_dataslot_t_string_storage",
																						"nativeSrc": "14501:31:11",
																						"nodeType": "YulIdentifier",
																						"src": "14501:31:11"
																					},
																					"nativeSrc": "14501:37:11",
																					"nodeType": "YulFunctionCall",
																					"src": "14501:37:11"
																				},
																				"variables": [
																					{
																						"name": "dstPtr",
																						"nativeSrc": "14491:6:11",
																						"nodeType": "YulTypedName",
																						"src": "14491:6:11",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nativeSrc": "14551:10:11",
																				"nodeType": "YulVariableDeclaration",
																				"src": "14551:10:11",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "14560:1:11",
																					"nodeType": "YulLiteral",
																					"src": "14560:1:11",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "i",
																						"nativeSrc": "14555:1:11",
																						"nodeType": "YulTypedName",
																						"src": "14555:1:11",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nativeSrc": "14619:163:11",
																					"nodeType": "YulBlock",
																					"src": "14619:163:11",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "14644:6:11",
																										"nodeType": "YulIdentifier",
																										"src": "14644:6:11"
																									},
																									{
																										"arguments": [
																											{
																												"arguments": [
																													{
																														"name": "src",
																														"nativeSrc": "14662:3:11",
																														"nodeType": "YulIdentifier",
																														"src": "14662:3:11"
																													},
																													{
																														"name": "srcOffset",
																														"nativeSrc": "14667:9:11",
																														"nodeType": "YulIdentifier",
																														"src": "14667:9:11"
																													}
																												],
																												"functionName": {
																													"name": "add",
																													"nativeSrc": "14658:3:11",
																													"nodeType": "YulIdentifier",
																													"src": "14658:3:11"
																												},
																												"nativeSrc": "14658:19:11",
																												"nodeType": "YulFunctionCall",
																												"src": "14658:19:11"
																											}
																										],
																										"functionName": {
																											"name": "mload",
																											"nativeSrc": "14652:5:11",
																											"nodeType": "YulIdentifier",
																											"src": "14652:5:11"
																										},
																										"nativeSrc": "14652:26:11",
																										"nodeType": "YulFunctionCall",
																										"src": "14652:26:11"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nativeSrc": "14637:6:11",
																									"nodeType": "YulIdentifier",
																									"src": "14637:6:11"
																								},
																								"nativeSrc": "14637:42:11",
																								"nodeType": "YulFunctionCall",
																								"src": "14637:42:11"
																							},
																							"nativeSrc": "14637:42:11",
																							"nodeType": "YulExpressionStatement",
																							"src": "14637:42:11"
																						},
																						{
																							"nativeSrc": "14696:24:11",
																							"nodeType": "YulAssignment",
																							"src": "14696:24:11",
																							"value": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "14710:6:11",
																										"nodeType": "YulIdentifier",
																										"src": "14710:6:11"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "14718:1:11",
																										"nodeType": "YulLiteral",
																										"src": "14718:1:11",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "14706:3:11",
																									"nodeType": "YulIdentifier",
																									"src": "14706:3:11"
																								},
																								"nativeSrc": "14706:14:11",
																								"nodeType": "YulFunctionCall",
																								"src": "14706:14:11"
																							},
																							"variableNames": [
																								{
																									"name": "dstPtr",
																									"nativeSrc": "14696:6:11",
																									"nodeType": "YulIdentifier",
																									"src": "14696:6:11"
																								}
																							]
																						},
																						{
																							"nativeSrc": "14737:31:11",
																							"nodeType": "YulAssignment",
																							"src": "14737:31:11",
																							"value": {
																								"arguments": [
																									{
																										"name": "srcOffset",
																										"nativeSrc": "14754:9:11",
																										"nodeType": "YulIdentifier",
																										"src": "14754:9:11"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "14765:2:11",
																										"nodeType": "YulLiteral",
																										"src": "14765:2:11",
																										"type": "",
																										"value": "32"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "14750:3:11",
																									"nodeType": "YulIdentifier",
																									"src": "14750:3:11"
																								},
																								"nativeSrc": "14750:18:11",
																								"nodeType": "YulFunctionCall",
																								"src": "14750:18:11"
																							},
																							"variableNames": [
																								{
																									"name": "srcOffset",
																									"nativeSrc": "14737:9:11",
																									"nodeType": "YulIdentifier",
																									"src": "14737:9:11"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "i",
																							"nativeSrc": "14585:1:11",
																							"nodeType": "YulIdentifier",
																							"src": "14585:1:11"
																						},
																						{
																							"name": "loopEnd",
																							"nativeSrc": "14588:7:11",
																							"nodeType": "YulIdentifier",
																							"src": "14588:7:11"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nativeSrc": "14582:2:11",
																						"nodeType": "YulIdentifier",
																						"src": "14582:2:11"
																					},
																					"nativeSrc": "14582:14:11",
																					"nodeType": "YulFunctionCall",
																					"src": "14582:14:11"
																				},
																				"nativeSrc": "14574:208:11",
																				"nodeType": "YulForLoop",
																				"post": {
																					"nativeSrc": "14597:21:11",
																					"nodeType": "YulBlock",
																					"src": "14597:21:11",
																					"statements": [
																						{
																							"nativeSrc": "14599:17:11",
																							"nodeType": "YulAssignment",
																							"src": "14599:17:11",
																							"value": {
																								"arguments": [
																									{
																										"name": "i",
																										"nativeSrc": "14608:1:11",
																										"nodeType": "YulIdentifier",
																										"src": "14608:1:11"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "14611:4:11",
																										"nodeType": "YulLiteral",
																										"src": "14611:4:11",
																										"type": "",
																										"value": "0x20"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "14604:3:11",
																									"nodeType": "YulIdentifier",
																									"src": "14604:3:11"
																								},
																								"nativeSrc": "14604:12:11",
																								"nodeType": "YulFunctionCall",
																								"src": "14604:12:11"
																							},
																							"variableNames": [
																								{
																									"name": "i",
																									"nativeSrc": "14599:1:11",
																									"nodeType": "YulIdentifier",
																									"src": "14599:1:11"
																								}
																							]
																						}
																					]
																				},
																				"pre": {
																					"nativeSrc": "14578:3:11",
																					"nodeType": "YulBlock",
																					"src": "14578:3:11",
																					"statements": []
																				},
																				"src": "14574:208:11"
																			},
																			{
																				"body": {
																					"nativeSrc": "14818:156:11",
																					"nodeType": "YulBlock",
																					"src": "14818:156:11",
																					"statements": [
																						{
																							"nativeSrc": "14836:43:11",
																							"nodeType": "YulVariableDeclaration",
																							"src": "14836:43:11",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nativeSrc": "14863:3:11",
																												"nodeType": "YulIdentifier",
																												"src": "14863:3:11"
																											},
																											{
																												"name": "srcOffset",
																												"nativeSrc": "14868:9:11",
																												"nodeType": "YulIdentifier",
																												"src": "14868:9:11"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nativeSrc": "14859:3:11",
																											"nodeType": "YulIdentifier",
																											"src": "14859:3:11"
																										},
																										"nativeSrc": "14859:19:11",
																										"nodeType": "YulFunctionCall",
																										"src": "14859:19:11"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nativeSrc": "14853:5:11",
																									"nodeType": "YulIdentifier",
																									"src": "14853:5:11"
																								},
																								"nativeSrc": "14853:26:11",
																								"nodeType": "YulFunctionCall",
																								"src": "14853:26:11"
																							},
																							"variables": [
																								{
																									"name": "lastValue",
																									"nativeSrc": "14840:9:11",
																									"nodeType": "YulTypedName",
																									"src": "14840:9:11",
																									"type": ""
																								}
																							]
																						},
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "14903:6:11",
																										"nodeType": "YulIdentifier",
																										"src": "14903:6:11"
																									},
																									{
																										"arguments": [
																											{
																												"name": "lastValue",
																												"nativeSrc": "14930:9:11",
																												"nodeType": "YulIdentifier",
																												"src": "14930:9:11"
																											},
																											{
																												"arguments": [
																													{
																														"name": "newLen",
																														"nativeSrc": "14945:6:11",
																														"nodeType": "YulIdentifier",
																														"src": "14945:6:11"
																													},
																													{
																														"kind": "number",
																														"nativeSrc": "14953:4:11",
																														"nodeType": "YulLiteral",
																														"src": "14953:4:11",
																														"type": "",
																														"value": "0x1f"
																													}
																												],
																												"functionName": {
																													"name": "and",
																													"nativeSrc": "14941:3:11",
																													"nodeType": "YulIdentifier",
																													"src": "14941:3:11"
																												},
																												"nativeSrc": "14941:17:11",
																												"nodeType": "YulFunctionCall",
																												"src": "14941:17:11"
																											}
																										],
																										"functionName": {
																											"name": "mask_bytes_dynamic",
																											"nativeSrc": "14911:18:11",
																											"nodeType": "YulIdentifier",
																											"src": "14911:18:11"
																										},
																										"nativeSrc": "14911:48:11",
																										"nodeType": "YulFunctionCall",
																										"src": "14911:48:11"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nativeSrc": "14896:6:11",
																									"nodeType": "YulIdentifier",
																									"src": "14896:6:11"
																								},
																								"nativeSrc": "14896:64:11",
																								"nodeType": "YulFunctionCall",
																								"src": "14896:64:11"
																							},
																							"nativeSrc": "14896:64:11",
																							"nodeType": "YulExpressionStatement",
																							"src": "14896:64:11"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "loopEnd",
																							"nativeSrc": "14801:7:11",
																							"nodeType": "YulIdentifier",
																							"src": "14801:7:11"
																						},
																						{
																							"name": "newLen",
																							"nativeSrc": "14810:6:11",
																							"nodeType": "YulIdentifier",
																							"src": "14810:6:11"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nativeSrc": "14798:2:11",
																						"nodeType": "YulIdentifier",
																						"src": "14798:2:11"
																					},
																					"nativeSrc": "14798:19:11",
																					"nodeType": "YulFunctionCall",
																					"src": "14798:19:11"
																				},
																				"nativeSrc": "14795:179:11",
																				"nodeType": "YulIf",
																				"src": "14795:179:11"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "14994:4:11",
																							"nodeType": "YulIdentifier",
																							"src": "14994:4:11"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "newLen",
																											"nativeSrc": "15008:6:11",
																											"nodeType": "YulIdentifier",
																											"src": "15008:6:11"
																										},
																										{
																											"kind": "number",
																											"nativeSrc": "15016:1:11",
																											"nodeType": "YulLiteral",
																											"src": "15016:1:11",
																											"type": "",
																											"value": "2"
																										}
																									],
																									"functionName": {
																										"name": "mul",
																										"nativeSrc": "15004:3:11",
																										"nodeType": "YulIdentifier",
																										"src": "15004:3:11"
																									},
																									"nativeSrc": "15004:14:11",
																									"nodeType": "YulFunctionCall",
																									"src": "15004:14:11"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "15020:1:11",
																									"nodeType": "YulLiteral",
																									"src": "15020:1:11",
																									"type": "",
																									"value": "1"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "15000:3:11",
																								"nodeType": "YulIdentifier",
																								"src": "15000:3:11"
																							},
																							"nativeSrc": "15000:22:11",
																							"nodeType": "YulFunctionCall",
																							"src": "15000:22:11"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nativeSrc": "14987:6:11",
																						"nodeType": "YulIdentifier",
																						"src": "14987:6:11"
																					},
																					"nativeSrc": "14987:36:11",
																					"nodeType": "YulFunctionCall",
																					"src": "14987:36:11"
																				},
																				"nativeSrc": "14987:36:11",
																				"nodeType": "YulExpressionStatement",
																				"src": "14987:36:11"
																			}
																		]
																	},
																	"nativeSrc": "14415:618:11",
																	"nodeType": "YulCase",
																	"src": "14415:618:11",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "14420:1:11",
																		"nodeType": "YulLiteral",
																		"src": "14420:1:11",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nativeSrc": "15050:222:11",
																		"nodeType": "YulBlock",
																		"src": "15050:222:11",
																		"statements": [
																			{
																				"nativeSrc": "15064:14:11",
																				"nodeType": "YulVariableDeclaration",
																				"src": "15064:14:11",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "15077:1:11",
																					"nodeType": "YulLiteral",
																					"src": "15077:1:11",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "value",
																						"nativeSrc": "15068:5:11",
																						"nodeType": "YulTypedName",
																						"src": "15068:5:11",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nativeSrc": "15101:67:11",
																					"nodeType": "YulBlock",
																					"src": "15101:67:11",
																					"statements": [
																						{
																							"nativeSrc": "15119:35:11",
																							"nodeType": "YulAssignment",
																							"src": "15119:35:11",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nativeSrc": "15138:3:11",
																												"nodeType": "YulIdentifier",
																												"src": "15138:3:11"
																											},
																											{
																												"name": "srcOffset",
																												"nativeSrc": "15143:9:11",
																												"nodeType": "YulIdentifier",
																												"src": "15143:9:11"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nativeSrc": "15134:3:11",
																											"nodeType": "YulIdentifier",
																											"src": "15134:3:11"
																										},
																										"nativeSrc": "15134:19:11",
																										"nodeType": "YulFunctionCall",
																										"src": "15134:19:11"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nativeSrc": "15128:5:11",
																									"nodeType": "YulIdentifier",
																									"src": "15128:5:11"
																								},
																								"nativeSrc": "15128:26:11",
																								"nodeType": "YulFunctionCall",
																								"src": "15128:26:11"
																							},
																							"variableNames": [
																								{
																									"name": "value",
																									"nativeSrc": "15119:5:11",
																									"nodeType": "YulIdentifier",
																									"src": "15119:5:11"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"name": "newLen",
																					"nativeSrc": "15094:6:11",
																					"nodeType": "YulIdentifier",
																					"src": "15094:6:11"
																				},
																				"nativeSrc": "15091:77:11",
																				"nodeType": "YulIf",
																				"src": "15091:77:11"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "15188:4:11",
																							"nodeType": "YulIdentifier",
																							"src": "15188:4:11"
																						},
																						{
																							"arguments": [
																								{
																									"name": "value",
																									"nativeSrc": "15247:5:11",
																									"nodeType": "YulIdentifier",
																									"src": "15247:5:11"
																								},
																								{
																									"name": "newLen",
																									"nativeSrc": "15254:6:11",
																									"nodeType": "YulIdentifier",
																									"src": "15254:6:11"
																								}
																							],
																							"functionName": {
																								"name": "extract_used_part_and_set_length_of_short_byte_array",
																								"nativeSrc": "15194:52:11",
																								"nodeType": "YulIdentifier",
																								"src": "15194:52:11"
																							},
																							"nativeSrc": "15194:67:11",
																							"nodeType": "YulFunctionCall",
																							"src": "15194:67:11"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nativeSrc": "15181:6:11",
																						"nodeType": "YulIdentifier",
																						"src": "15181:6:11"
																					},
																					"nativeSrc": "15181:81:11",
																					"nodeType": "YulFunctionCall",
																					"src": "15181:81:11"
																				},
																				"nativeSrc": "15181:81:11",
																				"nodeType": "YulExpressionStatement",
																				"src": "15181:81:11"
																			}
																		]
																	},
																	"nativeSrc": "15042:230:11",
																	"nodeType": "YulCase",
																	"src": "15042:230:11",
																	"value": "default"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nativeSrc": "14395:6:11",
																		"nodeType": "YulIdentifier",
																		"src": "14395:6:11"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "14403:2:11",
																		"nodeType": "YulLiteral",
																		"src": "14403:2:11",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "14392:2:11",
																	"nodeType": "YulIdentifier",
																	"src": "14392:2:11"
																},
																"nativeSrc": "14392:14:11",
																"nodeType": "YulFunctionCall",
																"src": "14392:14:11"
															},
															"nativeSrc": "14385:887:11",
															"nodeType": "YulSwitch",
															"src": "14385:887:11"
														}
													]
												},
												"name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
												"nativeSrc": "13883:1395:11",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nativeSrc": "13964:4:11",
														"nodeType": "YulTypedName",
														"src": "13964:4:11",
														"type": ""
													},
													{
														"name": "src",
														"nativeSrc": "13970:3:11",
														"nodeType": "YulTypedName",
														"src": "13970:3:11",
														"type": ""
													}
												],
												"src": "13883:1395:11"
											}
										]
									},
									"contents": "{\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n\n        mcopy(dst, src, length)\n        mstore(add(dst, length), 0)\n\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function shift_right_1_unsigned(value) -> newValue {\n        newValue :=\n\n        shr(1, value)\n\n    }\n\n    function checked_exp_helper(_power, _base, exponent, max) -> power, base {\n        power := _power\n        base  := _base\n        for { } gt(exponent, 1) {}\n        {\n            // overflow check for base * base\n            if gt(base, div(max, base)) { panic_error_0x11() }\n            if and(exponent, 1)\n            {\n                // No checks for power := mul(power, base) needed, because the check\n                // for base * base above is sufficient, since:\n                // |power| <= base (proof by induction) and thus:\n                // |power * base| <= base * base <= max <= |min| (for signed)\n                // (this is equally true for signed and unsigned exp)\n                power := mul(power, base)\n            }\n            base := mul(base, base)\n            exponent := shift_right_1_unsigned(exponent)\n        }\n    }\n\n    function checked_exp_unsigned(base, exponent, max) -> power {\n        // This function currently cannot be inlined because of the\n        // \"leave\" statements. We have to improve the optimizer.\n\n        // Note that 0**0 == 1\n        if iszero(exponent) { power := 1 leave }\n        if iszero(base) { power := 0 leave }\n\n        // Specializations for small bases\n        switch base\n        // 0 is handled above\n        case 1 { power := 1 leave }\n        case 2\n        {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := exp(2, exponent)\n            if gt(power, max) { panic_error_0x11() }\n            leave\n        }\n        if or(\n            and(lt(base, 11), lt(exponent, 78)),\n            and(lt(base, 307), lt(exponent, 32))\n        )\n        {\n            power := exp(base, exponent)\n            if gt(power, max) { panic_error_0x11() }\n            leave\n        }\n\n        power, base := checked_exp_helper(1, base, exponent, max)\n\n        if gt(power, div(max, base)) { panic_error_0x11() }\n        power := mul(power, base)\n    }\n\n    function checked_exp_t_uint256_t_uint256(base, exponent) -> power {\n        base := cleanup_t_uint256(base)\n        exponent := cleanup_t_uint256(exponent)\n\n        power := checked_exp_unsigned(base, exponent, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        let product_raw := mul(x, y)\n        product := cleanup_t_uint256(product_raw)\n\n        // overflow, if x != 0 and y != product/x\n        if iszero(\n            or(\n                iszero(x),\n                eq(y, div(product, x))\n            )\n        ) { panic_error_0x11() }\n\n    }\n\n    function cleanup_t_rational_1_by_1(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_rational_1_by_1_to_t_uint64(value) -> converted {\n        converted := cleanup_t_uint64(identity(cleanup_t_rational_1_by_1(value)))\n    }\n\n    function abi_encode_t_rational_1_by_1_to_t_uint64_fromStack(value, pos) {\n        mstore(pos, convert_t_rational_1_by_1_to_t_uint64(value))\n    }\n\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_rational_1_by_1_to_t_uint64_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n}\n",
									"id": 11,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561000f575f80fd5b50600436106100a7575f3560e01c806340c10f191161006f57806340c10f191461016557806370a08231146101815780638129fc1c146101b157806395d89b41146101bb578063a9059cbb146101d9578063dd62ed3e14610209576100a7565b806306fdde03146100ab578063095ea7b3146100c957806318160ddd146100f957806323b872dd14610117578063313ce56714610147575b5f80fd5b6100b3610239565b6040516100c09190610ea4565b60405180910390f35b6100e360048036038101906100de9190610f55565b6102d7565b6040516100f09190610fad565b60405180910390f35b6101016102f9565b60405161010e9190610fd5565b60405180910390f35b610131600480360381019061012c9190610fee565b610310565b60405161013e9190610fad565b60405180910390f35b61014f61033e565b60405161015c9190611059565b60405180910390f35b61017f600480360381019061017a9190610f55565b610346565b005b61019b60048036038101906101969190611072565b610354565b6040516101a89190610fd5565b60405180910390f35b6101b96103a7565b005b6101c36105c0565b6040516101d09190610ea4565b60405180910390f35b6101f360048036038101906101ee9190610f55565b61065e565b6040516102009190610fad565b60405180910390f35b610223600480360381019061021e919061109d565b610680565b6040516102309190610fd5565b60405180910390f35b60605f610244610710565b905080600301805461025590611108565b80601f016020809104026020016040519081016040528092919081815260200182805461028190611108565b80156102cc5780601f106102a3576101008083540402835291602001916102cc565b820191905f5260205f20905b8154815290600101906020018083116102af57829003601f168201915b505050505091505090565b5f806102e1610737565b90506102ee81858561073e565b600191505092915050565b5f80610303610710565b9050806002015491505090565b5f8061031a610737565b9050610327858285610750565b6103328585856107e2565b60019150509392505050565b5f6012905090565b61035082826108d2565b5050565b5f8061035e610710565b9050805f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054915050919050565b5f6103b0610951565b90505f815f0160089054906101000a900460ff161590505f825f015f9054906101000a900467ffffffffffffffff1690505f808267ffffffffffffffff161480156103f85750825b90505f60018367ffffffffffffffff1614801561042b57505f3073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015610439575080155b15610470576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001855f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555083156104bd576001855f0160086101000a81548160ff0219169083151502179055505b6105316040518060400160405280600981526020017f4d794552433230563100000000000000000000000000000000000000000000008152506040518060400160405280600281526020017f4d31000000000000000000000000000000000000000000000000000000000000815250610978565b61055f3361053d61033e565b60ff16600a61054c9190611294565b620f424061055a91906112de565b6108d2565b83156105b9575f855f0160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d260016040516105b09190611374565b60405180910390a15b5050505050565b60605f6105cb610710565b90508060040180546105dc90611108565b80601f016020809104026020016040519081016040528092919081815260200182805461060890611108565b80156106535780601f1061062a57610100808354040283529160200191610653565b820191905f5260205f20905b81548152906001019060200180831161063657829003601f168201915b505050505091505090565b5f80610668610737565b90506106758185856107e2565b600191505092915050565b5f8061068a610710565b9050806001015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205491505092915050565b5f7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00905090565b5f33905090565b61074b838383600161098e565b505050565b5f61075b8484610680565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146107dc57818110156107cd578281836040517ffb8f41b20000000000000000000000000000000000000000000000000000000081526004016107c49392919061139c565b60405180910390fd5b6107db84848484035f61098e565b5b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610852575f6040517f96c6fd1e00000000000000000000000000000000000000000000000000000000815260040161084991906113d1565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108c2575f6040517fec442f050000000000000000000000000000000000000000000000000000000081526004016108b991906113d1565b60405180910390fd5b6108cd838383610b6b565b505050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610942575f6040517fec442f0500000000000000000000000000000000000000000000000000000000815260040161093991906113d1565b60405180910390fd5b61094d5f8383610b6b565b5050565b5f7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b610980610d9a565b61098a8282610dda565b5050565b5f610997610710565b90505f73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603610a09575f6040517fe602df05000000000000000000000000000000000000000000000000000000008152600401610a0091906113d1565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610a79575f6040517f94280d62000000000000000000000000000000000000000000000000000000008152600401610a7091906113d1565b60405180910390fd5b82816001015f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508115610b64578373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92585604051610b5b9190610fd5565b60405180910390a35b5050505050565b5f610b74610710565b90505f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610bc85781816002015f828254610bbc91906113ea565b92505081905550610c9a565b5f815f015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905082811015610c53578481846040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401610c4a9392919061139c565b60405180910390fd5b828103825f015f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610ce35781816002015f8282540392505081905550610d2f565b81815f015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610d8c9190610fd5565b60405180910390a350505050565b610da2610e16565b610dd8576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b610de2610d9a565b5f610deb610710565b905082816003019081610dfe91906115de565b5081816004019081610e1091906115de565b50505050565b5f610e1f610951565b5f0160089054906101000a900460ff16905090565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f610e7682610e34565b610e808185610e3e565b9350610e90818560208601610e4e565b610e9981610e5c565b840191505092915050565b5f6020820190508181035f830152610ebc8184610e6c565b905092915050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610ef182610ec8565b9050919050565b610f0181610ee7565b8114610f0b575f80fd5b50565b5f81359050610f1c81610ef8565b92915050565b5f819050919050565b610f3481610f22565b8114610f3e575f80fd5b50565b5f81359050610f4f81610f2b565b92915050565b5f8060408385031215610f6b57610f6a610ec4565b5b5f610f7885828601610f0e565b9250506020610f8985828601610f41565b9150509250929050565b5f8115159050919050565b610fa781610f93565b82525050565b5f602082019050610fc05f830184610f9e565b92915050565b610fcf81610f22565b82525050565b5f602082019050610fe85f830184610fc6565b92915050565b5f805f6060848603121561100557611004610ec4565b5b5f61101286828701610f0e565b935050602061102386828701610f0e565b925050604061103486828701610f41565b9150509250925092565b5f60ff82169050919050565b6110538161103e565b82525050565b5f60208201905061106c5f83018461104a565b92915050565b5f6020828403121561108757611086610ec4565b5b5f61109484828501610f0e565b91505092915050565b5f80604083850312156110b3576110b2610ec4565b5b5f6110c085828601610f0e565b92505060206110d185828601610f0e565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061111f57607f821691505b602082108103611132576111316110db565b5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f8160011c9050919050565b5f808291508390505b60018511156111ba5780860481111561119657611195611138565b5b60018516156111a55780820291505b80810290506111b385611165565b945061117a565b94509492505050565b5f826111d2576001905061128d565b816111df575f905061128d565b81600181146111f557600281146111ff5761122e565b600191505061128d565b60ff84111561121157611210611138565b5b8360020a91508482111561122857611227611138565b5b5061128d565b5060208310610133831016604e8410600b84101617156112635782820a90508381111561125e5761125d611138565b5b61128d565b6112708484846001611171565b9250905081840481111561128757611286611138565b5b81810290505b9392505050565b5f61129e82610f22565b91506112a983610f22565b92506112d67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846111c3565b905092915050565b5f6112e882610f22565b91506112f383610f22565b925082820261130181610f22565b9150828204841483151761131857611317611138565b5b5092915050565b5f819050919050565b5f67ffffffffffffffff82169050919050565b5f819050919050565b5f61135e6113596113548461131f565b61133b565b611328565b9050919050565b61136e81611344565b82525050565b5f6020820190506113875f830184611365565b92915050565b61139681610ee7565b82525050565b5f6060820190506113af5f83018661138d565b6113bc6020830185610fc6565b6113c96040830184610fc6565b949350505050565b5f6020820190506113e45f83018461138d565b92915050565b5f6113f482610f22565b91506113ff83610f22565b925082820190508082111561141757611416611138565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026114a67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261146b565b6114b0868361146b565b95508019841693508086168417925050509392505050565b5f6114e26114dd6114d884610f22565b61133b565b610f22565b9050919050565b5f819050919050565b6114fb836114c8565b61150f611507826114e9565b848454611477565b825550505050565b5f90565b611523611517565b61152e8184846114f2565b505050565b5b81811015611551576115465f8261151b565b600181019050611534565b5050565b601f821115611596576115678161144a565b6115708461145c565b8101602085101561157f578190505b61159361158b8561145c565b830182611533565b50505b505050565b5f82821c905092915050565b5f6115b65f198460080261159b565b1980831691505092915050565b5f6115ce83836115a7565b9150826002028217905092915050565b6115e782610e34565b67ffffffffffffffff811115611600576115ff61141d565b5b61160a8254611108565b611615828285611555565b5f60209050601f831160018114611646575f8415611634578287015190505b61163e85826115c3565b8655506116a5565b601f1984166116548661144a565b5f5b8281101561167b57848901518255600182019150602085019450602081019050611656565b868310156116985784890151611694601f8916826115a7565b8355505b6001600288020188555050505b50505050505056fea2646970667358221220ca217883c7127f872305edc8572137814500114f0d66348133af9042069b703964736f6c63430008190033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA7 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x40C10F19 GT PUSH2 0x6F JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x165 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x181 JUMPI DUP1 PUSH4 0x8129FC1C EQ PUSH2 0x1B1 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1BB JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x1D9 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x209 JUMPI PUSH2 0xA7 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAB JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xC9 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xF9 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x117 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x147 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xB3 PUSH2 0x239 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC0 SWAP2 SWAP1 PUSH2 0xEA4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xDE SWAP2 SWAP1 PUSH2 0xF55 JUMP JUMPDEST PUSH2 0x2D7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF0 SWAP2 SWAP1 PUSH2 0xFAD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x101 PUSH2 0x2F9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10E SWAP2 SWAP1 PUSH2 0xFD5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x131 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x12C SWAP2 SWAP1 PUSH2 0xFEE JUMP JUMPDEST PUSH2 0x310 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x13E SWAP2 SWAP1 PUSH2 0xFAD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x14F PUSH2 0x33E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15C SWAP2 SWAP1 PUSH2 0x1059 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x17F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x17A SWAP2 SWAP1 PUSH2 0xF55 JUMP JUMPDEST PUSH2 0x346 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x19B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x196 SWAP2 SWAP1 PUSH2 0x1072 JUMP JUMPDEST PUSH2 0x354 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A8 SWAP2 SWAP1 PUSH2 0xFD5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B9 PUSH2 0x3A7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C3 PUSH2 0x5C0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D0 SWAP2 SWAP1 PUSH2 0xEA4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EE SWAP2 SWAP1 PUSH2 0xF55 JUMP JUMPDEST PUSH2 0x65E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x200 SWAP2 SWAP1 PUSH2 0xFAD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x223 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x21E SWAP2 SWAP1 PUSH2 0x109D JUMP JUMPDEST PUSH2 0x680 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x230 SWAP2 SWAP1 PUSH2 0xFD5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0x244 PUSH2 0x710 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x3 ADD DUP1 SLOAD PUSH2 0x255 SWAP1 PUSH2 0x1108 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x281 SWAP1 PUSH2 0x1108 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2CC JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2A3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2CC JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2AF JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x2E1 PUSH2 0x737 JUMP JUMPDEST SWAP1 POP PUSH2 0x2EE DUP2 DUP6 DUP6 PUSH2 0x73E JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x303 PUSH2 0x710 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x2 ADD SLOAD SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x31A PUSH2 0x737 JUMP JUMPDEST SWAP1 POP PUSH2 0x327 DUP6 DUP3 DUP6 PUSH2 0x750 JUMP JUMPDEST PUSH2 0x332 DUP6 DUP6 DUP6 PUSH2 0x7E2 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x350 DUP3 DUP3 PUSH2 0x8D2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x35E PUSH2 0x710 JUMP JUMPDEST SWAP1 POP DUP1 PUSH0 ADD PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x3B0 PUSH2 0x951 JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 PUSH0 ADD PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP PUSH0 DUP3 PUSH0 ADD PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH0 DUP1 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x3F8 JUMPI POP DUP3 JUMPDEST SWAP1 POP PUSH0 PUSH1 0x1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x42B JUMPI POP PUSH0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE EQ JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0x439 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x470 JUMPI PUSH1 0x40 MLOAD PUSH32 0xF92EE8A900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP6 PUSH0 ADD PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP4 ISZERO PUSH2 0x4BD JUMPI PUSH1 0x1 DUP6 PUSH0 ADD PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH2 0x531 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x9 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4D79455243323056310000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4D31000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH2 0x978 JUMP JUMPDEST PUSH2 0x55F CALLER PUSH2 0x53D PUSH2 0x33E JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0xA PUSH2 0x54C SWAP2 SWAP1 PUSH2 0x1294 JUMP JUMPDEST PUSH3 0xF4240 PUSH2 0x55A SWAP2 SWAP1 PUSH2 0x12DE JUMP JUMPDEST PUSH2 0x8D2 JUMP JUMPDEST DUP4 ISZERO PUSH2 0x5B9 JUMPI PUSH0 DUP6 PUSH0 ADD PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0x5B0 SWAP2 SWAP1 PUSH2 0x1374 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0x5CB PUSH2 0x710 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x4 ADD DUP1 SLOAD PUSH2 0x5DC SWAP1 PUSH2 0x1108 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x608 SWAP1 PUSH2 0x1108 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x653 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x62A JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x653 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x636 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x668 PUSH2 0x737 JUMP JUMPDEST SWAP1 POP PUSH2 0x675 DUP2 DUP6 DUP6 PUSH2 0x7E2 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x68A PUSH2 0x710 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 ADD PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH32 0x52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE00 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x74B DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x98E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x75B DUP5 DUP5 PUSH2 0x680 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x7DC JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x7CD JUMPI DUP3 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xFB8F41B200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7C4 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x139C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7DB DUP5 DUP5 DUP5 DUP5 SUB PUSH0 PUSH2 0x98E JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x852 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x849 SWAP2 SWAP1 PUSH2 0x13D1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x8C2 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8B9 SWAP2 SWAP1 PUSH2 0x13D1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8CD DUP4 DUP4 DUP4 PUSH2 0xB6B JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x942 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x939 SWAP2 SWAP1 PUSH2 0x13D1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x94D PUSH0 DUP4 DUP4 PUSH2 0xB6B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x980 PUSH2 0xD9A JUMP JUMPDEST PUSH2 0x98A DUP3 DUP3 PUSH2 0xDDA JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH2 0x997 PUSH2 0x710 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xA09 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xE602DF0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA00 SWAP2 SWAP1 PUSH2 0x13D1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xA79 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x94280D6200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA70 SWAP2 SWAP1 PUSH2 0x13D1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 DUP2 PUSH1 0x1 ADD PUSH0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 ISZERO PUSH2 0xB64 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP6 PUSH1 0x40 MLOAD PUSH2 0xB5B SWAP2 SWAP1 PUSH2 0xFD5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0xB74 PUSH2 0x710 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xBC8 JUMPI DUP2 DUP2 PUSH1 0x2 ADD PUSH0 DUP3 DUP3 SLOAD PUSH2 0xBBC SWAP2 SWAP1 PUSH2 0x13EA JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0xC9A JUMP JUMPDEST PUSH0 DUP2 PUSH0 ADD PUSH0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0xC53 JUMPI DUP5 DUP2 DUP5 PUSH1 0x40 MLOAD PUSH32 0xE450D38C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC4A SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x139C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 DUP2 SUB DUP3 PUSH0 ADD PUSH0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xCE3 JUMPI DUP2 DUP2 PUSH1 0x2 ADD PUSH0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0xD2F JUMP JUMPDEST DUP2 DUP2 PUSH0 ADD PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xD8C SWAP2 SWAP1 PUSH2 0xFD5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH2 0xDA2 PUSH2 0xE16 JUMP JUMPDEST PUSH2 0xDD8 JUMPI PUSH1 0x40 MLOAD PUSH32 0xD7E6BCF800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0xDE2 PUSH2 0xD9A JUMP JUMPDEST PUSH0 PUSH2 0xDEB PUSH2 0x710 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 PUSH1 0x3 ADD SWAP1 DUP2 PUSH2 0xDFE SWAP2 SWAP1 PUSH2 0x15DE JUMP JUMPDEST POP DUP2 DUP2 PUSH1 0x4 ADD SWAP1 DUP2 PUSH2 0xE10 SWAP2 SWAP1 PUSH2 0x15DE JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0xE1F PUSH2 0x951 JUMP JUMPDEST PUSH0 ADD PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 MCOPY PUSH0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xE76 DUP3 PUSH2 0xE34 JUMP JUMPDEST PUSH2 0xE80 DUP2 DUP6 PUSH2 0xE3E JUMP JUMPDEST SWAP4 POP PUSH2 0xE90 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xE4E JUMP JUMPDEST PUSH2 0xE99 DUP2 PUSH2 0xE5C JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0xEBC DUP2 DUP5 PUSH2 0xE6C JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0xEF1 DUP3 PUSH2 0xEC8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xF01 DUP2 PUSH2 0xEE7 JUMP JUMPDEST DUP2 EQ PUSH2 0xF0B JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xF1C DUP2 PUSH2 0xEF8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xF34 DUP2 PUSH2 0xF22 JUMP JUMPDEST DUP2 EQ PUSH2 0xF3E JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xF4F DUP2 PUSH2 0xF2B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF6B JUMPI PUSH2 0xF6A PUSH2 0xEC4 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0xF78 DUP6 DUP3 DUP7 ADD PUSH2 0xF0E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xF89 DUP6 DUP3 DUP7 ADD PUSH2 0xF41 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xFA7 DUP2 PUSH2 0xF93 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xFC0 PUSH0 DUP4 ADD DUP5 PUSH2 0xF9E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xFCF DUP2 PUSH2 0xF22 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xFE8 PUSH0 DUP4 ADD DUP5 PUSH2 0xFC6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1005 JUMPI PUSH2 0x1004 PUSH2 0xEC4 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1012 DUP7 DUP3 DUP8 ADD PUSH2 0xF0E JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1023 DUP7 DUP3 DUP8 ADD PUSH2 0xF0E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1034 DUP7 DUP3 DUP8 ADD PUSH2 0xF41 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1053 DUP2 PUSH2 0x103E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x106C PUSH0 DUP4 ADD DUP5 PUSH2 0x104A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1087 JUMPI PUSH2 0x1086 PUSH2 0xEC4 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1094 DUP5 DUP3 DUP6 ADD PUSH2 0xF0E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x10B3 JUMPI PUSH2 0x10B2 PUSH2 0xEC4 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x10C0 DUP6 DUP3 DUP7 ADD PUSH2 0xF0E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x10D1 DUP6 DUP3 DUP7 ADD PUSH2 0xF0E JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x111F JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1132 JUMPI PUSH2 0x1131 PUSH2 0x10DB JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP2 PUSH1 0x1 SHR SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 DUP3 SWAP2 POP DUP4 SWAP1 POP JUMPDEST PUSH1 0x1 DUP6 GT ISZERO PUSH2 0x11BA JUMPI DUP1 DUP7 DIV DUP2 GT ISZERO PUSH2 0x1196 JUMPI PUSH2 0x1195 PUSH2 0x1138 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP6 AND ISZERO PUSH2 0x11A5 JUMPI DUP1 DUP3 MUL SWAP2 POP JUMPDEST DUP1 DUP2 MUL SWAP1 POP PUSH2 0x11B3 DUP6 PUSH2 0x1165 JUMP JUMPDEST SWAP5 POP PUSH2 0x117A JUMP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH2 0x11D2 JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0x128D JUMP JUMPDEST DUP2 PUSH2 0x11DF JUMPI PUSH0 SWAP1 POP PUSH2 0x128D JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x11F5 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x11FF JUMPI PUSH2 0x122E JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x128D JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x1211 JUMPI PUSH2 0x1210 PUSH2 0x1138 JUMP JUMPDEST JUMPDEST DUP4 PUSH1 0x2 EXP SWAP2 POP DUP5 DUP3 GT ISZERO PUSH2 0x1228 JUMPI PUSH2 0x1227 PUSH2 0x1138 JUMP JUMPDEST JUMPDEST POP PUSH2 0x128D JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x1263 JUMPI DUP3 DUP3 EXP SWAP1 POP DUP4 DUP2 GT ISZERO PUSH2 0x125E JUMPI PUSH2 0x125D PUSH2 0x1138 JUMP JUMPDEST JUMPDEST PUSH2 0x128D JUMP JUMPDEST PUSH2 0x1270 DUP5 DUP5 DUP5 PUSH1 0x1 PUSH2 0x1171 JUMP JUMPDEST SWAP3 POP SWAP1 POP DUP2 DUP5 DIV DUP2 GT ISZERO PUSH2 0x1287 JUMPI PUSH2 0x1286 PUSH2 0x1138 JUMP JUMPDEST JUMPDEST DUP2 DUP2 MUL SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x129E DUP3 PUSH2 0xF22 JUMP JUMPDEST SWAP2 POP PUSH2 0x12A9 DUP4 PUSH2 0xF22 JUMP JUMPDEST SWAP3 POP PUSH2 0x12D6 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP5 PUSH2 0x11C3 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x12E8 DUP3 PUSH2 0xF22 JUMP JUMPDEST SWAP2 POP PUSH2 0x12F3 DUP4 PUSH2 0xF22 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x1301 DUP2 PUSH2 0xF22 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x1318 JUMPI PUSH2 0x1317 PUSH2 0x1138 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x135E PUSH2 0x1359 PUSH2 0x1354 DUP5 PUSH2 0x131F JUMP JUMPDEST PUSH2 0x133B JUMP JUMPDEST PUSH2 0x1328 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x136E DUP2 PUSH2 0x1344 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1387 PUSH0 DUP4 ADD DUP5 PUSH2 0x1365 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1396 DUP2 PUSH2 0xEE7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x13AF PUSH0 DUP4 ADD DUP7 PUSH2 0x138D JUMP JUMPDEST PUSH2 0x13BC PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xFC6 JUMP JUMPDEST PUSH2 0x13C9 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xFC6 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x13E4 PUSH0 DUP4 ADD DUP5 PUSH2 0x138D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x13F4 DUP3 PUSH2 0xF22 JUMP JUMPDEST SWAP2 POP PUSH2 0x13FF DUP4 PUSH2 0xF22 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x1417 JUMPI PUSH2 0x1416 PUSH2 0x1138 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP2 SWAP1 POP DUP2 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x8 DUP4 MUL PUSH2 0x14A6 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x146B JUMP JUMPDEST PUSH2 0x14B0 DUP7 DUP4 PUSH2 0x146B JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x14E2 PUSH2 0x14DD PUSH2 0x14D8 DUP5 PUSH2 0xF22 JUMP JUMPDEST PUSH2 0x133B JUMP JUMPDEST PUSH2 0xF22 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x14FB DUP4 PUSH2 0x14C8 JUMP JUMPDEST PUSH2 0x150F PUSH2 0x1507 DUP3 PUSH2 0x14E9 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x1477 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH0 SWAP1 JUMP JUMPDEST PUSH2 0x1523 PUSH2 0x1517 JUMP JUMPDEST PUSH2 0x152E DUP2 DUP5 DUP5 PUSH2 0x14F2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1551 JUMPI PUSH2 0x1546 PUSH0 DUP3 PUSH2 0x151B JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x1534 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x1596 JUMPI PUSH2 0x1567 DUP2 PUSH2 0x144A JUMP JUMPDEST PUSH2 0x1570 DUP5 PUSH2 0x145C JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x157F JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x1593 PUSH2 0x158B DUP6 PUSH2 0x145C JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x1533 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x15B6 PUSH0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x159B JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x15CE DUP4 DUP4 PUSH2 0x15A7 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x15E7 DUP3 PUSH2 0xE34 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1600 JUMPI PUSH2 0x15FF PUSH2 0x141D JUMP JUMPDEST JUMPDEST PUSH2 0x160A DUP3 SLOAD PUSH2 0x1108 JUMP JUMPDEST PUSH2 0x1615 DUP3 DUP3 DUP6 PUSH2 0x1555 JUMP JUMPDEST PUSH0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x1646 JUMPI PUSH0 DUP5 ISZERO PUSH2 0x1634 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x163E DUP6 DUP3 PUSH2 0x15C3 JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x16A5 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x1654 DUP7 PUSH2 0x144A JUMP JUMPDEST PUSH0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x167B JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1656 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x1698 JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x1694 PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x15A7 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCA 0x21 PUSH25 0x83C7127F872305EDC8572137814500114F0D66348133AF9042 MOD SWAP12 PUSH17 0x3964736F6C634300081900330000000000 ",
							"sourceMap": "374:294:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3011:144:1;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5505:186;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4191:152;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6251:244;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4049:82;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;583:83:10;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4401:171:1;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;418:155:10;;;:::i;:::-;;3268:148:1;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4767:178;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5003:195;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3011:144;3056:13;3081:22;3106:18;:16;:18::i;:::-;3081:43;;3141:1;:7;;3134:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3011:144;:::o;5505:186::-;5578:4;5594:13;5610:12;:10;:12::i;:::-;5594:28;;5632:31;5641:5;5648:7;5657:5;5632:8;:31::i;:::-;5680:4;5673:11;;;5505:186;;;;:::o;4191:152::-;4243:7;4262:22;4287:18;:16;:18::i;:::-;4262:43;;4322:1;:14;;;4315:21;;;4191:152;:::o;6251:244::-;6338:4;6354:15;6372:12;:10;:12::i;:::-;6354:30;;6394:37;6410:4;6416:7;6425:5;6394:15;:37::i;:::-;6441:26;6451:4;6457:2;6461:5;6441:9;:26::i;:::-;6484:4;6477:11;;;6251:244;;;;;:::o;4049:82::-;4098:5;4122:2;4115:9;;4049:82;:::o;583:83:10:-;642:17;648:2;652:6;642:5;:17::i;:::-;583:83;;:::o;4401:171:1:-;4466:7;4485:22;4510:18;:16;:18::i;:::-;4485:43;;4545:1;:11;;:20;4557:7;4545:20;;;;;;;;;;;;;;;;4538:27;;;4401:171;;;:::o;418:155:10:-;4158:30:0;4191:26;:24;:26::i;:::-;4158:59;;4279:19;4302:1;:15;;;;;;;;;;;;4301:16;4279:38;;4327:18;4348:1;:14;;;;;;;;;;;;4327:35;;4706:17;4741:1;4726:11;:16;;;:34;;;;;4746:14;4726:34;4706:54;;4770:17;4805:1;4790:11;:16;;;:50;;;;;4839:1;4818:4;4810:25;;;:30;4790:50;4770:70;;4856:12;4855:13;:30;;;;;4873:12;4872:13;4855:30;4851:91;;;4908:23;;;;;;;;;;;;;;4851:91;4968:1;4951;:14;;;:18;;;;;;;;;;;;;;;;;;4983:14;4979:67;;;5031:4;5013:1;:15;;;:22;;;;;;;;;;;;;;;;;;4979:67;471:31:10::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;::::0;:12:::1;:31::i;:::-;512:54;518:10;554;:8;:10::i;:::-;546:19;;540:2;:25;;;;:::i;:::-;530:7;:35;;;;:::i;:::-;512:5;:54::i;:::-;5070:14:0::0;5066:101;;;5118:5;5100:1;:15;;;:23;;;;;;;;;;;;;;;;;;5142:14;5154:1;5142:14;;;;;;:::i;:::-;;;;;;;;5066:101;4092:1081;;;;;418:155:10:o;3268:148:1:-;3315:13;3340:22;3365:18;:16;:18::i;:::-;3340:43;;3400:1;:9;;3393:16;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3268:148;:::o;4767:178::-;4836:4;4852:13;4868:12;:10;:12::i;:::-;4852:28;;4890:27;4900:5;4907:2;4911:5;4890:9;:27::i;:::-;4934:4;4927:11;;;4767:178;;;;:::o;5003:195::-;5083:7;5102:22;5127:18;:16;:18::i;:::-;5102:43;;5162:1;:13;;:20;5176:5;5162:20;;;;;;;;;;;;;;;:29;5183:7;5162:29;;;;;;;;;;;;;;;;5155:36;;;5003:195;;;;:::o;2242:153::-;2292:22;2359:20;2349:30;;2242:153;:::o;887:96:2:-;940:7;966:10;959:17;;887:96;:::o;10264:128:1:-;10348:37;10357:5;10364:7;10373:5;10380:4;10348:8;:37::i;:::-;10264:128;;;:::o;11993:477::-;12092:24;12119:25;12129:5;12136:7;12119:9;:25::i;:::-;12092:52;;12178:17;12158:16;:37;12154:310;;12234:5;12215:16;:24;12211:130;;;12293:7;12302:16;12320:5;12266:60;;;;;;;;;;;;;:::i;:::-;;;;;;;;12211:130;12382:57;12391:5;12398:7;12426:5;12407:16;:24;12433:5;12382:8;:57::i;:::-;12154:310;12082:388;11993:477;;;:::o;6868:300::-;6967:1;6951:18;;:4;:18;;;6947:86;;7019:1;6992:30;;;;;;;;;;;:::i;:::-;;;;;;;;6947:86;7060:1;7046:16;;:2;:16;;;7042:86;;7114:1;7085:32;;;;;;;;;;;:::i;:::-;;;;;;;;7042:86;7137:24;7145:4;7151:2;7155:5;7137:7;:24::i;:::-;6868:300;;;:::o;8996:208::-;9085:1;9066:21;;:7;:21;;;9062:91;;9139:1;9110:32;;;;;;;;;;;:::i;:::-;;;;;;;;9062:91;9162:35;9178:1;9182:7;9191:5;9162:7;:35::i;:::-;8996:208;;:::o;8737:170:0:-;8795:30;8870:21;8860:31;;8737:170;:::o;2577:147:1:-;6931:20:0;:18;:20::i;:::-;2679:38:1::1;2702:5;2709:7;2679:22;:38::i;:::-;2577:147:::0;;:::o;11224:487::-;11332:22;11357:18;:16;:18::i;:::-;11332:43;;11406:1;11389:19;;:5;:19;;;11385:89;;11460:1;11431:32;;;;;;;;;;;:::i;:::-;;;;;;;;11385:89;11506:1;11487:21;;:7;:21;;;11483:90;;11559:1;11531:31;;;;;;;;;;;:::i;:::-;;;;;;;;11483:90;11614:5;11582:1;:13;;:20;11596:5;11582:20;;;;;;;;;;;;;;;:29;11603:7;11582:29;;;;;;;;;;;;;;;:37;;;;11633:9;11629:76;;;11679:7;11663:31;;11672:5;11663:31;;;11688:5;11663:31;;;;;;:::i;:::-;;;;;;;;11629:76;11322:389;11224:487;;;;:::o;7483:1170::-;7568:22;7593:18;:16;:18::i;:::-;7568:43;;7641:1;7625:18;;:4;:18;;;7621:546;;7779:5;7761:1;:14;;;:23;;;;;;;:::i;:::-;;;;;;;;7621:546;;;7815:19;7837:1;:11;;:17;7849:4;7837:17;;;;;;;;;;;;;;;;7815:39;;7886:5;7872:11;:19;7868:115;;;7943:4;7949:11;7962:5;7918:50;;;;;;;;;;;;;:::i;:::-;;;;;;;;7868:115;8137:5;8123:11;:19;8103:1;:11;;:17;8115:4;8103:17;;;;;;;;;;;;;;;:39;;;;7801:366;7621:546;8195:1;8181:16;;:2;:16;;;8177:429;;8362:5;8344:1;:14;;;:23;;;;;;;;;;;8177:429;;;8576:5;8557:1;:11;;:15;8569:2;8557:15;;;;;;;;;;;;;;;;:24;;;;;;;;;;;8177:429;8636:2;8621:25;;8630:4;8621:25;;;8640:5;8621:25;;;;;;:::i;:::-;;;;;;;;7558:1095;7483:1170;;;:::o;7084:141:0:-;7151:17;:15;:17::i;:::-;7146:73;;7191:17;;;;;;;;;;;;;;7146:73;7084:141::o;2730:216:1:-;6931:20:0;:18;:20::i;:::-;2842:22:1::1;2867:18;:16;:18::i;:::-;2842:43;;2905:5;2895:1;:7;;:15;;;;;;:::i;:::-;;2932:7;2920:1;:9;;:19;;;;;;:::i;:::-;;2832:114;2730:216:::0;;:::o;8487:120:0:-;8537:4;8560:26;:24;:26::i;:::-;:40;;;;;;;;;;;;8553:47;;8487:120;:::o;7:99:11:-;59:6;93:5;87:12;77:22;;7:99;;;:::o;112:169::-;196:11;230:6;225:3;218:19;270:4;265:3;261:14;246:29;;112:169;;;;:::o;287:139::-;376:6;371:3;366;360:23;417:1;408:6;403:3;399:16;392:27;287:139;;;:::o;432:102::-;473:6;524:2;520:7;515:2;508:5;504:14;500:28;490:38;;432:102;;;:::o;540:377::-;628:3;656:39;689:5;656:39;:::i;:::-;711:71;775:6;770:3;711:71;:::i;:::-;704:78;;791:65;849:6;844:3;837:4;830:5;826:16;791:65;:::i;:::-;881:29;903:6;881:29;:::i;:::-;876:3;872:39;865:46;;632:285;540:377;;;;:::o;923:313::-;1036:4;1074:2;1063:9;1059:18;1051:26;;1123:9;1117:4;1113:20;1109:1;1098:9;1094:17;1087:47;1151:78;1224:4;1215:6;1151:78;:::i;:::-;1143:86;;923:313;;;;:::o;1323:117::-;1432:1;1429;1422:12;1569:126;1606:7;1646:42;1639:5;1635:54;1624:65;;1569:126;;;:::o;1701:96::-;1738:7;1767:24;1785:5;1767:24;:::i;:::-;1756:35;;1701:96;;;:::o;1803:122::-;1876:24;1894:5;1876:24;:::i;:::-;1869:5;1866:35;1856:63;;1915:1;1912;1905:12;1856:63;1803:122;:::o;1931:139::-;1977:5;2015:6;2002:20;1993:29;;2031:33;2058:5;2031:33;:::i;:::-;1931:139;;;;:::o;2076:77::-;2113:7;2142:5;2131:16;;2076:77;;;:::o;2159:122::-;2232:24;2250:5;2232:24;:::i;:::-;2225:5;2222:35;2212:63;;2271:1;2268;2261:12;2212:63;2159:122;:::o;2287:139::-;2333:5;2371:6;2358:20;2349:29;;2387:33;2414:5;2387:33;:::i;:::-;2287:139;;;;:::o;2432:474::-;2500:6;2508;2557:2;2545:9;2536:7;2532:23;2528:32;2525:119;;;2563:79;;:::i;:::-;2525:119;2683:1;2708:53;2753:7;2744:6;2733:9;2729:22;2708:53;:::i;:::-;2698:63;;2654:117;2810:2;2836:53;2881:7;2872:6;2861:9;2857:22;2836:53;:::i;:::-;2826:63;;2781:118;2432:474;;;;;:::o;2912:90::-;2946:7;2989:5;2982:13;2975:21;2964:32;;2912:90;;;:::o;3008:109::-;3089:21;3104:5;3089:21;:::i;:::-;3084:3;3077:34;3008:109;;:::o;3123:210::-;3210:4;3248:2;3237:9;3233:18;3225:26;;3261:65;3323:1;3312:9;3308:17;3299:6;3261:65;:::i;:::-;3123:210;;;;:::o;3339:118::-;3426:24;3444:5;3426:24;:::i;:::-;3421:3;3414:37;3339:118;;:::o;3463:222::-;3556:4;3594:2;3583:9;3579:18;3571:26;;3607:71;3675:1;3664:9;3660:17;3651:6;3607:71;:::i;:::-;3463:222;;;;:::o;3691:619::-;3768:6;3776;3784;3833:2;3821:9;3812:7;3808:23;3804:32;3801:119;;;3839:79;;:::i;:::-;3801:119;3959:1;3984:53;4029:7;4020:6;4009:9;4005:22;3984:53;:::i;:::-;3974:63;;3930:117;4086:2;4112:53;4157:7;4148:6;4137:9;4133:22;4112:53;:::i;:::-;4102:63;;4057:118;4214:2;4240:53;4285:7;4276:6;4265:9;4261:22;4240:53;:::i;:::-;4230:63;;4185:118;3691:619;;;;;:::o;4316:86::-;4351:7;4391:4;4384:5;4380:16;4369:27;;4316:86;;;:::o;4408:112::-;4491:22;4507:5;4491:22;:::i;:::-;4486:3;4479:35;4408:112;;:::o;4526:214::-;4615:4;4653:2;4642:9;4638:18;4630:26;;4666:67;4730:1;4719:9;4715:17;4706:6;4666:67;:::i;:::-;4526:214;;;;:::o;4746:329::-;4805:6;4854:2;4842:9;4833:7;4829:23;4825:32;4822:119;;;4860:79;;:::i;:::-;4822:119;4980:1;5005:53;5050:7;5041:6;5030:9;5026:22;5005:53;:::i;:::-;4995:63;;4951:117;4746:329;;;;:::o;5081:474::-;5149:6;5157;5206:2;5194:9;5185:7;5181:23;5177:32;5174:119;;;5212:79;;:::i;:::-;5174:119;5332:1;5357:53;5402:7;5393:6;5382:9;5378:22;5357:53;:::i;:::-;5347:63;;5303:117;5459:2;5485:53;5530:7;5521:6;5510:9;5506:22;5485:53;:::i;:::-;5475:63;;5430:118;5081:474;;;;;:::o;5561:180::-;5609:77;5606:1;5599:88;5706:4;5703:1;5696:15;5730:4;5727:1;5720:15;5747:320;5791:6;5828:1;5822:4;5818:12;5808:22;;5875:1;5869:4;5865:12;5896:18;5886:81;;5952:4;5944:6;5940:17;5930:27;;5886:81;6014:2;6006:6;6003:14;5983:18;5980:38;5977:84;;6033:18;;:::i;:::-;5977:84;5798:269;5747:320;;;:::o;6073:180::-;6121:77;6118:1;6111:88;6218:4;6215:1;6208:15;6242:4;6239:1;6232:15;6259:102;6301:8;6348:5;6345:1;6341:13;6320:34;;6259:102;;;:::o;6367:848::-;6428:5;6435:4;6459:6;6450:15;;6483:5;6474:14;;6497:712;6518:1;6508:8;6505:15;6497:712;;;6613:4;6608:3;6604:14;6598:4;6595:24;6592:50;;;6622:18;;:::i;:::-;6592:50;6672:1;6662:8;6658:16;6655:451;;;7087:4;7080:5;7076:16;7067:25;;6655:451;7137:4;7131;7127:15;7119:23;;7167:32;7190:8;7167:32;:::i;:::-;7155:44;;6497:712;;;6367:848;;;;;;;:::o;7221:1073::-;7275:5;7466:8;7456:40;;7487:1;7478:10;;7489:5;;7456:40;7515:4;7505:36;;7532:1;7523:10;;7534:5;;7505:36;7601:4;7649:1;7644:27;;;;7685:1;7680:191;;;;7594:277;;7644:27;7662:1;7653:10;;7664:5;;;7680:191;7725:3;7715:8;7712:17;7709:43;;;7732:18;;:::i;:::-;7709:43;7781:8;7778:1;7774:16;7765:25;;7816:3;7809:5;7806:14;7803:40;;;7823:18;;:::i;:::-;7803:40;7856:5;;;7594:277;;7980:2;7970:8;7967:16;7961:3;7955:4;7952:13;7948:36;7930:2;7920:8;7917:16;7912:2;7906:4;7903:12;7899:35;7883:111;7880:246;;;8036:8;8030:4;8026:19;8017:28;;8071:3;8064:5;8061:14;8058:40;;;8078:18;;:::i;:::-;8058:40;8111:5;;7880:246;8151:42;8189:3;8179:8;8173:4;8170:1;8151:42;:::i;:::-;8136:57;;;;8225:4;8220:3;8216:14;8209:5;8206:25;8203:51;;;8234:18;;:::i;:::-;8203:51;8283:4;8276:5;8272:16;8263:25;;7221:1073;;;;;;:::o;8300:285::-;8360:5;8384:23;8402:4;8384:23;:::i;:::-;8376:31;;8428:27;8446:8;8428:27;:::i;:::-;8416:39;;8474:104;8511:66;8501:8;8495:4;8474:104;:::i;:::-;8465:113;;8300:285;;;;:::o;8591:410::-;8631:7;8654:20;8672:1;8654:20;:::i;:::-;8649:25;;8688:20;8706:1;8688:20;:::i;:::-;8683:25;;8743:1;8740;8736:9;8765:30;8783:11;8765:30;:::i;:::-;8754:41;;8944:1;8935:7;8931:15;8928:1;8925:22;8905:1;8898:9;8878:83;8855:139;;8974:18;;:::i;:::-;8855:139;8639:362;8591:410;;;;:::o;9007:85::-;9052:7;9081:5;9070:16;;9007:85;;;:::o;9098:101::-;9134:7;9174:18;9167:5;9163:30;9152:41;;9098:101;;;:::o;9205:60::-;9233:3;9254:5;9247:12;;9205:60;;;:::o;9271:156::-;9328:9;9361:60;9378:42;9387:32;9413:5;9387:32;:::i;:::-;9378:42;:::i;:::-;9361:60;:::i;:::-;9348:73;;9271:156;;;:::o;9433:145::-;9527:44;9565:5;9527:44;:::i;:::-;9522:3;9515:57;9433:145;;:::o;9584:236::-;9684:4;9722:2;9711:9;9707:18;9699:26;;9735:78;9810:1;9799:9;9795:17;9786:6;9735:78;:::i;:::-;9584:236;;;;:::o;9826:118::-;9913:24;9931:5;9913:24;:::i;:::-;9908:3;9901:37;9826:118;;:::o;9950:442::-;10099:4;10137:2;10126:9;10122:18;10114:26;;10150:71;10218:1;10207:9;10203:17;10194:6;10150:71;:::i;:::-;10231:72;10299:2;10288:9;10284:18;10275:6;10231:72;:::i;:::-;10313;10381:2;10370:9;10366:18;10357:6;10313:72;:::i;:::-;9950:442;;;;;;:::o;10398:222::-;10491:4;10529:2;10518:9;10514:18;10506:26;;10542:71;10610:1;10599:9;10595:17;10586:6;10542:71;:::i;:::-;10398:222;;;;:::o;10626:191::-;10666:3;10685:20;10703:1;10685:20;:::i;:::-;10680:25;;10719:20;10737:1;10719:20;:::i;:::-;10714:25;;10762:1;10759;10755:9;10748:16;;10783:3;10780:1;10777:10;10774:36;;;10790:18;;:::i;:::-;10774:36;10626:191;;;;:::o;10823:180::-;10871:77;10868:1;10861:88;10968:4;10965:1;10958:15;10992:4;10989:1;10982:15;11009:141;11058:4;11081:3;11073:11;;11104:3;11101:1;11094:14;11138:4;11135:1;11125:18;11117:26;;11009:141;;;:::o;11156:93::-;11193:6;11240:2;11235;11228:5;11224:14;11220:23;11210:33;;11156:93;;;:::o;11255:107::-;11299:8;11349:5;11343:4;11339:16;11318:37;;11255:107;;;;:::o;11368:393::-;11437:6;11487:1;11475:10;11471:18;11510:97;11540:66;11529:9;11510:97;:::i;:::-;11628:39;11658:8;11647:9;11628:39;:::i;:::-;11616:51;;11700:4;11696:9;11689:5;11685:21;11676:30;;11749:4;11739:8;11735:19;11728:5;11725:30;11715:40;;11444:317;;11368:393;;;;;:::o;11767:142::-;11817:9;11850:53;11868:34;11877:24;11895:5;11877:24;:::i;:::-;11868:34;:::i;:::-;11850:53;:::i;:::-;11837:66;;11767:142;;;:::o;11915:75::-;11958:3;11979:5;11972:12;;11915:75;;;:::o;11996:269::-;12106:39;12137:7;12106:39;:::i;:::-;12167:91;12216:41;12240:16;12216:41;:::i;:::-;12208:6;12201:4;12195:11;12167:91;:::i;:::-;12161:4;12154:105;12072:193;11996:269;;;:::o;12271:73::-;12316:3;12271:73;:::o;12350:189::-;12427:32;;:::i;:::-;12468:65;12526:6;12518;12512:4;12468:65;:::i;:::-;12403:136;12350:189;;:::o;12545:186::-;12605:120;12622:3;12615:5;12612:14;12605:120;;;12676:39;12713:1;12706:5;12676:39;:::i;:::-;12649:1;12642:5;12638:13;12629:22;;12605:120;;;12545:186;;:::o;12737:543::-;12838:2;12833:3;12830:11;12827:446;;;12872:38;12904:5;12872:38;:::i;:::-;12956:29;12974:10;12956:29;:::i;:::-;12946:8;12942:44;13139:2;13127:10;13124:18;13121:49;;;13160:8;13145:23;;13121:49;13183:80;13239:22;13257:3;13239:22;:::i;:::-;13229:8;13225:37;13212:11;13183:80;:::i;:::-;12842:431;;12827:446;12737:543;;;:::o;13286:117::-;13340:8;13390:5;13384:4;13380:16;13359:37;;13286:117;;;;:::o;13409:169::-;13453:6;13486:51;13534:1;13530:6;13522:5;13519:1;13515:13;13486:51;:::i;:::-;13482:56;13567:4;13561;13557:15;13547:25;;13460:118;13409:169;;;;:::o;13583:295::-;13659:4;13805:29;13830:3;13824:4;13805:29;:::i;:::-;13797:37;;13867:3;13864:1;13860:11;13854:4;13851:21;13843:29;;13583:295;;;;:::o;13883:1395::-;14000:37;14033:3;14000:37;:::i;:::-;14102:18;14094:6;14091:30;14088:56;;;14124:18;;:::i;:::-;14088:56;14168:38;14200:4;14194:11;14168:38;:::i;:::-;14253:67;14313:6;14305;14299:4;14253:67;:::i;:::-;14347:1;14371:4;14358:17;;14403:2;14395:6;14392:14;14420:1;14415:618;;;;15077:1;15094:6;15091:77;;;15143:9;15138:3;15134:19;15128:26;15119:35;;15091:77;15194:67;15254:6;15247:5;15194:67;:::i;:::-;15188:4;15181:81;15050:222;14385:887;;14415:618;14467:4;14463:9;14455:6;14451:22;14501:37;14533:4;14501:37;:::i;:::-;14560:1;14574:208;14588:7;14585:1;14582:14;14574:208;;;14667:9;14662:3;14658:19;14652:26;14644:6;14637:42;14718:1;14710:6;14706:14;14696:24;;14765:2;14754:9;14750:18;14737:31;;14611:4;14608:1;14604:12;14599:17;;14574:208;;;14810:6;14801:7;14798:19;14795:179;;;14868:9;14863:3;14859:19;14853:26;14911:48;14953:4;14945:6;14941:17;14930:9;14911:48;:::i;:::-;14903:6;14896:64;14818:156;14795:179;15020:1;15016;15008:6;15004:14;15000:22;14994:4;14987:36;14422:611;;;14385:887;;13975:1303;;;13883:1395;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1171800",
								"executionCost": "1219",
								"totalCost": "1173019"
							},
							"external": {
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "infinite",
								"balanceOf(address)": "2903",
								"decimals()": "427",
								"initialize()": "infinite",
								"mint(address,uint256)": "infinite",
								"name()": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "2530",
								"transfer(address,uint256)": "infinite",
								"transferFrom(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 374,
									"end": 668,
									"name": "PUSH",
									"source": 10,
									"value": "80"
								},
								{
									"begin": 374,
									"end": 668,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 374,
									"end": 668,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 374,
									"end": 668,
									"name": "CALLVALUE",
									"source": 10
								},
								{
									"begin": 374,
									"end": 668,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 374,
									"end": 668,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 374,
									"end": 668,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 374,
									"end": 668,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 374,
									"end": 668,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 374,
									"end": 668,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 374,
									"end": 668,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 374,
									"end": 668,
									"name": "tag",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 374,
									"end": 668,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 374,
									"end": 668,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 374,
									"end": 668,
									"name": "PUSH #[$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 374,
									"end": 668,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 374,
									"end": 668,
									"name": "PUSH [$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 374,
									"end": 668,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 374,
									"end": 668,
									"name": "CODECOPY",
									"source": 10
								},
								{
									"begin": 374,
									"end": 668,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 374,
									"end": 668,
									"name": "RETURN",
									"source": 10
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220ca217883c7127f872305edc8572137814500114f0d66348133af9042069b703964736f6c63430008190033",
									".code": [
										{
											"begin": 374,
											"end": 668,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 374,
											"end": 668,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 374,
											"end": 668,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 374,
											"end": 668,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 374,
											"end": 668,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "tag",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 374,
											"end": 668,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 374,
											"end": 668,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 374,
											"end": 668,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 374,
											"end": 668,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 374,
											"end": 668,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "PUSH",
											"source": 10,
											"value": "40C10F19"
										},
										{
											"begin": 374,
											"end": 668,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "14"
										},
										{
											"begin": 374,
											"end": 668,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "PUSH",
											"source": 10,
											"value": "40C10F19"
										},
										{
											"begin": 374,
											"end": 668,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "8"
										},
										{
											"begin": 374,
											"end": 668,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "PUSH",
											"source": 10,
											"value": "70A08231"
										},
										{
											"begin": 374,
											"end": 668,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 374,
											"end": 668,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "PUSH",
											"source": 10,
											"value": "8129FC1C"
										},
										{
											"begin": 374,
											"end": 668,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "10"
										},
										{
											"begin": 374,
											"end": 668,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "PUSH",
											"source": 10,
											"value": "95D89B41"
										},
										{
											"begin": 374,
											"end": 668,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "11"
										},
										{
											"begin": 374,
											"end": 668,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "PUSH",
											"source": 10,
											"value": "A9059CBB"
										},
										{
											"begin": 374,
											"end": 668,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "12"
										},
										{
											"begin": 374,
											"end": 668,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "PUSH",
											"source": 10,
											"value": "DD62ED3E"
										},
										{
											"begin": 374,
											"end": 668,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "13"
										},
										{
											"begin": 374,
											"end": 668,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 374,
											"end": 668,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "tag",
											"source": 10,
											"value": "14"
										},
										{
											"begin": 374,
											"end": 668,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "PUSH",
											"source": 10,
											"value": "6FDDE03"
										},
										{
											"begin": 374,
											"end": 668,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 374,
											"end": 668,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "PUSH",
											"source": 10,
											"value": "95EA7B3"
										},
										{
											"begin": 374,
											"end": 668,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 374,
											"end": 668,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "PUSH",
											"source": 10,
											"value": "18160DDD"
										},
										{
											"begin": 374,
											"end": 668,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 374,
											"end": 668,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "PUSH",
											"source": 10,
											"value": "23B872DD"
										},
										{
											"begin": 374,
											"end": 668,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 374,
											"end": 668,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "PUSH",
											"source": 10,
											"value": "313CE567"
										},
										{
											"begin": 374,
											"end": 668,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 374,
											"end": 668,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "tag",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 374,
											"end": 668,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 374,
											"end": 668,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 374,
											"end": 668,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "tag",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "15"
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "16"
										},
										{
											"begin": 3011,
											"end": 3155,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "tag",
											"source": 1,
											"value": "15"
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "18"
										},
										{
											"begin": 3011,
											"end": 3155,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "tag",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "tag",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "19"
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "21"
										},
										{
											"begin": 5505,
											"end": 5691,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "tag",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "22"
										},
										{
											"begin": 5505,
											"end": 5691,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "tag",
											"source": 1,
											"value": "19"
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "23"
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "24"
										},
										{
											"begin": 5505,
											"end": 5691,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "tag",
											"source": 1,
											"value": "23"
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "tag",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "25"
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "26"
										},
										{
											"begin": 4191,
											"end": 4343,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "tag",
											"source": 1,
											"value": "25"
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "27"
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "28"
										},
										{
											"begin": 4191,
											"end": 4343,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "tag",
											"source": 1,
											"value": "27"
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "tag",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "29"
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "30"
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "31"
										},
										{
											"begin": 6251,
											"end": 6495,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "tag",
											"source": 1,
											"value": "30"
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "32"
										},
										{
											"begin": 6251,
											"end": 6495,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "tag",
											"source": 1,
											"value": "29"
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "33"
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "24"
										},
										{
											"begin": 6251,
											"end": 6495,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "tag",
											"source": 1,
											"value": "33"
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "tag",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "34"
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "35"
										},
										{
											"begin": 4049,
											"end": 4131,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "tag",
											"source": 1,
											"value": "34"
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "36"
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "37"
										},
										{
											"begin": 4049,
											"end": 4131,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "tag",
											"source": 1,
											"value": "36"
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 583,
											"end": 666,
											"name": "tag",
											"source": 10,
											"value": "8"
										},
										{
											"begin": 583,
											"end": 666,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 583,
											"end": 666,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "38"
										},
										{
											"begin": 583,
											"end": 666,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 583,
											"end": 666,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 583,
											"end": 666,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 583,
											"end": 666,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 583,
											"end": 666,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 583,
											"end": 666,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 583,
											"end": 666,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 583,
											"end": 666,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "39"
										},
										{
											"begin": 583,
											"end": 666,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 583,
											"end": 666,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 583,
											"end": 666,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "21"
										},
										{
											"begin": 583,
											"end": 666,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 583,
											"end": 666,
											"name": "tag",
											"source": 10,
											"value": "39"
										},
										{
											"begin": 583,
											"end": 666,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 583,
											"end": 666,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 583,
											"end": 666,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 583,
											"end": 666,
											"name": "tag",
											"source": 10,
											"value": "38"
										},
										{
											"begin": 583,
											"end": 666,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 583,
											"end": 666,
											"name": "STOP",
											"source": 10
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "tag",
											"source": 1,
											"value": "9"
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "41"
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "42"
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "43"
										},
										{
											"begin": 4401,
											"end": 4572,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "tag",
											"source": 1,
											"value": "42"
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "44"
										},
										{
											"begin": 4401,
											"end": 4572,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "tag",
											"source": 1,
											"value": "41"
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "45"
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "28"
										},
										{
											"begin": 4401,
											"end": 4572,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "tag",
											"source": 1,
											"value": "45"
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 418,
											"end": 573,
											"name": "tag",
											"source": 10,
											"value": "10"
										},
										{
											"begin": 418,
											"end": 573,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 418,
											"end": 573,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "46"
										},
										{
											"begin": 418,
											"end": 573,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "47"
										},
										{
											"begin": 418,
											"end": 573,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 418,
											"end": 573,
											"name": "tag",
											"source": 10,
											"value": "46"
										},
										{
											"begin": 418,
											"end": 573,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 418,
											"end": 573,
											"name": "STOP",
											"source": 10
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "tag",
											"source": 1,
											"value": "11"
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "48"
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "49"
										},
										{
											"begin": 3268,
											"end": 3416,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "tag",
											"source": 1,
											"value": "48"
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "50"
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "18"
										},
										{
											"begin": 3268,
											"end": 3416,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "tag",
											"source": 1,
											"value": "50"
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "tag",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "51"
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "52"
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "21"
										},
										{
											"begin": 4767,
											"end": 4945,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "tag",
											"source": 1,
											"value": "52"
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "53"
										},
										{
											"begin": 4767,
											"end": 4945,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "tag",
											"source": 1,
											"value": "51"
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "54"
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "24"
										},
										{
											"begin": 4767,
											"end": 4945,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "tag",
											"source": 1,
											"value": "54"
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "tag",
											"source": 1,
											"value": "13"
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "55"
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "56"
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "57"
										},
										{
											"begin": 5003,
											"end": 5198,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "tag",
											"source": 1,
											"value": "56"
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "58"
										},
										{
											"begin": 5003,
											"end": 5198,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "tag",
											"source": 1,
											"value": "55"
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "59"
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "28"
										},
										{
											"begin": 5003,
											"end": 5198,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "tag",
											"source": 1,
											"value": "59"
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "tag",
											"source": 1,
											"value": "16"
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3056,
											"end": 3069,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 3081,
											"end": 3103,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3106,
											"end": 3124,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 3106,
											"end": 3122,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "62"
										},
										{
											"begin": 3106,
											"end": 3124,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3106,
											"end": 3124,
											"name": "tag",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 3106,
											"end": 3124,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3081,
											"end": 3124,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3081,
											"end": 3124,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3141,
											"end": 3142,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3141,
											"end": 3148,
											"name": "PUSH",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 3141,
											"end": 3148,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "63"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "64"
										},
										{
											"begin": 3134,
											"end": 3148,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "tag",
											"source": 1,
											"value": "63"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "65"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "64"
										},
										{
											"begin": 3134,
											"end": 3148,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "tag",
											"source": 1,
											"value": "65"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "66"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "67"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "66"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "tag",
											"source": 1,
											"value": "67"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "tag",
											"source": 1,
											"value": "68"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "68"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "tag",
											"source": 1,
											"value": "66"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3155,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "tag",
											"source": 1,
											"value": "22"
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5578,
											"end": 5582,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5594,
											"end": 5607,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5610,
											"end": 5622,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "70"
										},
										{
											"begin": 5610,
											"end": 5620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "71"
										},
										{
											"begin": 5610,
											"end": 5622,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 5610,
											"end": 5622,
											"name": "tag",
											"source": 1,
											"value": "70"
										},
										{
											"begin": 5610,
											"end": 5622,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5594,
											"end": 5622,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5594,
											"end": 5622,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5632,
											"end": 5663,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "72"
										},
										{
											"begin": 5641,
											"end": 5646,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5648,
											"end": 5655,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5657,
											"end": 5662,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5632,
											"end": 5640,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "73"
										},
										{
											"begin": 5632,
											"end": 5663,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 5632,
											"end": 5663,
											"name": "tag",
											"source": 1,
											"value": "72"
										},
										{
											"begin": 5632,
											"end": 5663,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5680,
											"end": 5684,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 5673,
											"end": 5684,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5673,
											"end": 5684,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5673,
											"end": 5684,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5505,
											"end": 5691,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "tag",
											"source": 1,
											"value": "26"
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4243,
											"end": 4250,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4262,
											"end": 4284,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4287,
											"end": 4305,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "75"
										},
										{
											"begin": 4287,
											"end": 4303,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "62"
										},
										{
											"begin": 4287,
											"end": 4305,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 4287,
											"end": 4305,
											"name": "tag",
											"source": 1,
											"value": "75"
										},
										{
											"begin": 4287,
											"end": 4305,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4262,
											"end": 4305,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4262,
											"end": 4305,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4322,
											"end": 4323,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4322,
											"end": 4336,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 4322,
											"end": 4336,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4322,
											"end": 4336,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 4315,
											"end": 4336,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4315,
											"end": 4336,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4315,
											"end": 4336,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4191,
											"end": 4343,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "tag",
											"source": 1,
											"value": "32"
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6338,
											"end": 6342,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6354,
											"end": 6369,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 6372,
											"end": 6384,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "77"
										},
										{
											"begin": 6372,
											"end": 6382,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "71"
										},
										{
											"begin": 6372,
											"end": 6384,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6372,
											"end": 6384,
											"name": "tag",
											"source": 1,
											"value": "77"
										},
										{
											"begin": 6372,
											"end": 6384,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6354,
											"end": 6384,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6354,
											"end": 6384,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6394,
											"end": 6431,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "78"
										},
										{
											"begin": 6410,
											"end": 6414,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 6416,
											"end": 6423,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 6425,
											"end": 6430,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 6394,
											"end": 6409,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "79"
										},
										{
											"begin": 6394,
											"end": 6431,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6394,
											"end": 6431,
											"name": "tag",
											"source": 1,
											"value": "78"
										},
										{
											"begin": 6394,
											"end": 6431,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6441,
											"end": 6467,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 6451,
											"end": 6455,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 6457,
											"end": 6459,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 6461,
											"end": 6466,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 6441,
											"end": 6450,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "81"
										},
										{
											"begin": 6441,
											"end": 6467,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6441,
											"end": 6467,
											"name": "tag",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 6441,
											"end": 6467,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6484,
											"end": 6488,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 6477,
											"end": 6488,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6477,
											"end": 6488,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6477,
											"end": 6488,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6251,
											"end": 6495,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "tag",
											"source": 1,
											"value": "35"
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4098,
											"end": 4103,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4122,
											"end": 4124,
											"name": "PUSH",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 4115,
											"end": 4124,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4115,
											"end": 4124,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4049,
											"end": 4131,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 583,
											"end": 666,
											"name": "tag",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 583,
											"end": 666,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 642,
											"end": 659,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 648,
											"end": 650,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 652,
											"end": 658,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 642,
											"end": 647,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "85"
										},
										{
											"begin": 642,
											"end": 659,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 642,
											"end": 659,
											"name": "tag",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 642,
											"end": 659,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 583,
											"end": 666,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 583,
											"end": 666,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 583,
											"end": 666,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "tag",
											"source": 1,
											"value": "44"
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4466,
											"end": 4473,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4485,
											"end": 4507,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4510,
											"end": 4528,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "87"
										},
										{
											"begin": 4510,
											"end": 4526,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "62"
										},
										{
											"begin": 4510,
											"end": 4528,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 4510,
											"end": 4528,
											"name": "tag",
											"source": 1,
											"value": "87"
										},
										{
											"begin": 4510,
											"end": 4528,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4485,
											"end": 4528,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4485,
											"end": 4528,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4545,
											"end": 4546,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4545,
											"end": 4556,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4545,
											"end": 4556,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4545,
											"end": 4565,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4557,
											"end": 4564,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 4545,
											"end": 4565,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4545,
											"end": 4565,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4545,
											"end": 4565,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4545,
											"end": 4565,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4545,
											"end": 4565,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4545,
											"end": 4565,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4545,
											"end": 4565,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4545,
											"end": 4565,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4545,
											"end": 4565,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4545,
											"end": 4565,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4545,
											"end": 4565,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4545,
											"end": 4565,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4545,
											"end": 4565,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4545,
											"end": 4565,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4545,
											"end": 4565,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 4545,
											"end": 4565,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 4538,
											"end": 4565,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4538,
											"end": 4565,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4538,
											"end": 4565,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4401,
											"end": 4572,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 418,
											"end": 573,
											"name": "tag",
											"source": 10,
											"value": "47"
										},
										{
											"begin": 418,
											"end": 573,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4158,
											"end": 4188,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4191,
											"end": 4217,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "89"
										},
										{
											"begin": 4191,
											"end": 4215,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "90"
										},
										{
											"begin": 4191,
											"end": 4217,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4191,
											"end": 4217,
											"name": "tag",
											"source": 0,
											"value": "89"
										},
										{
											"begin": 4191,
											"end": 4217,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4158,
											"end": 4217,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4158,
											"end": 4217,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4279,
											"end": 4298,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4302,
											"end": 4303,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "PUSH",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4301,
											"end": 4317,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4279,
											"end": 4317,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4279,
											"end": 4317,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4327,
											"end": 4345,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4348,
											"end": 4349,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4348,
											"end": 4362,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4348,
											"end": 4362,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4348,
											"end": 4362,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4348,
											"end": 4362,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4348,
											"end": 4362,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 4348,
											"end": 4362,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4348,
											"end": 4362,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 4348,
											"end": 4362,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 4348,
											"end": 4362,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4348,
											"end": 4362,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 4348,
											"end": 4362,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4348,
											"end": 4362,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4327,
											"end": 4362,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4327,
											"end": 4362,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4706,
											"end": 4723,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4741,
											"end": 4742,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4726,
											"end": 4737,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4726,
											"end": 4742,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4726,
											"end": 4742,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4726,
											"end": 4742,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 4726,
											"end": 4760,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4726,
											"end": 4760,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4726,
											"end": 4760,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "91"
										},
										{
											"begin": 4726,
											"end": 4760,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 4726,
											"end": 4760,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4746,
											"end": 4760,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4726,
											"end": 4760,
											"name": "tag",
											"source": 0,
											"value": "91"
										},
										{
											"begin": 4726,
											"end": 4760,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4706,
											"end": 4760,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4706,
											"end": 4760,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4770,
											"end": 4787,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4805,
											"end": 4806,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 4790,
											"end": 4801,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4790,
											"end": 4806,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4790,
											"end": 4806,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4790,
											"end": 4806,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 4790,
											"end": 4840,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4790,
											"end": 4840,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4790,
											"end": 4840,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "92"
										},
										{
											"begin": 4790,
											"end": 4840,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 4790,
											"end": 4840,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4839,
											"end": 4840,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4818,
											"end": 4822,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 4810,
											"end": 4835,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4810,
											"end": 4835,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4810,
											"end": 4835,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 4810,
											"end": 4840,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 4790,
											"end": 4840,
											"name": "tag",
											"source": 0,
											"value": "92"
										},
										{
											"begin": 4790,
											"end": 4840,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4770,
											"end": 4840,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4770,
											"end": 4840,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4856,
											"end": 4868,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4855,
											"end": 4868,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4855,
											"end": 4885,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4855,
											"end": 4885,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4855,
											"end": 4885,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "93"
										},
										{
											"begin": 4855,
											"end": 4885,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 4855,
											"end": 4885,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4873,
											"end": 4885,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4872,
											"end": 4885,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4855,
											"end": 4885,
											"name": "tag",
											"source": 0,
											"value": "93"
										},
										{
											"begin": 4855,
											"end": 4885,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4851,
											"end": 4942,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4851,
											"end": 4942,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "94"
										},
										{
											"begin": 4851,
											"end": 4942,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "PUSH",
											"source": 0,
											"value": "F92EE8A900000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 4851,
											"end": 4942,
											"name": "tag",
											"source": 0,
											"value": "94"
										},
										{
											"begin": 4851,
											"end": 4942,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4968,
											"end": 4969,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 4951,
											"end": 4952,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 4951,
											"end": 4965,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4951,
											"end": 4965,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4951,
											"end": 4965,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4983,
											"end": 4997,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4979,
											"end": 5046,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4979,
											"end": 5046,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "95"
										},
										{
											"begin": 4979,
											"end": 5046,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5031,
											"end": 5035,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 5013,
											"end": 5014,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 5013,
											"end": 5028,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5013,
											"end": 5028,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5013,
											"end": 5028,
											"name": "PUSH",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4979,
											"end": 5046,
											"name": "tag",
											"source": 0,
											"value": "95"
										},
										{
											"begin": 4979,
											"end": 5046,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 471,
											"end": 502,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "97"
										},
										{
											"begin": 471,
											"end": 502,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 471,
											"end": 502,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 471,
											"end": 502,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 471,
											"end": 502,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 471,
											"end": 502,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 471,
											"end": 502,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 471,
											"end": 502,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 471,
											"end": 502,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 471,
											"end": 502,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 471,
											"end": 502,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 471,
											"end": 502,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 471,
											"end": 502,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 471,
											"end": 502,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 471,
											"end": 502,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 10,
											"value": "4D79455243323056310000000000000000000000000000000000000000000000"
										},
										{
											"begin": 471,
											"end": 502,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 471,
											"end": 502,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 471,
											"end": 502,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 471,
											"end": 502,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 471,
											"end": 502,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 471,
											"end": 502,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 471,
											"end": 502,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 471,
											"end": 502,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 471,
											"end": 502,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 471,
											"end": 502,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 471,
											"end": 502,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 471,
											"end": 502,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 471,
											"end": 502,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 471,
											"end": 502,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 471,
											"end": 502,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 471,
											"end": 502,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 471,
											"end": 502,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 10,
											"value": "4D31000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 471,
											"end": 502,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 471,
											"end": 502,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 471,
											"end": 502,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 471,
											"end": 483,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "98"
										},
										{
											"begin": 471,
											"end": 502,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 471,
											"end": 502,
											"modifierDepth": 1,
											"name": "tag",
											"source": 10,
											"value": "97"
										},
										{
											"begin": 471,
											"end": 502,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 512,
											"end": 566,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "99"
										},
										{
											"begin": 518,
											"end": 528,
											"modifierDepth": 1,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 554,
											"end": 564,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "100"
										},
										{
											"begin": 554,
											"end": 562,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "35"
										},
										{
											"begin": 554,
											"end": 564,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 554,
											"end": 564,
											"modifierDepth": 1,
											"name": "tag",
											"source": 10,
											"value": "100"
										},
										{
											"begin": 554,
											"end": 564,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 546,
											"end": 565,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 546,
											"end": 565,
											"modifierDepth": 1,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 540,
											"end": 542,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 10,
											"value": "A"
										},
										{
											"begin": 540,
											"end": 565,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "101"
										},
										{
											"begin": 540,
											"end": 565,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 540,
											"end": 565,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 540,
											"end": 565,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "102"
										},
										{
											"begin": 540,
											"end": 565,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 540,
											"end": 565,
											"modifierDepth": 1,
											"name": "tag",
											"source": 10,
											"value": "101"
										},
										{
											"begin": 540,
											"end": 565,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 530,
											"end": 537,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 10,
											"value": "F4240"
										},
										{
											"begin": 530,
											"end": 565,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "103"
										},
										{
											"begin": 530,
											"end": 565,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 530,
											"end": 565,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 530,
											"end": 565,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "104"
										},
										{
											"begin": 530,
											"end": 565,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 530,
											"end": 565,
											"modifierDepth": 1,
											"name": "tag",
											"source": 10,
											"value": "103"
										},
										{
											"begin": 530,
											"end": 565,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 512,
											"end": 517,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "85"
										},
										{
											"begin": 512,
											"end": 566,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 512,
											"end": 566,
											"modifierDepth": 1,
											"name": "tag",
											"source": 10,
											"value": "99"
										},
										{
											"begin": 512,
											"end": 566,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5070,
											"end": 5084,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 5066,
											"end": 5167,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5066,
											"end": 5167,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "105"
										},
										{
											"begin": 5066,
											"end": 5167,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5118,
											"end": 5123,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5100,
											"end": 5101,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 5100,
											"end": 5115,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5100,
											"end": 5115,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5100,
											"end": 5115,
											"name": "PUSH",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "PUSH",
											"source": 0,
											"value": "C7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2"
										},
										{
											"begin": 5154,
											"end": 5155,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "106"
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "107"
										},
										{
											"begin": 5142,
											"end": 5156,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "tag",
											"source": 0,
											"value": "106"
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "LOG1",
											"source": 0
										},
										{
											"begin": 5066,
											"end": 5167,
											"name": "tag",
											"source": 0,
											"value": "105"
										},
										{
											"begin": 5066,
											"end": 5167,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4092,
											"end": 5173,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4092,
											"end": 5173,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4092,
											"end": 5173,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4092,
											"end": 5173,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4092,
											"end": 5173,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 418,
											"end": 573,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "tag",
											"source": 1,
											"value": "49"
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3315,
											"end": 3328,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 3340,
											"end": 3362,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3365,
											"end": 3383,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "109"
										},
										{
											"begin": 3365,
											"end": 3381,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "62"
										},
										{
											"begin": 3365,
											"end": 3383,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3365,
											"end": 3383,
											"name": "tag",
											"source": 1,
											"value": "109"
										},
										{
											"begin": 3365,
											"end": 3383,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3340,
											"end": 3383,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3340,
											"end": 3383,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3400,
											"end": 3401,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3400,
											"end": 3409,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 3400,
											"end": 3409,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "110"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "64"
										},
										{
											"begin": 3393,
											"end": 3409,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "tag",
											"source": 1,
											"value": "110"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "111"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "64"
										},
										{
											"begin": 3393,
											"end": 3409,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "tag",
											"source": 1,
											"value": "111"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "112"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "113"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "112"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "tag",
											"source": 1,
											"value": "113"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "tag",
											"source": 1,
											"value": "114"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "114"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "tag",
											"source": 1,
											"value": "112"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3268,
											"end": 3416,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "tag",
											"source": 1,
											"value": "53"
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4836,
											"end": 4840,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4852,
											"end": 4865,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4868,
											"end": 4880,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "116"
										},
										{
											"begin": 4868,
											"end": 4878,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "71"
										},
										{
											"begin": 4868,
											"end": 4880,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 4868,
											"end": 4880,
											"name": "tag",
											"source": 1,
											"value": "116"
										},
										{
											"begin": 4868,
											"end": 4880,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4852,
											"end": 4880,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4852,
											"end": 4880,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4890,
											"end": 4917,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "117"
										},
										{
											"begin": 4900,
											"end": 4905,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4907,
											"end": 4909,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 4911,
											"end": 4916,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 4890,
											"end": 4899,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "81"
										},
										{
											"begin": 4890,
											"end": 4917,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 4890,
											"end": 4917,
											"name": "tag",
											"source": 1,
											"value": "117"
										},
										{
											"begin": 4890,
											"end": 4917,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4934,
											"end": 4938,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 4927,
											"end": 4938,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4927,
											"end": 4938,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4927,
											"end": 4938,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4767,
											"end": 4945,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "tag",
											"source": 1,
											"value": "58"
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5083,
											"end": 5090,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5102,
											"end": 5124,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5127,
											"end": 5145,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "119"
										},
										{
											"begin": 5127,
											"end": 5143,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "62"
										},
										{
											"begin": 5127,
											"end": 5145,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 5127,
											"end": 5145,
											"name": "tag",
											"source": 1,
											"value": "119"
										},
										{
											"begin": 5127,
											"end": 5145,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5102,
											"end": 5145,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5102,
											"end": 5145,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5162,
											"end": 5163,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5162,
											"end": 5175,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 5162,
											"end": 5175,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5162,
											"end": 5182,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5176,
											"end": 5181,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5162,
											"end": 5182,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5162,
											"end": 5182,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5162,
											"end": 5182,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5162,
											"end": 5182,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5162,
											"end": 5182,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5162,
											"end": 5182,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5162,
											"end": 5182,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5162,
											"end": 5182,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5162,
											"end": 5182,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5162,
											"end": 5182,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5162,
											"end": 5182,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5162,
											"end": 5182,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5162,
											"end": 5182,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5162,
											"end": 5182,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5162,
											"end": 5182,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 5162,
											"end": 5191,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5183,
											"end": 5190,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 5162,
											"end": 5191,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5162,
											"end": 5191,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5162,
											"end": 5191,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5162,
											"end": 5191,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5162,
											"end": 5191,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5162,
											"end": 5191,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5162,
											"end": 5191,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5162,
											"end": 5191,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5162,
											"end": 5191,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5162,
											"end": 5191,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5162,
											"end": 5191,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5162,
											"end": 5191,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5162,
											"end": 5191,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5162,
											"end": 5191,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5162,
											"end": 5191,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 5162,
											"end": 5191,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 5155,
											"end": 5191,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5155,
											"end": 5191,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5155,
											"end": 5191,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5003,
											"end": 5198,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2242,
											"end": 2395,
											"name": "tag",
											"source": 1,
											"value": "62"
										},
										{
											"begin": 2242,
											"end": 2395,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2292,
											"end": 2314,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2359,
											"end": 2379,
											"name": "PUSH",
											"source": 1,
											"value": "52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE00"
										},
										{
											"begin": 2349,
											"end": 2379,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2349,
											"end": 2379,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2242,
											"end": 2395,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2242,
											"end": 2395,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 887,
											"end": 983,
											"name": "tag",
											"source": 2,
											"value": "71"
										},
										{
											"begin": 887,
											"end": 983,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 940,
											"end": 947,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 966,
											"end": 976,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 959,
											"end": 976,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 959,
											"end": 976,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 887,
											"end": 983,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 887,
											"end": 983,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 10264,
											"end": 10392,
											"name": "tag",
											"source": 1,
											"value": "73"
										},
										{
											"begin": 10264,
											"end": 10392,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10348,
											"end": 10385,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "123"
										},
										{
											"begin": 10357,
											"end": 10362,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 10364,
											"end": 10371,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 10373,
											"end": 10378,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 10380,
											"end": 10384,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 10348,
											"end": 10356,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "124"
										},
										{
											"begin": 10348,
											"end": 10385,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 10348,
											"end": 10385,
											"name": "tag",
											"source": 1,
											"value": "123"
										},
										{
											"begin": 10348,
											"end": 10385,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10264,
											"end": 10392,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 10264,
											"end": 10392,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 10264,
											"end": 10392,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 10264,
											"end": 10392,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 11993,
											"end": 12470,
											"name": "tag",
											"source": 1,
											"value": "79"
										},
										{
											"begin": 11993,
											"end": 12470,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 12092,
											"end": 12116,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 12119,
											"end": 12144,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "126"
										},
										{
											"begin": 12129,
											"end": 12134,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 12136,
											"end": 12143,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 12119,
											"end": 12128,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "58"
										},
										{
											"begin": 12119,
											"end": 12144,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 12119,
											"end": 12144,
											"name": "tag",
											"source": 1,
											"value": "126"
										},
										{
											"begin": 12119,
											"end": 12144,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 12092,
											"end": 12144,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 12092,
											"end": 12144,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 12178,
											"end": 12195,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12158,
											"end": 12174,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 12158,
											"end": 12195,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 12154,
											"end": 12464,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "127"
										},
										{
											"begin": 12154,
											"end": 12464,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 12234,
											"end": 12239,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 12215,
											"end": 12231,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 12215,
											"end": 12239,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 12211,
											"end": 12341,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 12211,
											"end": 12341,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "128"
										},
										{
											"begin": 12211,
											"end": 12341,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 12293,
											"end": 12300,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 12302,
											"end": 12318,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 12320,
											"end": 12325,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "PUSH",
											"source": 1,
											"value": "FB8F41B200000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "129"
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "130"
										},
										{
											"begin": 12266,
											"end": 12326,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "tag",
											"source": 1,
											"value": "129"
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 12211,
											"end": 12341,
											"name": "tag",
											"source": 1,
											"value": "128"
										},
										{
											"begin": 12211,
											"end": 12341,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 12382,
											"end": 12439,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "131"
										},
										{
											"begin": 12391,
											"end": 12396,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 12398,
											"end": 12405,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 12426,
											"end": 12431,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 12407,
											"end": 12423,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 12407,
											"end": 12431,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 12433,
											"end": 12438,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 12382,
											"end": 12390,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "124"
										},
										{
											"begin": 12382,
											"end": 12439,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 12382,
											"end": 12439,
											"name": "tag",
											"source": 1,
											"value": "131"
										},
										{
											"begin": 12382,
											"end": 12439,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 12154,
											"end": 12464,
											"name": "tag",
											"source": 1,
											"value": "127"
										},
										{
											"begin": 12154,
											"end": 12464,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 12082,
											"end": 12470,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 11993,
											"end": 12470,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 11993,
											"end": 12470,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 11993,
											"end": 12470,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 11993,
											"end": 12470,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6868,
											"end": 7168,
											"name": "tag",
											"source": 1,
											"value": "81"
										},
										{
											"begin": 6868,
											"end": 7168,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6967,
											"end": 6968,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6951,
											"end": 6969,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6951,
											"end": 6969,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6951,
											"end": 6955,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 6951,
											"end": 6969,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6951,
											"end": 6969,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6951,
											"end": 6969,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 6947,
											"end": 7033,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "133"
										},
										{
											"begin": 6947,
											"end": 7033,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 7019,
											"end": 7020,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "PUSH",
											"source": 1,
											"value": "96C6FD1E00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "134"
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "135"
										},
										{
											"begin": 6992,
											"end": 7022,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "tag",
											"source": 1,
											"value": "134"
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 6947,
											"end": 7033,
											"name": "tag",
											"source": 1,
											"value": "133"
										},
										{
											"begin": 6947,
											"end": 7033,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7060,
											"end": 7061,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7046,
											"end": 7062,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7046,
											"end": 7062,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 7046,
											"end": 7048,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 7046,
											"end": 7062,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7046,
											"end": 7062,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 7046,
											"end": 7062,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 7042,
											"end": 7128,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "136"
										},
										{
											"begin": 7042,
											"end": 7128,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 7114,
											"end": 7115,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "PUSH",
											"source": 1,
											"value": "EC442F0500000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "137"
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "135"
										},
										{
											"begin": 7085,
											"end": 7117,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "tag",
											"source": 1,
											"value": "137"
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 7042,
											"end": 7128,
											"name": "tag",
											"source": 1,
											"value": "136"
										},
										{
											"begin": 7042,
											"end": 7128,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7137,
											"end": 7161,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "138"
										},
										{
											"begin": 7145,
											"end": 7149,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 7151,
											"end": 7153,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 7155,
											"end": 7160,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 7137,
											"end": 7144,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "139"
										},
										{
											"begin": 7137,
											"end": 7161,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 7137,
											"end": 7161,
											"name": "tag",
											"source": 1,
											"value": "138"
										},
										{
											"begin": 7137,
											"end": 7161,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6868,
											"end": 7168,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6868,
											"end": 7168,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6868,
											"end": 7168,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6868,
											"end": 7168,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 8996,
											"end": 9204,
											"name": "tag",
											"source": 1,
											"value": "85"
										},
										{
											"begin": 8996,
											"end": 9204,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 9085,
											"end": 9086,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 9066,
											"end": 9087,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9066,
											"end": 9087,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 9066,
											"end": 9073,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 9066,
											"end": 9087,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9066,
											"end": 9087,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 9066,
											"end": 9087,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 9062,
											"end": 9153,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "141"
										},
										{
											"begin": 9062,
											"end": 9153,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 9139,
											"end": 9140,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "PUSH",
											"source": 1,
											"value": "EC442F0500000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "142"
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "135"
										},
										{
											"begin": 9110,
											"end": 9142,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "tag",
											"source": 1,
											"value": "142"
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 9062,
											"end": 9153,
											"name": "tag",
											"source": 1,
											"value": "141"
										},
										{
											"begin": 9062,
											"end": 9153,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 9162,
											"end": 9197,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "143"
										},
										{
											"begin": 9178,
											"end": 9179,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 9182,
											"end": 9189,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 9191,
											"end": 9196,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 9162,
											"end": 9169,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "139"
										},
										{
											"begin": 9162,
											"end": 9197,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 9162,
											"end": 9197,
											"name": "tag",
											"source": 1,
											"value": "143"
										},
										{
											"begin": 9162,
											"end": 9197,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8996,
											"end": 9204,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 8996,
											"end": 9204,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 8996,
											"end": 9204,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 8737,
											"end": 8907,
											"name": "tag",
											"source": 0,
											"value": "90"
										},
										{
											"begin": 8737,
											"end": 8907,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8795,
											"end": 8825,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8870,
											"end": 8891,
											"name": "PUSH",
											"source": 0,
											"value": "F0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00"
										},
										{
											"begin": 8860,
											"end": 8891,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8860,
											"end": 8891,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8737,
											"end": 8907,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8737,
											"end": 8907,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2577,
											"end": 2724,
											"name": "tag",
											"source": 1,
											"value": "98"
										},
										{
											"begin": 2577,
											"end": 2724,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "146"
										},
										{
											"begin": 6931,
											"end": 6949,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "147"
										},
										{
											"begin": 6931,
											"end": 6951,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "tag",
											"source": 0,
											"value": "146"
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2679,
											"end": 2717,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "149"
										},
										{
											"begin": 2702,
											"end": 2707,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2709,
											"end": 2716,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2679,
											"end": 2701,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "150"
										},
										{
											"begin": 2679,
											"end": 2717,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2679,
											"end": 2717,
											"modifierDepth": 1,
											"name": "tag",
											"source": 1,
											"value": "149"
										},
										{
											"begin": 2679,
											"end": 2717,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2577,
											"end": 2724,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2577,
											"end": 2724,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2577,
											"end": 2724,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 11224,
											"end": 11711,
											"name": "tag",
											"source": 1,
											"value": "124"
										},
										{
											"begin": 11224,
											"end": 11711,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 11332,
											"end": 11354,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 11357,
											"end": 11375,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "152"
										},
										{
											"begin": 11357,
											"end": 11373,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "62"
										},
										{
											"begin": 11357,
											"end": 11375,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 11357,
											"end": 11375,
											"name": "tag",
											"source": 1,
											"value": "152"
										},
										{
											"begin": 11357,
											"end": 11375,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 11332,
											"end": 11375,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 11332,
											"end": 11375,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 11406,
											"end": 11407,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 11389,
											"end": 11408,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11389,
											"end": 11408,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 11389,
											"end": 11394,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 11389,
											"end": 11408,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11389,
											"end": 11408,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 11389,
											"end": 11408,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 11385,
											"end": 11474,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "153"
										},
										{
											"begin": 11385,
											"end": 11474,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 11460,
											"end": 11461,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "PUSH",
											"source": 1,
											"value": "E602DF0500000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "154"
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "135"
										},
										{
											"begin": 11431,
											"end": 11463,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "tag",
											"source": 1,
											"value": "154"
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 11385,
											"end": 11474,
											"name": "tag",
											"source": 1,
											"value": "153"
										},
										{
											"begin": 11385,
											"end": 11474,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 11506,
											"end": 11507,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 11487,
											"end": 11508,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11487,
											"end": 11508,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 11487,
											"end": 11494,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 11487,
											"end": 11508,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11487,
											"end": 11508,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 11487,
											"end": 11508,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 11483,
											"end": 11573,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "155"
										},
										{
											"begin": 11483,
											"end": 11573,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 11559,
											"end": 11560,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "PUSH",
											"source": 1,
											"value": "94280D6200000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "156"
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "135"
										},
										{
											"begin": 11531,
											"end": 11562,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "tag",
											"source": 1,
											"value": "156"
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 11483,
											"end": 11573,
											"name": "tag",
											"source": 1,
											"value": "155"
										},
										{
											"begin": 11483,
											"end": 11573,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 11614,
											"end": 11619,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 11582,
											"end": 11583,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 11582,
											"end": 11595,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 11582,
											"end": 11595,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 11596,
											"end": 11601,
											"name": "DUP8",
											"source": 1
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 11582,
											"end": 11611,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 11603,
											"end": 11610,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 11582,
											"end": 11611,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11582,
											"end": 11611,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 11582,
											"end": 11611,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11582,
											"end": 11611,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 11582,
											"end": 11611,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 11582,
											"end": 11611,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 11582,
											"end": 11611,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 11582,
											"end": 11611,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 11582,
											"end": 11611,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 11582,
											"end": 11611,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 11582,
											"end": 11611,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 11582,
											"end": 11611,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 11582,
											"end": 11611,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 11582,
											"end": 11611,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 11582,
											"end": 11611,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 11582,
											"end": 11619,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 11582,
											"end": 11619,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 11582,
											"end": 11619,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 11582,
											"end": 11619,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 11633,
											"end": 11642,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 11629,
											"end": 11705,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 11629,
											"end": 11705,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "157"
										},
										{
											"begin": 11629,
											"end": 11705,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 11679,
											"end": 11686,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 11672,
											"end": 11677,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "PUSH",
											"source": 1,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 11688,
											"end": 11693,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "158"
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "28"
										},
										{
											"begin": 11663,
											"end": 11694,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "tag",
											"source": 1,
											"value": "158"
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "LOG3",
											"source": 1
										},
										{
											"begin": 11629,
											"end": 11705,
											"name": "tag",
											"source": 1,
											"value": "157"
										},
										{
											"begin": 11629,
											"end": 11705,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 11322,
											"end": 11711,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 11224,
											"end": 11711,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 11224,
											"end": 11711,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 11224,
											"end": 11711,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 11224,
											"end": 11711,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 11224,
											"end": 11711,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 7483,
											"end": 8653,
											"name": "tag",
											"source": 1,
											"value": "139"
										},
										{
											"begin": 7483,
											"end": 8653,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7568,
											"end": 7590,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7593,
											"end": 7611,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "160"
										},
										{
											"begin": 7593,
											"end": 7609,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "62"
										},
										{
											"begin": 7593,
											"end": 7611,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 7593,
											"end": 7611,
											"name": "tag",
											"source": 1,
											"value": "160"
										},
										{
											"begin": 7593,
											"end": 7611,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7568,
											"end": 7611,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7568,
											"end": 7611,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7641,
											"end": 7642,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7625,
											"end": 7643,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7625,
											"end": 7643,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 7625,
											"end": 7629,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 7625,
											"end": 7643,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7625,
											"end": 7643,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 7625,
											"end": 7643,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 7621,
											"end": 8167,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "161"
										},
										{
											"begin": 7621,
											"end": 8167,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 7779,
											"end": 7784,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7761,
											"end": 7762,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7761,
											"end": 7775,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 7761,
											"end": 7775,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7761,
											"end": 7775,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7761,
											"end": 7784,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 7761,
											"end": 7784,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 7761,
											"end": 7784,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 7761,
											"end": 7784,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "162"
										},
										{
											"begin": 7761,
											"end": 7784,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 7761,
											"end": 7784,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7761,
											"end": 7784,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "163"
										},
										{
											"begin": 7761,
											"end": 7784,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 7761,
											"end": 7784,
											"name": "tag",
											"source": 1,
											"value": "162"
										},
										{
											"begin": 7761,
											"end": 7784,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7761,
											"end": 7784,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 7761,
											"end": 7784,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7761,
											"end": 7784,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7761,
											"end": 7784,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7761,
											"end": 7784,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7761,
											"end": 7784,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 7761,
											"end": 7784,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7621,
											"end": 8167,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "164"
										},
										{
											"begin": 7621,
											"end": 8167,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 7621,
											"end": 8167,
											"name": "tag",
											"source": 1,
											"value": "161"
										},
										{
											"begin": 7621,
											"end": 8167,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7815,
											"end": 7834,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7837,
											"end": 7838,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7837,
											"end": 7848,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7837,
											"end": 7848,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7849,
											"end": 7853,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 7815,
											"end": 7854,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7815,
											"end": 7854,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7886,
											"end": 7891,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 7872,
											"end": 7883,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7872,
											"end": 7891,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 7868,
											"end": 7983,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 7868,
											"end": 7983,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "165"
										},
										{
											"begin": 7868,
											"end": 7983,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 7943,
											"end": 7947,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 7949,
											"end": 7960,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7962,
											"end": 7967,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "PUSH",
											"source": 1,
											"value": "E450D38C00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "166"
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "130"
										},
										{
											"begin": 7918,
											"end": 7968,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "tag",
											"source": 1,
											"value": "166"
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 7868,
											"end": 7983,
											"name": "tag",
											"source": 1,
											"value": "165"
										},
										{
											"begin": 7868,
											"end": 7983,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8137,
											"end": 8142,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 8123,
											"end": 8134,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8123,
											"end": 8142,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 8103,
											"end": 8104,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 8103,
											"end": 8114,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 8103,
											"end": 8114,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8103,
											"end": 8120,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 8115,
											"end": 8119,
											"name": "DUP8",
											"source": 1
										},
										{
											"begin": 8103,
											"end": 8120,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8103,
											"end": 8120,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 8103,
											"end": 8120,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8103,
											"end": 8120,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 8103,
											"end": 8120,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8103,
											"end": 8120,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 8103,
											"end": 8120,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 8103,
											"end": 8120,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8103,
											"end": 8120,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8103,
											"end": 8120,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8103,
											"end": 8120,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 8103,
											"end": 8120,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 8103,
											"end": 8120,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8103,
											"end": 8120,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 8103,
											"end": 8120,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 8103,
											"end": 8142,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8103,
											"end": 8142,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8103,
											"end": 8142,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 8103,
											"end": 8142,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7801,
											"end": 8167,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7621,
											"end": 8167,
											"name": "tag",
											"source": 1,
											"value": "164"
										},
										{
											"begin": 7621,
											"end": 8167,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8195,
											"end": 8196,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 8181,
											"end": 8197,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8181,
											"end": 8197,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 8181,
											"end": 8183,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 8181,
											"end": 8197,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8181,
											"end": 8197,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 8181,
											"end": 8197,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 8177,
											"end": 8606,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "167"
										},
										{
											"begin": 8177,
											"end": 8606,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 8362,
											"end": 8367,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8344,
											"end": 8345,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8344,
											"end": 8358,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 8344,
											"end": 8358,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8344,
											"end": 8358,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 8344,
											"end": 8367,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 8344,
											"end": 8367,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 8344,
											"end": 8367,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 8344,
											"end": 8367,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 8344,
											"end": 8367,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 8344,
											"end": 8367,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 8344,
											"end": 8367,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 8344,
											"end": 8367,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8344,
											"end": 8367,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8344,
											"end": 8367,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 8344,
											"end": 8367,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 8177,
											"end": 8606,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "168"
										},
										{
											"begin": 8177,
											"end": 8606,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 8177,
											"end": 8606,
											"name": "tag",
											"source": 1,
											"value": "167"
										},
										{
											"begin": 8177,
											"end": 8606,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8576,
											"end": 8581,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8557,
											"end": 8558,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8557,
											"end": 8568,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 8557,
											"end": 8568,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8557,
											"end": 8572,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 8569,
											"end": 8571,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 8557,
											"end": 8572,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8557,
											"end": 8572,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 8557,
											"end": 8572,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8557,
											"end": 8572,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 8557,
											"end": 8572,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8557,
											"end": 8572,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 8557,
											"end": 8572,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 8557,
											"end": 8572,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8557,
											"end": 8572,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8557,
											"end": 8572,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8557,
											"end": 8572,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 8557,
											"end": 8572,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 8557,
											"end": 8572,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8557,
											"end": 8572,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 8557,
											"end": 8572,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 8557,
											"end": 8572,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 8557,
											"end": 8581,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 8557,
											"end": 8581,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 8557,
											"end": 8581,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 8557,
											"end": 8581,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8557,
											"end": 8581,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 8557,
											"end": 8581,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 8557,
											"end": 8581,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 8557,
											"end": 8581,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8557,
											"end": 8581,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8557,
											"end": 8581,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 8557,
											"end": 8581,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 8177,
											"end": 8606,
											"name": "tag",
											"source": 1,
											"value": "168"
										},
										{
											"begin": 8177,
											"end": 8606,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8636,
											"end": 8638,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 8630,
											"end": 8634,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "PUSH",
											"source": 1,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 8640,
											"end": 8645,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "169"
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "28"
										},
										{
											"begin": 8621,
											"end": 8646,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "tag",
											"source": 1,
											"value": "169"
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "LOG3",
											"source": 1
										},
										{
											"begin": 7558,
											"end": 8653,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7483,
											"end": 8653,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7483,
											"end": 8653,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7483,
											"end": 8653,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7483,
											"end": 8653,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 7084,
											"end": 7225,
											"name": "tag",
											"source": 0,
											"value": "147"
										},
										{
											"begin": 7084,
											"end": 7225,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7151,
											"end": 7168,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "171"
										},
										{
											"begin": 7151,
											"end": 7166,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "172"
										},
										{
											"begin": 7151,
											"end": 7168,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7151,
											"end": 7168,
											"name": "tag",
											"source": 0,
											"value": "171"
										},
										{
											"begin": 7151,
											"end": 7168,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7146,
											"end": 7219,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "173"
										},
										{
											"begin": 7146,
											"end": 7219,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "PUSH",
											"source": 0,
											"value": "D7E6BCF800000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 7146,
											"end": 7219,
											"name": "tag",
											"source": 0,
											"value": "173"
										},
										{
											"begin": 7146,
											"end": 7219,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7084,
											"end": 7225,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2730,
											"end": 2946,
											"name": "tag",
											"source": 1,
											"value": "150"
										},
										{
											"begin": 2730,
											"end": 2946,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "175"
										},
										{
											"begin": 6931,
											"end": 6949,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "147"
										},
										{
											"begin": 6931,
											"end": 6951,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "tag",
											"source": 0,
											"value": "175"
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2842,
											"end": 2864,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2867,
											"end": 2885,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "177"
										},
										{
											"begin": 2867,
											"end": 2883,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "62"
										},
										{
											"begin": 2867,
											"end": 2885,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2867,
											"end": 2885,
											"modifierDepth": 1,
											"name": "tag",
											"source": 1,
											"value": "177"
										},
										{
											"begin": 2867,
											"end": 2885,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2842,
											"end": 2885,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2842,
											"end": 2885,
											"modifierDepth": 1,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2905,
											"end": 2910,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2895,
											"end": 2896,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2895,
											"end": 2902,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 2895,
											"end": 2902,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2895,
											"end": 2910,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2895,
											"end": 2910,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2895,
											"end": 2910,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "178"
										},
										{
											"begin": 2895,
											"end": 2910,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2895,
											"end": 2910,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2895,
											"end": 2910,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "179"
										},
										{
											"begin": 2895,
											"end": 2910,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2895,
											"end": 2910,
											"modifierDepth": 1,
											"name": "tag",
											"source": 1,
											"value": "178"
										},
										{
											"begin": 2895,
											"end": 2910,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2895,
											"end": 2910,
											"modifierDepth": 1,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2932,
											"end": 2939,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2920,
											"end": 2921,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2920,
											"end": 2929,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2920,
											"end": 2929,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2920,
											"end": 2939,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2920,
											"end": 2939,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2920,
											"end": 2939,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "180"
										},
										{
											"begin": 2920,
											"end": 2939,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2920,
											"end": 2939,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2920,
											"end": 2939,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "179"
										},
										{
											"begin": 2920,
											"end": 2939,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2920,
											"end": 2939,
											"modifierDepth": 1,
											"name": "tag",
											"source": 1,
											"value": "180"
										},
										{
											"begin": 2920,
											"end": 2939,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2920,
											"end": 2939,
											"modifierDepth": 1,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2832,
											"end": 2946,
											"modifierDepth": 1,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2730,
											"end": 2946,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2730,
											"end": 2946,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2730,
											"end": 2946,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 8487,
											"end": 8607,
											"name": "tag",
											"source": 0,
											"value": "172"
										},
										{
											"begin": 8487,
											"end": 8607,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8537,
											"end": 8541,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8560,
											"end": 8586,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "182"
										},
										{
											"begin": 8560,
											"end": 8584,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "90"
										},
										{
											"begin": 8560,
											"end": 8586,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 8560,
											"end": 8586,
											"name": "tag",
											"source": 0,
											"value": "182"
										},
										{
											"begin": 8560,
											"end": 8586,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8560,
											"end": 8600,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 8560,
											"end": 8600,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 8560,
											"end": 8600,
											"name": "PUSH",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 8560,
											"end": 8600,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8560,
											"end": 8600,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 8560,
											"end": 8600,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8560,
											"end": 8600,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 8560,
											"end": 8600,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 8560,
											"end": 8600,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8560,
											"end": 8600,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 8560,
											"end": 8600,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 8560,
											"end": 8600,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 8553,
											"end": 8600,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8553,
											"end": 8600,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 8487,
											"end": 8607,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 8487,
											"end": 8607,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7,
											"end": 106,
											"name": "tag",
											"source": 11,
											"value": "183"
										},
										{
											"begin": 7,
											"end": 106,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 59,
											"end": 65,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 93,
											"end": 98,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 87,
											"end": 99,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 77,
											"end": 99,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 77,
											"end": 99,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7,
											"end": 106,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 7,
											"end": 106,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7,
											"end": 106,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7,
											"end": 106,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 112,
											"end": 281,
											"name": "tag",
											"source": 11,
											"value": "184"
										},
										{
											"begin": 112,
											"end": 281,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 196,
											"end": 207,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 230,
											"end": 236,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 225,
											"end": 228,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 218,
											"end": 237,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 270,
											"end": 274,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 265,
											"end": 268,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 261,
											"end": 275,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 246,
											"end": 275,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 246,
											"end": 275,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 112,
											"end": 281,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 112,
											"end": 281,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 112,
											"end": 281,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 112,
											"end": 281,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 112,
											"end": 281,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 287,
											"end": 426,
											"name": "tag",
											"source": 11,
											"value": "185"
										},
										{
											"begin": 287,
											"end": 426,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 376,
											"end": 382,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 371,
											"end": 374,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 366,
											"end": 369,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 360,
											"end": 383,
											"name": "MCOPY",
											"source": 11
										},
										{
											"begin": 417,
											"end": 418,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 408,
											"end": 414,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 403,
											"end": 406,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 399,
											"end": 415,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 392,
											"end": 419,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 287,
											"end": 426,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 287,
											"end": 426,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 287,
											"end": 426,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 287,
											"end": 426,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 432,
											"end": 534,
											"name": "tag",
											"source": 11,
											"value": "186"
										},
										{
											"begin": 432,
											"end": 534,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 473,
											"end": 479,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 524,
											"end": 526,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 520,
											"end": 527,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 515,
											"end": 517,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 508,
											"end": 513,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 504,
											"end": 518,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 500,
											"end": 528,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 490,
											"end": 528,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 490,
											"end": 528,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 432,
											"end": 534,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 432,
											"end": 534,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 432,
											"end": 534,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 432,
											"end": 534,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 540,
											"end": 917,
											"name": "tag",
											"source": 11,
											"value": "187"
										},
										{
											"begin": 540,
											"end": 917,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 628,
											"end": 631,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 656,
											"end": 695,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "235"
										},
										{
											"begin": 689,
											"end": 694,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 656,
											"end": 695,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "183"
										},
										{
											"begin": 656,
											"end": 695,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 656,
											"end": 695,
											"name": "tag",
											"source": 11,
											"value": "235"
										},
										{
											"begin": 656,
											"end": 695,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 711,
											"end": 782,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "236"
										},
										{
											"begin": 775,
											"end": 781,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 770,
											"end": 773,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 711,
											"end": 782,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "184"
										},
										{
											"begin": 711,
											"end": 782,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 711,
											"end": 782,
											"name": "tag",
											"source": 11,
											"value": "236"
										},
										{
											"begin": 711,
											"end": 782,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 704,
											"end": 782,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 704,
											"end": 782,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 791,
											"end": 856,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "237"
										},
										{
											"begin": 849,
											"end": 855,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 844,
											"end": 847,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 837,
											"end": 841,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 830,
											"end": 835,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 826,
											"end": 842,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 791,
											"end": 856,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "185"
										},
										{
											"begin": 791,
											"end": 856,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 791,
											"end": 856,
											"name": "tag",
											"source": 11,
											"value": "237"
										},
										{
											"begin": 791,
											"end": 856,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 881,
											"end": 910,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "238"
										},
										{
											"begin": 903,
											"end": 909,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 881,
											"end": 910,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "186"
										},
										{
											"begin": 881,
											"end": 910,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 881,
											"end": 910,
											"name": "tag",
											"source": 11,
											"value": "238"
										},
										{
											"begin": 881,
											"end": 910,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 876,
											"end": 879,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 872,
											"end": 911,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 865,
											"end": 911,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 865,
											"end": 911,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 632,
											"end": 917,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 540,
											"end": 917,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 540,
											"end": 917,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 540,
											"end": 917,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 540,
											"end": 917,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 540,
											"end": 917,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 923,
											"end": 1236,
											"name": "tag",
											"source": 11,
											"value": "18"
										},
										{
											"begin": 923,
											"end": 1236,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1036,
											"end": 1040,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1074,
											"end": 1076,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1063,
											"end": 1072,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1059,
											"end": 1077,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1051,
											"end": 1077,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1051,
											"end": 1077,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1123,
											"end": 1132,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1117,
											"end": 1121,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1113,
											"end": 1133,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1109,
											"end": 1110,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1098,
											"end": 1107,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 1094,
											"end": 1111,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1087,
											"end": 1134,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1151,
											"end": 1229,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "240"
										},
										{
											"begin": 1224,
											"end": 1228,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1215,
											"end": 1221,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 1151,
											"end": 1229,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "187"
										},
										{
											"begin": 1151,
											"end": 1229,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1151,
											"end": 1229,
											"name": "tag",
											"source": 11,
											"value": "240"
										},
										{
											"begin": 1151,
											"end": 1229,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1143,
											"end": 1229,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1143,
											"end": 1229,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 923,
											"end": 1236,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 923,
											"end": 1236,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 923,
											"end": 1236,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 923,
											"end": 1236,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 923,
											"end": 1236,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1323,
											"end": 1440,
											"name": "tag",
											"source": 11,
											"value": "189"
										},
										{
											"begin": 1323,
											"end": 1440,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1432,
											"end": 1433,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1429,
											"end": 1430,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1422,
											"end": 1434,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1569,
											"end": 1695,
											"name": "tag",
											"source": 11,
											"value": "191"
										},
										{
											"begin": 1569,
											"end": 1695,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1606,
											"end": 1613,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1646,
											"end": 1688,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1639,
											"end": 1644,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1635,
											"end": 1689,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1624,
											"end": 1689,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1624,
											"end": 1689,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1569,
											"end": 1695,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1569,
											"end": 1695,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1569,
											"end": 1695,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1569,
											"end": 1695,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1701,
											"end": 1797,
											"name": "tag",
											"source": 11,
											"value": "192"
										},
										{
											"begin": 1701,
											"end": 1797,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1738,
											"end": 1745,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1767,
											"end": 1791,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "246"
										},
										{
											"begin": 1785,
											"end": 1790,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1767,
											"end": 1791,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "191"
										},
										{
											"begin": 1767,
											"end": 1791,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1767,
											"end": 1791,
											"name": "tag",
											"source": 11,
											"value": "246"
										},
										{
											"begin": 1767,
											"end": 1791,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1756,
											"end": 1791,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1756,
											"end": 1791,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1701,
											"end": 1797,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1701,
											"end": 1797,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1701,
											"end": 1797,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1701,
											"end": 1797,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1803,
											"end": 1925,
											"name": "tag",
											"source": 11,
											"value": "193"
										},
										{
											"begin": 1803,
											"end": 1925,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1876,
											"end": 1900,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "248"
										},
										{
											"begin": 1894,
											"end": 1899,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1876,
											"end": 1900,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "192"
										},
										{
											"begin": 1876,
											"end": 1900,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1876,
											"end": 1900,
											"name": "tag",
											"source": 11,
											"value": "248"
										},
										{
											"begin": 1876,
											"end": 1900,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1869,
											"end": 1874,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1866,
											"end": 1901,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 1856,
											"end": 1919,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "249"
										},
										{
											"begin": 1856,
											"end": 1919,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1915,
											"end": 1916,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1912,
											"end": 1913,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1905,
											"end": 1917,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1856,
											"end": 1919,
											"name": "tag",
											"source": 11,
											"value": "249"
										},
										{
											"begin": 1856,
											"end": 1919,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1803,
											"end": 1925,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1803,
											"end": 1925,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1931,
											"end": 2070,
											"name": "tag",
											"source": 11,
											"value": "194"
										},
										{
											"begin": 1931,
											"end": 2070,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1977,
											"end": 1982,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2015,
											"end": 2021,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2002,
											"end": 2022,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 1993,
											"end": 2022,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1993,
											"end": 2022,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2031,
											"end": 2064,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "251"
										},
										{
											"begin": 2058,
											"end": 2063,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2031,
											"end": 2064,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "193"
										},
										{
											"begin": 2031,
											"end": 2064,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2031,
											"end": 2064,
											"name": "tag",
											"source": 11,
											"value": "251"
										},
										{
											"begin": 2031,
											"end": 2064,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1931,
											"end": 2070,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 1931,
											"end": 2070,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1931,
											"end": 2070,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1931,
											"end": 2070,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1931,
											"end": 2070,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2076,
											"end": 2153,
											"name": "tag",
											"source": 11,
											"value": "195"
										},
										{
											"begin": 2076,
											"end": 2153,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2113,
											"end": 2120,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2142,
											"end": 2147,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2131,
											"end": 2147,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2131,
											"end": 2147,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2076,
											"end": 2153,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2076,
											"end": 2153,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2076,
											"end": 2153,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2076,
											"end": 2153,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2159,
											"end": 2281,
											"name": "tag",
											"source": 11,
											"value": "196"
										},
										{
											"begin": 2159,
											"end": 2281,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2232,
											"end": 2256,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "254"
										},
										{
											"begin": 2250,
											"end": 2255,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2232,
											"end": 2256,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "195"
										},
										{
											"begin": 2232,
											"end": 2256,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2232,
											"end": 2256,
											"name": "tag",
											"source": 11,
											"value": "254"
										},
										{
											"begin": 2232,
											"end": 2256,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2225,
											"end": 2230,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2222,
											"end": 2257,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 2212,
											"end": 2275,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "255"
										},
										{
											"begin": 2212,
											"end": 2275,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2271,
											"end": 2272,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2268,
											"end": 2269,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2261,
											"end": 2273,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 2212,
											"end": 2275,
											"name": "tag",
											"source": 11,
											"value": "255"
										},
										{
											"begin": 2212,
											"end": 2275,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2159,
											"end": 2281,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2159,
											"end": 2281,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2287,
											"end": 2426,
											"name": "tag",
											"source": 11,
											"value": "197"
										},
										{
											"begin": 2287,
											"end": 2426,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2333,
											"end": 2338,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2371,
											"end": 2377,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2358,
											"end": 2378,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 2349,
											"end": 2378,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2349,
											"end": 2378,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2387,
											"end": 2420,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "257"
										},
										{
											"begin": 2414,
											"end": 2419,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2387,
											"end": 2420,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "196"
										},
										{
											"begin": 2387,
											"end": 2420,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2387,
											"end": 2420,
											"name": "tag",
											"source": 11,
											"value": "257"
										},
										{
											"begin": 2387,
											"end": 2420,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2287,
											"end": 2426,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 2287,
											"end": 2426,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2287,
											"end": 2426,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2287,
											"end": 2426,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2287,
											"end": 2426,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2432,
											"end": 2906,
											"name": "tag",
											"source": 11,
											"value": "21"
										},
										{
											"begin": 2432,
											"end": 2906,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2500,
											"end": 2506,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2508,
											"end": 2514,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2557,
											"end": 2559,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2545,
											"end": 2554,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 2536,
											"end": 2543,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 2532,
											"end": 2555,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 2528,
											"end": 2560,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 2525,
											"end": 2644,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2525,
											"end": 2644,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "259"
										},
										{
											"begin": 2525,
											"end": 2644,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2563,
											"end": 2642,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "260"
										},
										{
											"begin": 2563,
											"end": 2642,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "189"
										},
										{
											"begin": 2563,
											"end": 2642,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2563,
											"end": 2642,
											"name": "tag",
											"source": 11,
											"value": "260"
										},
										{
											"begin": 2563,
											"end": 2642,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2525,
											"end": 2644,
											"name": "tag",
											"source": 11,
											"value": "259"
										},
										{
											"begin": 2525,
											"end": 2644,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2683,
											"end": 2684,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2708,
											"end": 2761,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "261"
										},
										{
											"begin": 2753,
											"end": 2760,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 2744,
											"end": 2750,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2733,
											"end": 2742,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 2729,
											"end": 2751,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2708,
											"end": 2761,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "194"
										},
										{
											"begin": 2708,
											"end": 2761,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2708,
											"end": 2761,
											"name": "tag",
											"source": 11,
											"value": "261"
										},
										{
											"begin": 2708,
											"end": 2761,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2698,
											"end": 2761,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 2698,
											"end": 2761,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2654,
											"end": 2771,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2810,
											"end": 2812,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2836,
											"end": 2889,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "262"
										},
										{
											"begin": 2881,
											"end": 2888,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 2872,
											"end": 2878,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2861,
											"end": 2870,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 2857,
											"end": 2879,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2836,
											"end": 2889,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "197"
										},
										{
											"begin": 2836,
											"end": 2889,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2836,
											"end": 2889,
											"name": "tag",
											"source": 11,
											"value": "262"
										},
										{
											"begin": 2836,
											"end": 2889,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2826,
											"end": 2889,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2826,
											"end": 2889,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2781,
											"end": 2899,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2432,
											"end": 2906,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 2432,
											"end": 2906,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2432,
											"end": 2906,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 2432,
											"end": 2906,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2432,
											"end": 2906,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2432,
											"end": 2906,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2912,
											"end": 3002,
											"name": "tag",
											"source": 11,
											"value": "198"
										},
										{
											"begin": 2912,
											"end": 3002,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2946,
											"end": 2953,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2989,
											"end": 2994,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2982,
											"end": 2995,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2975,
											"end": 2996,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2964,
											"end": 2996,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2964,
											"end": 2996,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2912,
											"end": 3002,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2912,
											"end": 3002,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2912,
											"end": 3002,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2912,
											"end": 3002,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3008,
											"end": 3117,
											"name": "tag",
											"source": 11,
											"value": "199"
										},
										{
											"begin": 3008,
											"end": 3117,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3089,
											"end": 3110,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "265"
										},
										{
											"begin": 3104,
											"end": 3109,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3089,
											"end": 3110,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "198"
										},
										{
											"begin": 3089,
											"end": 3110,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3089,
											"end": 3110,
											"name": "tag",
											"source": 11,
											"value": "265"
										},
										{
											"begin": 3089,
											"end": 3110,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3084,
											"end": 3087,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3077,
											"end": 3111,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3008,
											"end": 3117,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3008,
											"end": 3117,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3008,
											"end": 3117,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3123,
											"end": 3333,
											"name": "tag",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 3123,
											"end": 3333,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3210,
											"end": 3214,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3248,
											"end": 3250,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3237,
											"end": 3246,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3233,
											"end": 3251,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3225,
											"end": 3251,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3225,
											"end": 3251,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3261,
											"end": 3326,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "267"
										},
										{
											"begin": 3323,
											"end": 3324,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3312,
											"end": 3321,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 3308,
											"end": 3325,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3299,
											"end": 3305,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 3261,
											"end": 3326,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "199"
										},
										{
											"begin": 3261,
											"end": 3326,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3261,
											"end": 3326,
											"name": "tag",
											"source": 11,
											"value": "267"
										},
										{
											"begin": 3261,
											"end": 3326,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3123,
											"end": 3333,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 3123,
											"end": 3333,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3123,
											"end": 3333,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3123,
											"end": 3333,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3123,
											"end": 3333,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3339,
											"end": 3457,
											"name": "tag",
											"source": 11,
											"value": "200"
										},
										{
											"begin": 3339,
											"end": 3457,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3426,
											"end": 3450,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "269"
										},
										{
											"begin": 3444,
											"end": 3449,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3426,
											"end": 3450,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "195"
										},
										{
											"begin": 3426,
											"end": 3450,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3426,
											"end": 3450,
											"name": "tag",
											"source": 11,
											"value": "269"
										},
										{
											"begin": 3426,
											"end": 3450,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3421,
											"end": 3424,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3414,
											"end": 3451,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3339,
											"end": 3457,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3339,
											"end": 3457,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3339,
											"end": 3457,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3463,
											"end": 3685,
											"name": "tag",
											"source": 11,
											"value": "28"
										},
										{
											"begin": 3463,
											"end": 3685,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3556,
											"end": 3560,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3594,
											"end": 3596,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3583,
											"end": 3592,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3579,
											"end": 3597,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3571,
											"end": 3597,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3571,
											"end": 3597,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3607,
											"end": 3678,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "271"
										},
										{
											"begin": 3675,
											"end": 3676,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3664,
											"end": 3673,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 3660,
											"end": 3677,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3651,
											"end": 3657,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 3607,
											"end": 3678,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "200"
										},
										{
											"begin": 3607,
											"end": 3678,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3607,
											"end": 3678,
											"name": "tag",
											"source": 11,
											"value": "271"
										},
										{
											"begin": 3607,
											"end": 3678,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3463,
											"end": 3685,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 3463,
											"end": 3685,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3463,
											"end": 3685,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3463,
											"end": 3685,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3463,
											"end": 3685,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3691,
											"end": 4310,
											"name": "tag",
											"source": 11,
											"value": "31"
										},
										{
											"begin": 3691,
											"end": 4310,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3768,
											"end": 3774,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3776,
											"end": 3782,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3784,
											"end": 3790,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3833,
											"end": 3835,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 3821,
											"end": 3830,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 3812,
											"end": 3819,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 3808,
											"end": 3831,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 3804,
											"end": 3836,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 3801,
											"end": 3920,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 3801,
											"end": 3920,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "273"
										},
										{
											"begin": 3801,
											"end": 3920,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 3839,
											"end": 3918,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "274"
										},
										{
											"begin": 3839,
											"end": 3918,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "189"
										},
										{
											"begin": 3839,
											"end": 3918,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3839,
											"end": 3918,
											"name": "tag",
											"source": 11,
											"value": "274"
										},
										{
											"begin": 3839,
											"end": 3918,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3801,
											"end": 3920,
											"name": "tag",
											"source": 11,
											"value": "273"
										},
										{
											"begin": 3801,
											"end": 3920,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3959,
											"end": 3960,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3984,
											"end": 4037,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "275"
										},
										{
											"begin": 4029,
											"end": 4036,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 4020,
											"end": 4026,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4009,
											"end": 4018,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 4005,
											"end": 4027,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3984,
											"end": 4037,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "194"
										},
										{
											"begin": 3984,
											"end": 4037,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3984,
											"end": 4037,
											"name": "tag",
											"source": 11,
											"value": "275"
										},
										{
											"begin": 3984,
											"end": 4037,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3974,
											"end": 4037,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 3974,
											"end": 4037,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3930,
											"end": 4047,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4086,
											"end": 4088,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 4112,
											"end": 4165,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "276"
										},
										{
											"begin": 4157,
											"end": 4164,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 4148,
											"end": 4154,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4137,
											"end": 4146,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 4133,
											"end": 4155,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4112,
											"end": 4165,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "194"
										},
										{
											"begin": 4112,
											"end": 4165,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4112,
											"end": 4165,
											"name": "tag",
											"source": 11,
											"value": "276"
										},
										{
											"begin": 4112,
											"end": 4165,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4102,
											"end": 4165,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 4102,
											"end": 4165,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4057,
											"end": 4175,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4214,
											"end": 4216,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 4240,
											"end": 4293,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "277"
										},
										{
											"begin": 4285,
											"end": 4292,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 4276,
											"end": 4282,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4265,
											"end": 4274,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 4261,
											"end": 4283,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4240,
											"end": 4293,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "197"
										},
										{
											"begin": 4240,
											"end": 4293,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4240,
											"end": 4293,
											"name": "tag",
											"source": 11,
											"value": "277"
										},
										{
											"begin": 4240,
											"end": 4293,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4230,
											"end": 4293,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4230,
											"end": 4293,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4185,
											"end": 4303,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3691,
											"end": 4310,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 3691,
											"end": 4310,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3691,
											"end": 4310,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 3691,
											"end": 4310,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3691,
											"end": 4310,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 3691,
											"end": 4310,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4316,
											"end": 4402,
											"name": "tag",
											"source": 11,
											"value": "201"
										},
										{
											"begin": 4316,
											"end": 4402,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4351,
											"end": 4358,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4391,
											"end": 4395,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 4384,
											"end": 4389,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4380,
											"end": 4396,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 4369,
											"end": 4396,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4369,
											"end": 4396,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4316,
											"end": 4402,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4316,
											"end": 4402,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4316,
											"end": 4402,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4316,
											"end": 4402,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4408,
											"end": 4520,
											"name": "tag",
											"source": 11,
											"value": "202"
										},
										{
											"begin": 4408,
											"end": 4520,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4491,
											"end": 4513,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "280"
										},
										{
											"begin": 4507,
											"end": 4512,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 4491,
											"end": 4513,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "201"
										},
										{
											"begin": 4491,
											"end": 4513,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4491,
											"end": 4513,
											"name": "tag",
											"source": 11,
											"value": "280"
										},
										{
											"begin": 4491,
											"end": 4513,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4486,
											"end": 4489,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4479,
											"end": 4514,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4408,
											"end": 4520,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4408,
											"end": 4520,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4408,
											"end": 4520,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4526,
											"end": 4740,
											"name": "tag",
											"source": 11,
											"value": "37"
										},
										{
											"begin": 4526,
											"end": 4740,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4615,
											"end": 4619,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4653,
											"end": 4655,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 4642,
											"end": 4651,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4638,
											"end": 4656,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4630,
											"end": 4656,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4630,
											"end": 4656,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4666,
											"end": 4733,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "282"
										},
										{
											"begin": 4730,
											"end": 4731,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4719,
											"end": 4728,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 4715,
											"end": 4732,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4706,
											"end": 4712,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 4666,
											"end": 4733,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "202"
										},
										{
											"begin": 4666,
											"end": 4733,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4666,
											"end": 4733,
											"name": "tag",
											"source": 11,
											"value": "282"
										},
										{
											"begin": 4666,
											"end": 4733,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4526,
											"end": 4740,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 4526,
											"end": 4740,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4526,
											"end": 4740,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4526,
											"end": 4740,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4526,
											"end": 4740,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4746,
											"end": 5075,
											"name": "tag",
											"source": 11,
											"value": "43"
										},
										{
											"begin": 4746,
											"end": 5075,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4805,
											"end": 4811,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 4854,
											"end": 4856,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 4842,
											"end": 4851,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4833,
											"end": 4840,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 4829,
											"end": 4852,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 4825,
											"end": 4857,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 4822,
											"end": 4941,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 4822,
											"end": 4941,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "284"
										},
										{
											"begin": 4822,
											"end": 4941,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 4860,
											"end": 4939,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "285"
										},
										{
											"begin": 4860,
											"end": 4939,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "189"
										},
										{
											"begin": 4860,
											"end": 4939,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4860,
											"end": 4939,
											"name": "tag",
											"source": 11,
											"value": "285"
										},
										{
											"begin": 4860,
											"end": 4939,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4822,
											"end": 4941,
											"name": "tag",
											"source": 11,
											"value": "284"
										},
										{
											"begin": 4822,
											"end": 4941,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4980,
											"end": 4981,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5005,
											"end": 5058,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "286"
										},
										{
											"begin": 5050,
											"end": 5057,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 5041,
											"end": 5047,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 5030,
											"end": 5039,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 5026,
											"end": 5048,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 5005,
											"end": 5058,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "194"
										},
										{
											"begin": 5005,
											"end": 5058,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 5005,
											"end": 5058,
											"name": "tag",
											"source": 11,
											"value": "286"
										},
										{
											"begin": 5005,
											"end": 5058,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 4995,
											"end": 5058,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4995,
											"end": 5058,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4951,
											"end": 5068,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4746,
											"end": 5075,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 4746,
											"end": 5075,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4746,
											"end": 5075,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4746,
											"end": 5075,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 4746,
											"end": 5075,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 5081,
											"end": 5555,
											"name": "tag",
											"source": 11,
											"value": "57"
										},
										{
											"begin": 5081,
											"end": 5555,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5149,
											"end": 5155,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5157,
											"end": 5163,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 5206,
											"end": 5208,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 5194,
											"end": 5203,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 5185,
											"end": 5192,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 5181,
											"end": 5204,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 5177,
											"end": 5209,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 5174,
											"end": 5293,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 5174,
											"end": 5293,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "288"
										},
										{
											"begin": 5174,
											"end": 5293,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 5212,
											"end": 5291,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "289"
										},
										{
											"begin": 5212,
											"end": 5291,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "189"
										},
										{
											"begin": 5212,
											"end": 5291,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 5212,
											"end": 5291,
											"name": "tag",
											"source": 11,
											"value": "289"
										},
										{
											"begin": 5212,
											"end": 5291,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5174,
											"end": 5293,
											"name": "tag",
											"source": 11,
											"value": "288"
										},
										{
											"begin": 5174,
											"end": 5293,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5332,
											"end": 5333,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5357,
											"end": 5410,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "290"
										},
										{
											"begin": 5402,
											"end": 5409,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 5393,
											"end": 5399,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 5382,
											"end": 5391,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 5378,
											"end": 5400,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 5357,
											"end": 5410,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "194"
										},
										{
											"begin": 5357,
											"end": 5410,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 5357,
											"end": 5410,
											"name": "tag",
											"source": 11,
											"value": "290"
										},
										{
											"begin": 5357,
											"end": 5410,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5347,
											"end": 5410,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 5347,
											"end": 5410,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5303,
											"end": 5420,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5459,
											"end": 5461,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 5485,
											"end": 5538,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "291"
										},
										{
											"begin": 5530,
											"end": 5537,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 5521,
											"end": 5527,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 5510,
											"end": 5519,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 5506,
											"end": 5528,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 5485,
											"end": 5538,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "194"
										},
										{
											"begin": 5485,
											"end": 5538,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 5485,
											"end": 5538,
											"name": "tag",
											"source": 11,
											"value": "291"
										},
										{
											"begin": 5485,
											"end": 5538,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5475,
											"end": 5538,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 5475,
											"end": 5538,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5430,
											"end": 5548,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5081,
											"end": 5555,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 5081,
											"end": 5555,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5081,
											"end": 5555,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 5081,
											"end": 5555,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5081,
											"end": 5555,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5081,
											"end": 5555,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 5561,
											"end": 5741,
											"name": "tag",
											"source": 11,
											"value": "203"
										},
										{
											"begin": 5561,
											"end": 5741,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5609,
											"end": 5686,
											"name": "PUSH",
											"source": 11,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5606,
											"end": 5607,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5599,
											"end": 5687,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 5706,
											"end": 5710,
											"name": "PUSH",
											"source": 11,
											"value": "22"
										},
										{
											"begin": 5703,
											"end": 5704,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 5696,
											"end": 5711,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 5730,
											"end": 5734,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 5727,
											"end": 5728,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5720,
											"end": 5735,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 5747,
											"end": 6067,
											"name": "tag",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 5747,
											"end": 6067,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5791,
											"end": 5797,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5828,
											"end": 5829,
											"name": "PUSH",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 5822,
											"end": 5826,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 5818,
											"end": 5830,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 5808,
											"end": 5830,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5808,
											"end": 5830,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5875,
											"end": 5876,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 5869,
											"end": 5873,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 5865,
											"end": 5877,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 5896,
											"end": 5914,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 5886,
											"end": 5967,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "294"
										},
										{
											"begin": 5886,
											"end": 5967,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 5952,
											"end": 5956,
											"name": "PUSH",
											"source": 11,
											"value": "7F"
										},
										{
											"begin": 5944,
											"end": 5950,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 5940,
											"end": 5957,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 5930,
											"end": 5957,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 5930,
											"end": 5957,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5886,
											"end": 5967,
											"name": "tag",
											"source": 11,
											"value": "294"
										},
										{
											"begin": 5886,
											"end": 5967,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6014,
											"end": 6016,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 6006,
											"end": 6012,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 6003,
											"end": 6017,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 5983,
											"end": 6001,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 5980,
											"end": 6018,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 5977,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "295"
										},
										{
											"begin": 5977,
											"end": 6061,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 6033,
											"end": 6051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "296"
										},
										{
											"begin": 6033,
											"end": 6051,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "203"
										},
										{
											"begin": 6033,
											"end": 6051,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 6033,
											"end": 6051,
											"name": "tag",
											"source": 11,
											"value": "296"
										},
										{
											"begin": 6033,
											"end": 6051,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5977,
											"end": 6061,
											"name": "tag",
											"source": 11,
											"value": "295"
										},
										{
											"begin": 5977,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5798,
											"end": 6067,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5747,
											"end": 6067,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 5747,
											"end": 6067,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5747,
											"end": 6067,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5747,
											"end": 6067,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 6073,
											"end": 6253,
											"name": "tag",
											"source": 11,
											"value": "204"
										},
										{
											"begin": 6073,
											"end": 6253,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6121,
											"end": 6198,
											"name": "PUSH",
											"source": 11,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6118,
											"end": 6119,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 6111,
											"end": 6199,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6218,
											"end": 6222,
											"name": "PUSH",
											"source": 11,
											"value": "11"
										},
										{
											"begin": 6215,
											"end": 6216,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 6208,
											"end": 6223,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6242,
											"end": 6246,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 6239,
											"end": 6240,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 6232,
											"end": 6247,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 6259,
											"end": 6361,
											"name": "tag",
											"source": 11,
											"value": "205"
										},
										{
											"begin": 6259,
											"end": 6361,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6301,
											"end": 6309,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 6348,
											"end": 6353,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6345,
											"end": 6346,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 6341,
											"end": 6354,
											"name": "SHR",
											"source": 11
										},
										{
											"begin": 6320,
											"end": 6354,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6320,
											"end": 6354,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6259,
											"end": 6361,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 6259,
											"end": 6361,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6259,
											"end": 6361,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6259,
											"end": 6361,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 6367,
											"end": 7215,
											"name": "tag",
											"source": 11,
											"value": "206"
										},
										{
											"begin": 6367,
											"end": 7215,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6428,
											"end": 6433,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 6435,
											"end": 6439,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 6459,
											"end": 6465,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 6450,
											"end": 6465,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 6450,
											"end": 6465,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6483,
											"end": 6488,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 6474,
											"end": 6488,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6474,
											"end": 6488,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6497,
											"end": 7209,
											"name": "tag",
											"source": 11,
											"value": "300"
										},
										{
											"begin": 6497,
											"end": 7209,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6518,
											"end": 6519,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 6508,
											"end": 6516,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 6505,
											"end": 6520,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 6497,
											"end": 7209,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 6497,
											"end": 7209,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "302"
										},
										{
											"begin": 6497,
											"end": 7209,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 6613,
											"end": 6617,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 6608,
											"end": 6611,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 6604,
											"end": 6618,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 6598,
											"end": 6602,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6595,
											"end": 6619,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 6592,
											"end": 6642,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 6592,
											"end": 6642,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "303"
										},
										{
											"begin": 6592,
											"end": 6642,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 6622,
											"end": 6640,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "304"
										},
										{
											"begin": 6622,
											"end": 6640,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "204"
										},
										{
											"begin": 6622,
											"end": 6640,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 6622,
											"end": 6640,
											"name": "tag",
											"source": 11,
											"value": "304"
										},
										{
											"begin": 6622,
											"end": 6640,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6592,
											"end": 6642,
											"name": "tag",
											"source": 11,
											"value": "303"
										},
										{
											"begin": 6592,
											"end": 6642,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6672,
											"end": 6673,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 6662,
											"end": 6670,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 6658,
											"end": 6674,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 6655,
											"end": 7106,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 6655,
											"end": 7106,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "305"
										},
										{
											"begin": 6655,
											"end": 7106,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 7087,
											"end": 7091,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7080,
											"end": 7085,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7076,
											"end": 7092,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 7067,
											"end": 7092,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 7067,
											"end": 7092,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6655,
											"end": 7106,
											"name": "tag",
											"source": 11,
											"value": "305"
										},
										{
											"begin": 6655,
											"end": 7106,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7137,
											"end": 7141,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 7131,
											"end": 7135,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7127,
											"end": 7142,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 7119,
											"end": 7142,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7119,
											"end": 7142,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7167,
											"end": 7199,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "306"
										},
										{
											"begin": 7190,
											"end": 7198,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 7167,
											"end": 7199,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "205"
										},
										{
											"begin": 7167,
											"end": 7199,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 7167,
											"end": 7199,
											"name": "tag",
											"source": 11,
											"value": "306"
										},
										{
											"begin": 7167,
											"end": 7199,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7155,
											"end": 7199,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 7155,
											"end": 7199,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6497,
											"end": 7209,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "300"
										},
										{
											"begin": 6497,
											"end": 7209,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 6497,
											"end": 7209,
											"name": "tag",
											"source": 11,
											"value": "302"
										},
										{
											"begin": 6497,
											"end": 7209,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6367,
											"end": 7215,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 6367,
											"end": 7215,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6367,
											"end": 7215,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 6367,
											"end": 7215,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 6367,
											"end": 7215,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6367,
											"end": 7215,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6367,
											"end": 7215,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 6367,
											"end": 7215,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 7221,
											"end": 8294,
											"name": "tag",
											"source": 11,
											"value": "207"
										},
										{
											"begin": 7221,
											"end": 8294,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7275,
											"end": 7280,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 7466,
											"end": 7474,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7456,
											"end": 7496,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "308"
										},
										{
											"begin": 7456,
											"end": 7496,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 7487,
											"end": 7488,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 7478,
											"end": 7488,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7478,
											"end": 7488,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7489,
											"end": 7494,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "307"
										},
										{
											"begin": 7489,
											"end": 7494,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 7456,
											"end": 7496,
											"name": "tag",
											"source": 11,
											"value": "308"
										},
										{
											"begin": 7456,
											"end": 7496,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7515,
											"end": 7519,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7505,
											"end": 7541,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "309"
										},
										{
											"begin": 7505,
											"end": 7541,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 7532,
											"end": 7533,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 7523,
											"end": 7533,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7523,
											"end": 7533,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7534,
											"end": 7539,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "307"
										},
										{
											"begin": 7534,
											"end": 7539,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 7505,
											"end": 7541,
											"name": "tag",
											"source": 11,
											"value": "309"
										},
										{
											"begin": 7505,
											"end": 7541,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7601,
											"end": 7605,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7649,
											"end": 7650,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 7644,
											"end": 7671,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7644,
											"end": 7671,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 7644,
											"end": 7671,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "311"
										},
										{
											"begin": 7644,
											"end": 7671,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 7685,
											"end": 7686,
											"name": "PUSH",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 7680,
											"end": 7871,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7680,
											"end": 7871,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 7680,
											"end": 7871,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "312"
										},
										{
											"begin": 7680,
											"end": 7871,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 7594,
											"end": 7871,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "310"
										},
										{
											"begin": 7594,
											"end": 7871,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 7644,
											"end": 7671,
											"name": "tag",
											"source": 11,
											"value": "311"
										},
										{
											"begin": 7644,
											"end": 7671,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7662,
											"end": 7663,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 7653,
											"end": 7663,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 7653,
											"end": 7663,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7664,
											"end": 7669,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7664,
											"end": 7669,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "307"
										},
										{
											"begin": 7664,
											"end": 7669,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 7680,
											"end": 7871,
											"name": "tag",
											"source": 11,
											"value": "312"
										},
										{
											"begin": 7680,
											"end": 7871,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7725,
											"end": 7728,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 7715,
											"end": 7723,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 7712,
											"end": 7729,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 7709,
											"end": 7752,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 7709,
											"end": 7752,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "313"
										},
										{
											"begin": 7709,
											"end": 7752,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 7732,
											"end": 7750,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "314"
										},
										{
											"begin": 7732,
											"end": 7750,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "204"
										},
										{
											"begin": 7732,
											"end": 7750,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 7732,
											"end": 7750,
											"name": "tag",
											"source": 11,
											"value": "314"
										},
										{
											"begin": 7732,
											"end": 7750,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7709,
											"end": 7752,
											"name": "tag",
											"source": 11,
											"value": "313"
										},
										{
											"begin": 7709,
											"end": 7752,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7781,
											"end": 7789,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 7778,
											"end": 7779,
											"name": "PUSH",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 7774,
											"end": 7790,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 7765,
											"end": 7790,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 7765,
											"end": 7790,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7816,
											"end": 7819,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 7809,
											"end": 7814,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7806,
											"end": 7820,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 7803,
											"end": 7843,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 7803,
											"end": 7843,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "315"
										},
										{
											"begin": 7803,
											"end": 7843,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 7823,
											"end": 7841,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "316"
										},
										{
											"begin": 7823,
											"end": 7841,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "204"
										},
										{
											"begin": 7823,
											"end": 7841,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 7823,
											"end": 7841,
											"name": "tag",
											"source": 11,
											"value": "316"
										},
										{
											"begin": 7823,
											"end": 7841,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7803,
											"end": 7843,
											"name": "tag",
											"source": 11,
											"value": "315"
										},
										{
											"begin": 7803,
											"end": 7843,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7856,
											"end": 7861,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7856,
											"end": 7861,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "307"
										},
										{
											"begin": 7856,
											"end": 7861,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 7594,
											"end": 7871,
											"name": "tag",
											"source": 11,
											"value": "310"
										},
										{
											"begin": 7594,
											"end": 7871,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7594,
											"end": 7871,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7980,
											"end": 7982,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 7970,
											"end": 7978,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 7967,
											"end": 7983,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 7961,
											"end": 7964,
											"name": "PUSH",
											"source": 11,
											"value": "133"
										},
										{
											"begin": 7955,
											"end": 7959,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 7952,
											"end": 7965,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 7948,
											"end": 7984,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 7930,
											"end": 7932,
											"name": "PUSH",
											"source": 11,
											"value": "4E"
										},
										{
											"begin": 7920,
											"end": 7928,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 7917,
											"end": 7933,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 7912,
											"end": 7914,
											"name": "PUSH",
											"source": 11,
											"value": "B"
										},
										{
											"begin": 7906,
											"end": 7910,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 7903,
											"end": 7915,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 7899,
											"end": 7934,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 7883,
											"end": 7994,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 7880,
											"end": 8126,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 7880,
											"end": 8126,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "317"
										},
										{
											"begin": 7880,
											"end": 8126,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 8036,
											"end": 8044,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 8030,
											"end": 8034,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 8026,
											"end": 8045,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 8017,
											"end": 8045,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8017,
											"end": 8045,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8071,
											"end": 8074,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 8064,
											"end": 8069,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 8061,
											"end": 8075,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 8058,
											"end": 8098,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 8058,
											"end": 8098,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "318"
										},
										{
											"begin": 8058,
											"end": 8098,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 8078,
											"end": 8096,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "319"
										},
										{
											"begin": 8078,
											"end": 8096,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "204"
										},
										{
											"begin": 8078,
											"end": 8096,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 8078,
											"end": 8096,
											"name": "tag",
											"source": 11,
											"value": "319"
										},
										{
											"begin": 8078,
											"end": 8096,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8058,
											"end": 8098,
											"name": "tag",
											"source": 11,
											"value": "318"
										},
										{
											"begin": 8058,
											"end": 8098,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8111,
											"end": 8116,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "307"
										},
										{
											"begin": 8111,
											"end": 8116,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 7880,
											"end": 8126,
											"name": "tag",
											"source": 11,
											"value": "317"
										},
										{
											"begin": 7880,
											"end": 8126,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8151,
											"end": 8193,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "320"
										},
										{
											"begin": 8189,
											"end": 8192,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 8179,
											"end": 8187,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 8173,
											"end": 8177,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 8170,
											"end": 8171,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 8151,
											"end": 8193,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "206"
										},
										{
											"begin": 8151,
											"end": 8193,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 8151,
											"end": 8193,
											"name": "tag",
											"source": 11,
											"value": "320"
										},
										{
											"begin": 8151,
											"end": 8193,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8136,
											"end": 8193,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 8136,
											"end": 8193,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8136,
											"end": 8193,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8136,
											"end": 8193,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8225,
											"end": 8229,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 8220,
											"end": 8223,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 8216,
											"end": 8230,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 8209,
											"end": 8214,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 8206,
											"end": 8231,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 8203,
											"end": 8254,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 8203,
											"end": 8254,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "321"
										},
										{
											"begin": 8203,
											"end": 8254,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 8234,
											"end": 8252,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "322"
										},
										{
											"begin": 8234,
											"end": 8252,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "204"
										},
										{
											"begin": 8234,
											"end": 8252,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 8234,
											"end": 8252,
											"name": "tag",
											"source": 11,
											"value": "322"
										},
										{
											"begin": 8234,
											"end": 8252,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8203,
											"end": 8254,
											"name": "tag",
											"source": 11,
											"value": "321"
										},
										{
											"begin": 8203,
											"end": 8254,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8283,
											"end": 8287,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 8276,
											"end": 8281,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 8272,
											"end": 8288,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 8263,
											"end": 8288,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8263,
											"end": 8288,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7221,
											"end": 8294,
											"name": "tag",
											"source": 11,
											"value": "307"
										},
										{
											"begin": 7221,
											"end": 8294,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7221,
											"end": 8294,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 7221,
											"end": 8294,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 7221,
											"end": 8294,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7221,
											"end": 8294,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7221,
											"end": 8294,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 7221,
											"end": 8294,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 8300,
											"end": 8585,
											"name": "tag",
											"source": 11,
											"value": "102"
										},
										{
											"begin": 8300,
											"end": 8585,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8360,
											"end": 8365,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 8384,
											"end": 8407,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "324"
										},
										{
											"begin": 8402,
											"end": 8406,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 8384,
											"end": 8407,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "195"
										},
										{
											"begin": 8384,
											"end": 8407,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 8384,
											"end": 8407,
											"name": "tag",
											"source": 11,
											"value": "324"
										},
										{
											"begin": 8384,
											"end": 8407,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8376,
											"end": 8407,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 8376,
											"end": 8407,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8428,
											"end": 8455,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "325"
										},
										{
											"begin": 8446,
											"end": 8454,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 8428,
											"end": 8455,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "195"
										},
										{
											"begin": 8428,
											"end": 8455,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 8428,
											"end": 8455,
											"name": "tag",
											"source": 11,
											"value": "325"
										},
										{
											"begin": 8428,
											"end": 8455,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8416,
											"end": 8455,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 8416,
											"end": 8455,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8474,
											"end": 8578,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "326"
										},
										{
											"begin": 8511,
											"end": 8577,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8501,
											"end": 8509,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 8495,
											"end": 8499,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 8474,
											"end": 8578,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "207"
										},
										{
											"begin": 8474,
											"end": 8578,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 8474,
											"end": 8578,
											"name": "tag",
											"source": 11,
											"value": "326"
										},
										{
											"begin": 8474,
											"end": 8578,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8465,
											"end": 8578,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8465,
											"end": 8578,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8300,
											"end": 8585,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 8300,
											"end": 8585,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 8300,
											"end": 8585,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8300,
											"end": 8585,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8300,
											"end": 8585,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 8591,
											"end": 9001,
											"name": "tag",
											"source": 11,
											"value": "104"
										},
										{
											"begin": 8591,
											"end": 9001,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8631,
											"end": 8638,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 8654,
											"end": 8674,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "328"
										},
										{
											"begin": 8672,
											"end": 8673,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 8654,
											"end": 8674,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "195"
										},
										{
											"begin": 8654,
											"end": 8674,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 8654,
											"end": 8674,
											"name": "tag",
											"source": 11,
											"value": "328"
										},
										{
											"begin": 8654,
											"end": 8674,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8649,
											"end": 8674,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 8649,
											"end": 8674,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8688,
											"end": 8708,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "329"
										},
										{
											"begin": 8706,
											"end": 8707,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 8688,
											"end": 8708,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "195"
										},
										{
											"begin": 8688,
											"end": 8708,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 8688,
											"end": 8708,
											"name": "tag",
											"source": 11,
											"value": "329"
										},
										{
											"begin": 8688,
											"end": 8708,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8683,
											"end": 8708,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 8683,
											"end": 8708,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8743,
											"end": 8744,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 8740,
											"end": 8741,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 8736,
											"end": 8745,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 8765,
											"end": 8795,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "330"
										},
										{
											"begin": 8783,
											"end": 8794,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 8765,
											"end": 8795,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "195"
										},
										{
											"begin": 8765,
											"end": 8795,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 8765,
											"end": 8795,
											"name": "tag",
											"source": 11,
											"value": "330"
										},
										{
											"begin": 8765,
											"end": 8795,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8754,
											"end": 8795,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 8754,
											"end": 8795,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8944,
											"end": 8945,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 8935,
											"end": 8942,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 8931,
											"end": 8946,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 8928,
											"end": 8929,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 8925,
											"end": 8947,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 8905,
											"end": 8906,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 8898,
											"end": 8907,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 8878,
											"end": 8961,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 8855,
											"end": 8994,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "331"
										},
										{
											"begin": 8855,
											"end": 8994,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 8974,
											"end": 8992,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "332"
										},
										{
											"begin": 8974,
											"end": 8992,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "204"
										},
										{
											"begin": 8974,
											"end": 8992,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 8974,
											"end": 8992,
											"name": "tag",
											"source": 11,
											"value": "332"
										},
										{
											"begin": 8974,
											"end": 8992,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8855,
											"end": 8994,
											"name": "tag",
											"source": 11,
											"value": "331"
										},
										{
											"begin": 8855,
											"end": 8994,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8639,
											"end": 9001,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8591,
											"end": 9001,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 8591,
											"end": 9001,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 8591,
											"end": 9001,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8591,
											"end": 9001,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 8591,
											"end": 9001,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 9007,
											"end": 9092,
											"name": "tag",
											"source": 11,
											"value": "208"
										},
										{
											"begin": 9007,
											"end": 9092,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9052,
											"end": 9059,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 9081,
											"end": 9086,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 9070,
											"end": 9086,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9070,
											"end": 9086,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 9007,
											"end": 9092,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9007,
											"end": 9092,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9007,
											"end": 9092,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 9007,
											"end": 9092,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 9098,
											"end": 9199,
											"name": "tag",
											"source": 11,
											"value": "209"
										},
										{
											"begin": 9098,
											"end": 9199,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9134,
											"end": 9141,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 9174,
											"end": 9192,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9167,
											"end": 9172,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 9163,
											"end": 9193,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 9152,
											"end": 9193,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9152,
											"end": 9193,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 9098,
											"end": 9199,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9098,
											"end": 9199,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9098,
											"end": 9199,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 9098,
											"end": 9199,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 9205,
											"end": 9265,
											"name": "tag",
											"source": 11,
											"value": "210"
										},
										{
											"begin": 9205,
											"end": 9265,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9233,
											"end": 9236,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 9254,
											"end": 9259,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 9247,
											"end": 9259,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9247,
											"end": 9259,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 9205,
											"end": 9265,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9205,
											"end": 9265,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9205,
											"end": 9265,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 9205,
											"end": 9265,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 9271,
											"end": 9427,
											"name": "tag",
											"source": 11,
											"value": "211"
										},
										{
											"begin": 9271,
											"end": 9427,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9328,
											"end": 9337,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 9361,
											"end": 9421,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "337"
										},
										{
											"begin": 9378,
											"end": 9420,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "338"
										},
										{
											"begin": 9387,
											"end": 9419,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "339"
										},
										{
											"begin": 9413,
											"end": 9418,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 9387,
											"end": 9419,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "208"
										},
										{
											"begin": 9387,
											"end": 9419,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 9387,
											"end": 9419,
											"name": "tag",
											"source": 11,
											"value": "339"
										},
										{
											"begin": 9387,
											"end": 9419,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9378,
											"end": 9420,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "210"
										},
										{
											"begin": 9378,
											"end": 9420,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 9378,
											"end": 9420,
											"name": "tag",
											"source": 11,
											"value": "338"
										},
										{
											"begin": 9378,
											"end": 9420,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9361,
											"end": 9421,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "209"
										},
										{
											"begin": 9361,
											"end": 9421,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 9361,
											"end": 9421,
											"name": "tag",
											"source": 11,
											"value": "337"
										},
										{
											"begin": 9361,
											"end": 9421,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9348,
											"end": 9421,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9348,
											"end": 9421,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 9271,
											"end": 9427,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9271,
											"end": 9427,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9271,
											"end": 9427,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 9271,
											"end": 9427,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 9433,
											"end": 9578,
											"name": "tag",
											"source": 11,
											"value": "212"
										},
										{
											"begin": 9433,
											"end": 9578,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9527,
											"end": 9571,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "341"
										},
										{
											"begin": 9565,
											"end": 9570,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 9527,
											"end": 9571,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "211"
										},
										{
											"begin": 9527,
											"end": 9571,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 9527,
											"end": 9571,
											"name": "tag",
											"source": 11,
											"value": "341"
										},
										{
											"begin": 9527,
											"end": 9571,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9522,
											"end": 9525,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 9515,
											"end": 9572,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9433,
											"end": 9578,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 9433,
											"end": 9578,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 9433,
											"end": 9578,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 9584,
											"end": 9820,
											"name": "tag",
											"source": 11,
											"value": "107"
										},
										{
											"begin": 9584,
											"end": 9820,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9684,
											"end": 9688,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 9722,
											"end": 9724,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 9711,
											"end": 9720,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 9707,
											"end": 9725,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9699,
											"end": 9725,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9699,
											"end": 9725,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 9735,
											"end": 9813,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "343"
										},
										{
											"begin": 9810,
											"end": 9811,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 9799,
											"end": 9808,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 9795,
											"end": 9812,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9786,
											"end": 9792,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 9735,
											"end": 9813,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "212"
										},
										{
											"begin": 9735,
											"end": 9813,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 9735,
											"end": 9813,
											"name": "tag",
											"source": 11,
											"value": "343"
										},
										{
											"begin": 9735,
											"end": 9813,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9584,
											"end": 9820,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 9584,
											"end": 9820,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 9584,
											"end": 9820,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 9584,
											"end": 9820,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 9584,
											"end": 9820,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 9826,
											"end": 9944,
											"name": "tag",
											"source": 11,
											"value": "213"
										},
										{
											"begin": 9826,
											"end": 9944,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9913,
											"end": 9937,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "345"
										},
										{
											"begin": 9931,
											"end": 9936,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 9913,
											"end": 9937,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "192"
										},
										{
											"begin": 9913,
											"end": 9937,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 9913,
											"end": 9937,
											"name": "tag",
											"source": 11,
											"value": "345"
										},
										{
											"begin": 9913,
											"end": 9937,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9908,
											"end": 9911,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 9901,
											"end": 9938,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9826,
											"end": 9944,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 9826,
											"end": 9944,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 9826,
											"end": 9944,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 9950,
											"end": 10392,
											"name": "tag",
											"source": 11,
											"value": "130"
										},
										{
											"begin": 9950,
											"end": 10392,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10099,
											"end": 10103,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 10137,
											"end": 10139,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 10126,
											"end": 10135,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 10122,
											"end": 10140,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10114,
											"end": 10140,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 10114,
											"end": 10140,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10150,
											"end": 10221,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "347"
										},
										{
											"begin": 10218,
											"end": 10219,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 10207,
											"end": 10216,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 10203,
											"end": 10220,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10194,
											"end": 10200,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 10150,
											"end": 10221,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "213"
										},
										{
											"begin": 10150,
											"end": 10221,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 10150,
											"end": 10221,
											"name": "tag",
											"source": 11,
											"value": "347"
										},
										{
											"begin": 10150,
											"end": 10221,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10231,
											"end": 10303,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "348"
										},
										{
											"begin": 10299,
											"end": 10301,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 10288,
											"end": 10297,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 10284,
											"end": 10302,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10275,
											"end": 10281,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 10231,
											"end": 10303,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "200"
										},
										{
											"begin": 10231,
											"end": 10303,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 10231,
											"end": 10303,
											"name": "tag",
											"source": 11,
											"value": "348"
										},
										{
											"begin": 10231,
											"end": 10303,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10313,
											"end": 10385,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "349"
										},
										{
											"begin": 10381,
											"end": 10383,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 10370,
											"end": 10379,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 10366,
											"end": 10384,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10357,
											"end": 10363,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 10313,
											"end": 10385,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "200"
										},
										{
											"begin": 10313,
											"end": 10385,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 10313,
											"end": 10385,
											"name": "tag",
											"source": 11,
											"value": "349"
										},
										{
											"begin": 10313,
											"end": 10385,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9950,
											"end": 10392,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 9950,
											"end": 10392,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 9950,
											"end": 10392,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 9950,
											"end": 10392,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 9950,
											"end": 10392,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 9950,
											"end": 10392,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 9950,
											"end": 10392,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 10398,
											"end": 10620,
											"name": "tag",
											"source": 11,
											"value": "135"
										},
										{
											"begin": 10398,
											"end": 10620,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10491,
											"end": 10495,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 10529,
											"end": 10531,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 10518,
											"end": 10527,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 10514,
											"end": 10532,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10506,
											"end": 10532,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 10506,
											"end": 10532,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10542,
											"end": 10613,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "351"
										},
										{
											"begin": 10610,
											"end": 10611,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 10599,
											"end": 10608,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 10595,
											"end": 10612,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10586,
											"end": 10592,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 10542,
											"end": 10613,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "213"
										},
										{
											"begin": 10542,
											"end": 10613,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 10542,
											"end": 10613,
											"name": "tag",
											"source": 11,
											"value": "351"
										},
										{
											"begin": 10542,
											"end": 10613,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10398,
											"end": 10620,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 10398,
											"end": 10620,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 10398,
											"end": 10620,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10398,
											"end": 10620,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10398,
											"end": 10620,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 10626,
											"end": 10817,
											"name": "tag",
											"source": 11,
											"value": "163"
										},
										{
											"begin": 10626,
											"end": 10817,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10666,
											"end": 10669,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 10685,
											"end": 10705,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "353"
										},
										{
											"begin": 10703,
											"end": 10704,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 10685,
											"end": 10705,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "195"
										},
										{
											"begin": 10685,
											"end": 10705,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 10685,
											"end": 10705,
											"name": "tag",
											"source": 11,
											"value": "353"
										},
										{
											"begin": 10685,
											"end": 10705,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10680,
											"end": 10705,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 10680,
											"end": 10705,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10719,
											"end": 10739,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "354"
										},
										{
											"begin": 10737,
											"end": 10738,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 10719,
											"end": 10739,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "195"
										},
										{
											"begin": 10719,
											"end": 10739,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 10719,
											"end": 10739,
											"name": "tag",
											"source": 11,
											"value": "354"
										},
										{
											"begin": 10719,
											"end": 10739,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10714,
											"end": 10739,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 10714,
											"end": 10739,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10762,
											"end": 10763,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 10759,
											"end": 10760,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 10755,
											"end": 10764,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10748,
											"end": 10764,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 10748,
											"end": 10764,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10783,
											"end": 10786,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 10780,
											"end": 10781,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 10777,
											"end": 10787,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 10774,
											"end": 10810,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 10774,
											"end": 10810,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "355"
										},
										{
											"begin": 10774,
											"end": 10810,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 10790,
											"end": 10808,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "356"
										},
										{
											"begin": 10790,
											"end": 10808,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "204"
										},
										{
											"begin": 10790,
											"end": 10808,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 10790,
											"end": 10808,
											"name": "tag",
											"source": 11,
											"value": "356"
										},
										{
											"begin": 10790,
											"end": 10808,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10774,
											"end": 10810,
											"name": "tag",
											"source": 11,
											"value": "355"
										},
										{
											"begin": 10774,
											"end": 10810,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10626,
											"end": 10817,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 10626,
											"end": 10817,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 10626,
											"end": 10817,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10626,
											"end": 10817,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 10626,
											"end": 10817,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 10823,
											"end": 11003,
											"name": "tag",
											"source": 11,
											"value": "214"
										},
										{
											"begin": 10823,
											"end": 11003,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10871,
											"end": 10948,
											"name": "PUSH",
											"source": 11,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10868,
											"end": 10869,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 10861,
											"end": 10949,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 10968,
											"end": 10972,
											"name": "PUSH",
											"source": 11,
											"value": "41"
										},
										{
											"begin": 10965,
											"end": 10966,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 10958,
											"end": 10973,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 10992,
											"end": 10996,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 10989,
											"end": 10990,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 10982,
											"end": 10997,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 11009,
											"end": 11150,
											"name": "tag",
											"source": 11,
											"value": "215"
										},
										{
											"begin": 11009,
											"end": 11150,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 11058,
											"end": 11062,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 11081,
											"end": 11084,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 11073,
											"end": 11084,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 11073,
											"end": 11084,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 11104,
											"end": 11107,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 11101,
											"end": 11102,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 11094,
											"end": 11108,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 11138,
											"end": 11142,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 11135,
											"end": 11136,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 11125,
											"end": 11143,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 11117,
											"end": 11143,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 11117,
											"end": 11143,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 11009,
											"end": 11150,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 11009,
											"end": 11150,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 11009,
											"end": 11150,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 11009,
											"end": 11150,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 11156,
											"end": 11249,
											"name": "tag",
											"source": 11,
											"value": "216"
										},
										{
											"begin": 11156,
											"end": 11249,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 11193,
											"end": 11199,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 11240,
											"end": 11242,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 11235,
											"end": 11237,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 11228,
											"end": 11233,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 11224,
											"end": 11238,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 11220,
											"end": 11243,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 11210,
											"end": 11243,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 11210,
											"end": 11243,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 11156,
											"end": 11249,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 11156,
											"end": 11249,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 11156,
											"end": 11249,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 11156,
											"end": 11249,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 11255,
											"end": 11362,
											"name": "tag",
											"source": 11,
											"value": "217"
										},
										{
											"begin": 11255,
											"end": 11362,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 11299,
											"end": 11307,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 11349,
											"end": 11354,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 11343,
											"end": 11347,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 11339,
											"end": 11355,
											"name": "SHL",
											"source": 11
										},
										{
											"begin": 11318,
											"end": 11355,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 11318,
											"end": 11355,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 11255,
											"end": 11362,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 11255,
											"end": 11362,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 11255,
											"end": 11362,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 11255,
											"end": 11362,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 11255,
											"end": 11362,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 11368,
											"end": 11761,
											"name": "tag",
											"source": 11,
											"value": "218"
										},
										{
											"begin": 11368,
											"end": 11761,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 11437,
											"end": 11443,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 11487,
											"end": 11488,
											"name": "PUSH",
											"source": 11,
											"value": "8"
										},
										{
											"begin": 11475,
											"end": 11485,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 11471,
											"end": 11489,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 11510,
											"end": 11607,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "362"
										},
										{
											"begin": 11540,
											"end": 11606,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11529,
											"end": 11538,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 11510,
											"end": 11607,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "217"
										},
										{
											"begin": 11510,
											"end": 11607,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 11510,
											"end": 11607,
											"name": "tag",
											"source": 11,
											"value": "362"
										},
										{
											"begin": 11510,
											"end": 11607,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 11628,
											"end": 11667,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "363"
										},
										{
											"begin": 11658,
											"end": 11666,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 11647,
											"end": 11656,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 11628,
											"end": 11667,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "217"
										},
										{
											"begin": 11628,
											"end": 11667,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 11628,
											"end": 11667,
											"name": "tag",
											"source": 11,
											"value": "363"
										},
										{
											"begin": 11628,
											"end": 11667,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 11616,
											"end": 11667,
											"name": "SWAP6",
											"source": 11
										},
										{
											"begin": 11616,
											"end": 11667,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 11700,
											"end": 11704,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 11696,
											"end": 11705,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 11689,
											"end": 11694,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 11685,
											"end": 11706,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 11676,
											"end": 11706,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 11676,
											"end": 11706,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 11749,
											"end": 11753,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 11739,
											"end": 11747,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 11735,
											"end": 11754,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 11728,
											"end": 11733,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 11725,
											"end": 11755,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 11715,
											"end": 11755,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 11715,
											"end": 11755,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 11444,
											"end": 11761,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 11444,
											"end": 11761,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 11368,
											"end": 11761,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 11368,
											"end": 11761,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 11368,
											"end": 11761,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 11368,
											"end": 11761,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 11368,
											"end": 11761,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 11368,
											"end": 11761,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 11767,
											"end": 11909,
											"name": "tag",
											"source": 11,
											"value": "219"
										},
										{
											"begin": 11767,
											"end": 11909,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 11817,
											"end": 11826,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 11850,
											"end": 11903,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "365"
										},
										{
											"begin": 11868,
											"end": 11902,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "366"
										},
										{
											"begin": 11877,
											"end": 11901,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "367"
										},
										{
											"begin": 11895,
											"end": 11900,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 11877,
											"end": 11901,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "195"
										},
										{
											"begin": 11877,
											"end": 11901,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 11877,
											"end": 11901,
											"name": "tag",
											"source": 11,
											"value": "367"
										},
										{
											"begin": 11877,
											"end": 11901,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 11868,
											"end": 11902,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "210"
										},
										{
											"begin": 11868,
											"end": 11902,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 11868,
											"end": 11902,
											"name": "tag",
											"source": 11,
											"value": "366"
										},
										{
											"begin": 11868,
											"end": 11902,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 11850,
											"end": 11903,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "195"
										},
										{
											"begin": 11850,
											"end": 11903,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 11850,
											"end": 11903,
											"name": "tag",
											"source": 11,
											"value": "365"
										},
										{
											"begin": 11850,
											"end": 11903,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 11837,
											"end": 11903,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 11837,
											"end": 11903,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 11767,
											"end": 11909,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 11767,
											"end": 11909,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 11767,
											"end": 11909,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 11767,
											"end": 11909,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 11915,
											"end": 11990,
											"name": "tag",
											"source": 11,
											"value": "220"
										},
										{
											"begin": 11915,
											"end": 11990,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 11958,
											"end": 11961,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 11979,
											"end": 11984,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 11972,
											"end": 11984,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 11972,
											"end": 11984,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 11915,
											"end": 11990,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 11915,
											"end": 11990,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 11915,
											"end": 11990,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 11915,
											"end": 11990,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 11996,
											"end": 12265,
											"name": "tag",
											"source": 11,
											"value": "221"
										},
										{
											"begin": 11996,
											"end": 12265,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 12106,
											"end": 12145,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "370"
										},
										{
											"begin": 12137,
											"end": 12144,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 12106,
											"end": 12145,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "219"
										},
										{
											"begin": 12106,
											"end": 12145,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 12106,
											"end": 12145,
											"name": "tag",
											"source": 11,
											"value": "370"
										},
										{
											"begin": 12106,
											"end": 12145,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 12167,
											"end": 12258,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "371"
										},
										{
											"begin": 12216,
											"end": 12257,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "372"
										},
										{
											"begin": 12240,
											"end": 12256,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 12216,
											"end": 12257,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "220"
										},
										{
											"begin": 12216,
											"end": 12257,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 12216,
											"end": 12257,
											"name": "tag",
											"source": 11,
											"value": "372"
										},
										{
											"begin": 12216,
											"end": 12257,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 12208,
											"end": 12214,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 12201,
											"end": 12205,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 12195,
											"end": 12206,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 12167,
											"end": 12258,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "218"
										},
										{
											"begin": 12167,
											"end": 12258,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 12167,
											"end": 12258,
											"name": "tag",
											"source": 11,
											"value": "371"
										},
										{
											"begin": 12167,
											"end": 12258,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 12161,
											"end": 12165,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 12154,
											"end": 12259,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 12072,
											"end": 12265,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 11996,
											"end": 12265,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 11996,
											"end": 12265,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 11996,
											"end": 12265,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 11996,
											"end": 12265,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 12271,
											"end": 12344,
											"name": "tag",
											"source": 11,
											"value": "222"
										},
										{
											"begin": 12271,
											"end": 12344,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 12316,
											"end": 12319,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 12271,
											"end": 12344,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 12271,
											"end": 12344,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 12350,
											"end": 12539,
											"name": "tag",
											"source": 11,
											"value": "223"
										},
										{
											"begin": 12350,
											"end": 12539,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 12427,
											"end": 12459,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "375"
										},
										{
											"begin": 12427,
											"end": 12459,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "222"
										},
										{
											"begin": 12427,
											"end": 12459,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 12427,
											"end": 12459,
											"name": "tag",
											"source": 11,
											"value": "375"
										},
										{
											"begin": 12427,
											"end": 12459,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 12468,
											"end": 12533,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "376"
										},
										{
											"begin": 12526,
											"end": 12532,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 12518,
											"end": 12524,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 12512,
											"end": 12516,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 12468,
											"end": 12533,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "221"
										},
										{
											"begin": 12468,
											"end": 12533,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 12468,
											"end": 12533,
											"name": "tag",
											"source": 11,
											"value": "376"
										},
										{
											"begin": 12468,
											"end": 12533,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 12403,
											"end": 12539,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 12350,
											"end": 12539,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 12350,
											"end": 12539,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 12350,
											"end": 12539,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 12545,
											"end": 12731,
											"name": "tag",
											"source": 11,
											"value": "224"
										},
										{
											"begin": 12545,
											"end": 12731,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 12605,
											"end": 12725,
											"name": "tag",
											"source": 11,
											"value": "378"
										},
										{
											"begin": 12605,
											"end": 12725,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 12622,
											"end": 12625,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 12615,
											"end": 12620,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 12612,
											"end": 12626,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 12605,
											"end": 12725,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 12605,
											"end": 12725,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "380"
										},
										{
											"begin": 12605,
											"end": 12725,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 12676,
											"end": 12715,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "381"
										},
										{
											"begin": 12713,
											"end": 12714,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 12706,
											"end": 12711,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 12676,
											"end": 12715,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "223"
										},
										{
											"begin": 12676,
											"end": 12715,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 12676,
											"end": 12715,
											"name": "tag",
											"source": 11,
											"value": "381"
										},
										{
											"begin": 12676,
											"end": 12715,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 12649,
											"end": 12650,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 12642,
											"end": 12647,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 12638,
											"end": 12651,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 12629,
											"end": 12651,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 12629,
											"end": 12651,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 12605,
											"end": 12725,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "378"
										},
										{
											"begin": 12605,
											"end": 12725,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 12605,
											"end": 12725,
											"name": "tag",
											"source": 11,
											"value": "380"
										},
										{
											"begin": 12605,
											"end": 12725,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 12545,
											"end": 12731,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 12545,
											"end": 12731,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 12545,
											"end": 12731,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 12737,
											"end": 13280,
											"name": "tag",
											"source": 11,
											"value": "225"
										},
										{
											"begin": 12737,
											"end": 13280,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 12838,
											"end": 12840,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 12833,
											"end": 12836,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 12830,
											"end": 12841,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 12827,
											"end": 13273,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 12827,
											"end": 13273,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "383"
										},
										{
											"begin": 12827,
											"end": 13273,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 12872,
											"end": 12910,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "384"
										},
										{
											"begin": 12904,
											"end": 12909,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 12872,
											"end": 12910,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "215"
										},
										{
											"begin": 12872,
											"end": 12910,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 12872,
											"end": 12910,
											"name": "tag",
											"source": 11,
											"value": "384"
										},
										{
											"begin": 12872,
											"end": 12910,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 12956,
											"end": 12985,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "385"
										},
										{
											"begin": 12974,
											"end": 12984,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 12956,
											"end": 12985,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "216"
										},
										{
											"begin": 12956,
											"end": 12985,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 12956,
											"end": 12985,
											"name": "tag",
											"source": 11,
											"value": "385"
										},
										{
											"begin": 12956,
											"end": 12985,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 12946,
											"end": 12954,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 12942,
											"end": 12986,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 13139,
											"end": 13141,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 13127,
											"end": 13137,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 13124,
											"end": 13142,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 13121,
											"end": 13170,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 13121,
											"end": 13170,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "386"
										},
										{
											"begin": 13121,
											"end": 13170,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 13160,
											"end": 13168,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 13145,
											"end": 13168,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 13145,
											"end": 13168,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 13121,
											"end": 13170,
											"name": "tag",
											"source": 11,
											"value": "386"
										},
										{
											"begin": 13121,
											"end": 13170,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 13183,
											"end": 13263,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "387"
										},
										{
											"begin": 13239,
											"end": 13261,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "388"
										},
										{
											"begin": 13257,
											"end": 13260,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 13239,
											"end": 13261,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "216"
										},
										{
											"begin": 13239,
											"end": 13261,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 13239,
											"end": 13261,
											"name": "tag",
											"source": 11,
											"value": "388"
										},
										{
											"begin": 13239,
											"end": 13261,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 13229,
											"end": 13237,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 13225,
											"end": 13262,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 13212,
											"end": 13223,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 13183,
											"end": 13263,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "224"
										},
										{
											"begin": 13183,
											"end": 13263,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 13183,
											"end": 13263,
											"name": "tag",
											"source": 11,
											"value": "387"
										},
										{
											"begin": 13183,
											"end": 13263,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 12842,
											"end": 13273,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 12842,
											"end": 13273,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 12827,
											"end": 13273,
											"name": "tag",
											"source": 11,
											"value": "383"
										},
										{
											"begin": 12827,
											"end": 13273,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 12737,
											"end": 13280,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 12737,
											"end": 13280,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 12737,
											"end": 13280,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 12737,
											"end": 13280,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 13286,
											"end": 13403,
											"name": "tag",
											"source": 11,
											"value": "226"
										},
										{
											"begin": 13286,
											"end": 13403,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 13340,
											"end": 13348,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 13390,
											"end": 13395,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 13384,
											"end": 13388,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 13380,
											"end": 13396,
											"name": "SHR",
											"source": 11
										},
										{
											"begin": 13359,
											"end": 13396,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 13359,
											"end": 13396,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 13286,
											"end": 13403,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 13286,
											"end": 13403,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 13286,
											"end": 13403,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 13286,
											"end": 13403,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 13286,
											"end": 13403,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 13409,
											"end": 13578,
											"name": "tag",
											"source": 11,
											"value": "227"
										},
										{
											"begin": 13409,
											"end": 13578,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 13453,
											"end": 13459,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 13486,
											"end": 13537,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "391"
										},
										{
											"begin": 13534,
											"end": 13535,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 13530,
											"end": 13536,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 13522,
											"end": 13527,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 13519,
											"end": 13520,
											"name": "PUSH",
											"source": 11,
											"value": "8"
										},
										{
											"begin": 13515,
											"end": 13528,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 13486,
											"end": 13537,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "226"
										},
										{
											"begin": 13486,
											"end": 13537,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 13486,
											"end": 13537,
											"name": "tag",
											"source": 11,
											"value": "391"
										},
										{
											"begin": 13486,
											"end": 13537,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 13482,
											"end": 13538,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 13567,
											"end": 13571,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 13561,
											"end": 13565,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 13557,
											"end": 13572,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 13547,
											"end": 13572,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 13547,
											"end": 13572,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 13460,
											"end": 13578,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 13409,
											"end": 13578,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 13409,
											"end": 13578,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 13409,
											"end": 13578,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 13409,
											"end": 13578,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 13409,
											"end": 13578,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 13583,
											"end": 13878,
											"name": "tag",
											"source": 11,
											"value": "228"
										},
										{
											"begin": 13583,
											"end": 13878,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 13659,
											"end": 13663,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 13805,
											"end": 13834,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "393"
										},
										{
											"begin": 13830,
											"end": 13833,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 13824,
											"end": 13828,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 13805,
											"end": 13834,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "227"
										},
										{
											"begin": 13805,
											"end": 13834,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 13805,
											"end": 13834,
											"name": "tag",
											"source": 11,
											"value": "393"
										},
										{
											"begin": 13805,
											"end": 13834,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 13797,
											"end": 13834,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 13797,
											"end": 13834,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 13867,
											"end": 13870,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 13864,
											"end": 13865,
											"name": "PUSH",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 13860,
											"end": 13871,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 13854,
											"end": 13858,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 13851,
											"end": 13872,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 13843,
											"end": 13872,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 13843,
											"end": 13872,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 13583,
											"end": 13878,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 13583,
											"end": 13878,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 13583,
											"end": 13878,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 13583,
											"end": 13878,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 13583,
											"end": 13878,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 13883,
											"end": 15278,
											"name": "tag",
											"source": 11,
											"value": "179"
										},
										{
											"begin": 13883,
											"end": 15278,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 14000,
											"end": 14037,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "395"
										},
										{
											"begin": 14033,
											"end": 14036,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 14000,
											"end": 14037,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "183"
										},
										{
											"begin": 14000,
											"end": 14037,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 14000,
											"end": 14037,
											"name": "tag",
											"source": 11,
											"value": "395"
										},
										{
											"begin": 14000,
											"end": 14037,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 14102,
											"end": 14120,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 14094,
											"end": 14100,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 14091,
											"end": 14121,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 14088,
											"end": 14144,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 14088,
											"end": 14144,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "396"
										},
										{
											"begin": 14088,
											"end": 14144,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 14124,
											"end": 14142,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "397"
										},
										{
											"begin": 14124,
											"end": 14142,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "214"
										},
										{
											"begin": 14124,
											"end": 14142,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 14124,
											"end": 14142,
											"name": "tag",
											"source": 11,
											"value": "397"
										},
										{
											"begin": 14124,
											"end": 14142,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 14088,
											"end": 14144,
											"name": "tag",
											"source": 11,
											"value": "396"
										},
										{
											"begin": 14088,
											"end": 14144,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 14168,
											"end": 14206,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "398"
										},
										{
											"begin": 14200,
											"end": 14204,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 14194,
											"end": 14205,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 14168,
											"end": 14206,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 14168,
											"end": 14206,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 14168,
											"end": 14206,
											"name": "tag",
											"source": 11,
											"value": "398"
										},
										{
											"begin": 14168,
											"end": 14206,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 14253,
											"end": 14320,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "399"
										},
										{
											"begin": 14313,
											"end": 14319,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 14305,
											"end": 14311,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 14299,
											"end": 14303,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 14253,
											"end": 14320,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "225"
										},
										{
											"begin": 14253,
											"end": 14320,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 14253,
											"end": 14320,
											"name": "tag",
											"source": 11,
											"value": "399"
										},
										{
											"begin": 14253,
											"end": 14320,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 14347,
											"end": 14348,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 14371,
											"end": 14375,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 14358,
											"end": 14375,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 14358,
											"end": 14375,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 14403,
											"end": 14405,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 14395,
											"end": 14401,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 14392,
											"end": 14406,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 14420,
											"end": 14421,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 14415,
											"end": 15033,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 14415,
											"end": 15033,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 14415,
											"end": 15033,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "401"
										},
										{
											"begin": 14415,
											"end": 15033,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 15077,
											"end": 15078,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 15094,
											"end": 15100,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 15091,
											"end": 15168,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 15091,
											"end": 15168,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "402"
										},
										{
											"begin": 15091,
											"end": 15168,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 15143,
											"end": 15152,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 15138,
											"end": 15141,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 15134,
											"end": 15153,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 15128,
											"end": 15154,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 15119,
											"end": 15154,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 15119,
											"end": 15154,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 15091,
											"end": 15168,
											"name": "tag",
											"source": 11,
											"value": "402"
										},
										{
											"begin": 15091,
											"end": 15168,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 15194,
											"end": 15261,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "403"
										},
										{
											"begin": 15254,
											"end": 15260,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 15247,
											"end": 15252,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 15194,
											"end": 15261,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "228"
										},
										{
											"begin": 15194,
											"end": 15261,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 15194,
											"end": 15261,
											"name": "tag",
											"source": 11,
											"value": "403"
										},
										{
											"begin": 15194,
											"end": 15261,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 15188,
											"end": 15192,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 15181,
											"end": 15262,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 15050,
											"end": 15272,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 14385,
											"end": 15272,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "400"
										},
										{
											"begin": 14385,
											"end": 15272,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 14415,
											"end": 15033,
											"name": "tag",
											"source": 11,
											"value": "401"
										},
										{
											"begin": 14415,
											"end": 15033,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 14467,
											"end": 14471,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 14463,
											"end": 14472,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 14455,
											"end": 14461,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 14451,
											"end": 14473,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 14501,
											"end": 14538,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "404"
										},
										{
											"begin": 14533,
											"end": 14537,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 14501,
											"end": 14538,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "215"
										},
										{
											"begin": 14501,
											"end": 14538,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 14501,
											"end": 14538,
											"name": "tag",
											"source": 11,
											"value": "404"
										},
										{
											"begin": 14501,
											"end": 14538,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 14560,
											"end": 14561,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 14574,
											"end": 14782,
											"name": "tag",
											"source": 11,
											"value": "405"
										},
										{
											"begin": 14574,
											"end": 14782,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 14588,
											"end": 14595,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 14585,
											"end": 14586,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 14582,
											"end": 14596,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 14574,
											"end": 14782,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 14574,
											"end": 14782,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "407"
										},
										{
											"begin": 14574,
											"end": 14782,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 14667,
											"end": 14676,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 14662,
											"end": 14665,
											"name": "DUP10",
											"source": 11
										},
										{
											"begin": 14658,
											"end": 14677,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 14652,
											"end": 14678,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 14644,
											"end": 14650,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 14637,
											"end": 14679,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 14718,
											"end": 14719,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 14710,
											"end": 14716,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 14706,
											"end": 14720,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 14696,
											"end": 14720,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 14696,
											"end": 14720,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 14765,
											"end": 14767,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 14754,
											"end": 14763,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 14750,
											"end": 14768,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 14737,
											"end": 14768,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 14737,
											"end": 14768,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 14611,
											"end": 14615,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 14608,
											"end": 14609,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 14604,
											"end": 14616,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 14599,
											"end": 14616,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 14599,
											"end": 14616,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 14574,
											"end": 14782,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "405"
										},
										{
											"begin": 14574,
											"end": 14782,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 14574,
											"end": 14782,
											"name": "tag",
											"source": 11,
											"value": "407"
										},
										{
											"begin": 14574,
											"end": 14782,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 14810,
											"end": 14816,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 14801,
											"end": 14808,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 14798,
											"end": 14817,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 14795,
											"end": 14974,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 14795,
											"end": 14974,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "408"
										},
										{
											"begin": 14795,
											"end": 14974,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 14868,
											"end": 14877,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 14863,
											"end": 14866,
											"name": "DUP10",
											"source": 11
										},
										{
											"begin": 14859,
											"end": 14878,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 14853,
											"end": 14879,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 14911,
											"end": 14959,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "409"
										},
										{
											"begin": 14953,
											"end": 14957,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 14945,
											"end": 14951,
											"name": "DUP10",
											"source": 11
										},
										{
											"begin": 14941,
											"end": 14958,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 14930,
											"end": 14939,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 14911,
											"end": 14959,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "227"
										},
										{
											"begin": 14911,
											"end": 14959,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 14911,
											"end": 14959,
											"name": "tag",
											"source": 11,
											"value": "409"
										},
										{
											"begin": 14911,
											"end": 14959,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 14903,
											"end": 14909,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 14896,
											"end": 14960,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 14818,
											"end": 14974,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 14795,
											"end": 14974,
											"name": "tag",
											"source": 11,
											"value": "408"
										},
										{
											"begin": 14795,
											"end": 14974,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 15020,
											"end": 15021,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 15016,
											"end": 15017,
											"name": "PUSH",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 15008,
											"end": 15014,
											"name": "DUP9",
											"source": 11
										},
										{
											"begin": 15004,
											"end": 15018,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 15000,
											"end": 15022,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 14994,
											"end": 14998,
											"name": "DUP9",
											"source": 11
										},
										{
											"begin": 14987,
											"end": 15023,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 14422,
											"end": 15033,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 14422,
											"end": 15033,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 14422,
											"end": 15033,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 14385,
											"end": 15272,
											"name": "tag",
											"source": 11,
											"value": "400"
										},
										{
											"begin": 14385,
											"end": 15272,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 14385,
											"end": 15272,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 13975,
											"end": 15278,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 13975,
											"end": 15278,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 13975,
											"end": 15278,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 13883,
											"end": 15278,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 13883,
											"end": 15278,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 13883,
											"end": 15278,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
								"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",
								"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/proxy/utils/Initializable.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"src/erc20/ERC20Received.sol",
								"src/upgrade/MyERC20V1.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"initialize()": "8129fc1c",
							"mint(address,uint256)": "40c10f19",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/upgrade/MyERC20V1.sol\":\"MyERC20V1\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7a61054ae84cd6c4d04c0c4450ba1d6de41e27e0a2c4f1bcdf58f796b401c609\",\"dweb:/ipfs/QmUvtdp7X1mRVyC3CsHrtPbgoqWaXHp3S1ZR24tpAQYJWM\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"keccak256\":\"0x9a1766b1921bf91b3e61eb53c7a6e70725254befd4bdcbbcd3af40bd9f66856f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://29bf2fa41a172086a665c9738377b93655aa4b1ffda9fe839c8bdf646f185040\",\"dweb:/ipfs/QmeB21qDuo8WPQSrqXJbQmWHKsdeocGNSUWLhCwniVejrt\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9\",\"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV\"]},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7a61054ae84cd6c4d04c0c4450ba1d6de41e27e0a2c4f1bcdf58f796b401c609\",\"dweb:/ipfs/QmUvtdp7X1mRVyC3CsHrtPbgoqWaXHp3S1ZR24tpAQYJWM\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"src/erc20/ERC20Received.sol\":{\"keccak256\":\"0xbd16574b1ba13d46cabd1b785d03e5d2382681b6cb404662f5830f48017e0b3e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4d874dec8d927b3e8ba417319ca09399f44a522d7fa390b6897a14072cde31ba\",\"dweb:/ipfs/QmW7jyMtPrpJ2QV4mXNG5roUJBef4eywfKRsyZAQJUiSS7\"]},\"src/upgrade/MyERC20V1.sol\":{\"keccak256\":\"0xcc4d3d47ba97dd7cd9d312a0894256b5cee8165147175f9bf4a04b3ce0214a89\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1163a1778952d5e8cfb4d719ce3d4de4ab2fa9d663be0a8ff08bbb8893319f63\",\"dweb:/ipfs/QmXsQWHHo1hAdvhcyJkEQpvPoL33tFrf972gfPYjWFxn9q\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
					"exportedSymbols": {
						"Initializable": [
							253
						]
					},
					"id": 254,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "113:24:0"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Initializable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "139:2209:0",
								"text": " @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```solidity\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="
							},
							"fullyImplemented": true,
							"id": 253,
							"linearizedBaseContracts": [
								253
							],
							"name": "Initializable",
							"nameLocation": "2367:13:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "Initializable.InitializableStorage",
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "2387:293:0",
										"text": " @dev Storage of the initializable contract.\n It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n when using with upgradeable contracts.\n @custom:storage-location erc7201:openzeppelin.storage.Initializable"
									},
									"id": 10,
									"members": [
										{
											"constant": false,
											"id": 6,
											"mutability": "mutable",
											"name": "_initialized",
											"nameLocation": "2820:12:0",
											"nodeType": "VariableDeclaration",
											"scope": 10,
											"src": "2813:19:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 5,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "2813:6:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 9,
											"mutability": "mutable",
											"name": "_initializing",
											"nameLocation": "2955:13:0",
											"nodeType": "VariableDeclaration",
											"scope": 10,
											"src": "2950:18:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 8,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "2950:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "InitializableStorage",
									"nameLocation": "2692:20:0",
									"nodeType": "StructDefinition",
									"scope": 253,
									"src": "2685:290:0",
									"visibility": "public"
								},
								{
									"constant": true,
									"id": 13,
									"mutability": "constant",
									"name": "INITIALIZABLE_STORAGE",
									"nameLocation": "3123:21:0",
									"nodeType": "VariableDeclaration",
									"scope": 253,
									"src": "3098:115:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 11,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "3098:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307866306335376531363834306466303430663135303838646332663831666533393163333932336265633733653233613936363265666339633232396336613030",
										"id": 12,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "3147:66:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_108904022758810753673719992590105913556127789646572562039383141376366747609600_by_1",
											"typeString": "int_const 1089...(70 digits omitted)...9600"
										},
										"value": "0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00"
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "3220:60:0",
										"text": " @dev The contract is already initialized."
									},
									"errorSelector": "f92ee8a9",
									"id": 16,
									"name": "InvalidInitialization",
									"nameLocation": "3291:21:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3312:2:0"
									},
									"src": "3285:30:0"
								},
								{
									"documentation": {
										"id": 17,
										"nodeType": "StructuredDocumentation",
										"src": "3321:57:0",
										"text": " @dev The contract is not initializing."
									},
									"errorSelector": "d7e6bcf8",
									"id": 19,
									"name": "NotInitializing",
									"nameLocation": "3389:15:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 18,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3404:2:0"
									},
									"src": "3383:24:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 20,
										"nodeType": "StructuredDocumentation",
										"src": "3413:90:0",
										"text": " @dev Triggered when the contract has been initialized or reinitialized."
									},
									"eventSelector": "c7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2",
									"id": 24,
									"name": "Initialized",
									"nameLocation": "3514:11:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 23,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 22,
												"indexed": false,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "3533:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 24,
												"src": "3526:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 21,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "3526:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3525:16:0"
									},
									"src": "3508:34:0"
								},
								{
									"body": {
										"id": 106,
										"nodeType": "Block",
										"src": "4092:1081:0",
										"statements": [
											{
												"assignments": [
													29
												],
												"declarations": [
													{
														"constant": false,
														"id": 29,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "4187:1:0",
														"nodeType": "VariableDeclaration",
														"scope": 106,
														"src": "4158:30:0",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$10_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage"
														},
														"typeName": {
															"id": 28,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 27,
																"name": "InitializableStorage",
																"nameLocations": [
																	"4158:20:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 10,
																"src": "4158:20:0"
															},
															"referencedDeclaration": 10,
															"src": "4158:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$10_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 32,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 30,
														"name": "_getInitializableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 252,
														"src": "4191:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$10_storage_ptr_$",
															"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
														}
													},
													"id": 31,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4191:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_InitializableStorage_$10_storage_ptr",
														"typeString": "struct Initializable.InitializableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4158:59:0"
											},
											{
												"assignments": [
													34
												],
												"declarations": [
													{
														"constant": false,
														"id": 34,
														"mutability": "mutable",
														"name": "isTopLevelCall",
														"nameLocation": "4284:14:0",
														"nodeType": "VariableDeclaration",
														"scope": 106,
														"src": "4279:19:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 33,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4279:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 38,
												"initialValue": {
													"id": 37,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "4301:16:0",
													"subExpression": {
														"expression": {
															"id": 35,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 29,
															"src": "4302:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$10_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 36,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4304:13:0",
														"memberName": "_initializing",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 9,
														"src": "4302:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4279:38:0"
											},
											{
												"assignments": [
													40
												],
												"declarations": [
													{
														"constant": false,
														"id": 40,
														"mutability": "mutable",
														"name": "initialized",
														"nameLocation": "4334:11:0",
														"nodeType": "VariableDeclaration",
														"scope": 106,
														"src": "4327:18:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														},
														"typeName": {
															"id": 39,
															"name": "uint64",
															"nodeType": "ElementaryTypeName",
															"src": "4327:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 43,
												"initialValue": {
													"expression": {
														"id": 41,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 29,
														"src": "4348:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$10_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage storage pointer"
														}
													},
													"id": 42,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "4350:12:0",
													"memberName": "_initialized",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 6,
													"src": "4348:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4327:35:0"
											},
											{
												"assignments": [
													45
												],
												"declarations": [
													{
														"constant": false,
														"id": 45,
														"mutability": "mutable",
														"name": "initialSetup",
														"nameLocation": "4711:12:0",
														"nodeType": "VariableDeclaration",
														"scope": 106,
														"src": "4706:17:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 44,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4706:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 51,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 50,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														},
														"id": 48,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 46,
															"name": "initialized",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 40,
															"src": "4726:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 47,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4741:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "4726:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"id": 49,
														"name": "isTopLevelCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 34,
														"src": "4746:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4726:34:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4706:54:0"
											},
											{
												"assignments": [
													53
												],
												"declarations": [
													{
														"constant": false,
														"id": 53,
														"mutability": "mutable",
														"name": "construction",
														"nameLocation": "4775:12:0",
														"nodeType": "VariableDeclaration",
														"scope": 106,
														"src": "4770:17:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 52,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4770:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 66,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 65,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														},
														"id": 56,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 54,
															"name": "initialized",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 40,
															"src": "4790:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "31",
															"id": 55,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4805:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "4790:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 64,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 59,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "4818:4:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Initializable_$253",
																				"typeString": "contract Initializable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Initializable_$253",
																				"typeString": "contract Initializable"
																			}
																		],
																		"id": 58,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4810:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 57,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "4810:7:0",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 60,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4810:13:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 61,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "4824:4:0",
																"memberName": "code",
																"nodeType": "MemberAccess",
																"src": "4810:18:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 62,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4829:6:0",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "4810:25:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 63,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4839:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "4810:30:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4790:50:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4770:70:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 71,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 68,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "4855:13:0",
														"subExpression": {
															"id": 67,
															"name": "initialSetup",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 45,
															"src": "4856:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"id": 70,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "4872:13:0",
														"subExpression": {
															"id": 69,
															"name": "construction",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 53,
															"src": "4873:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4855:30:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 76,
												"nodeType": "IfStatement",
												"src": "4851:91:0",
												"trueBody": {
													"id": 75,
													"nodeType": "Block",
													"src": "4887:55:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 72,
																	"name": "InvalidInitialization",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 16,
																	"src": "4908:21:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 73,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4908:23:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 74,
															"nodeType": "RevertStatement",
															"src": "4901:30:0"
														}
													]
												}
											},
											{
												"expression": {
													"id": 81,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 77,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 29,
															"src": "4951:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$10_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 79,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "4953:12:0",
														"memberName": "_initialized",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 6,
														"src": "4951:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 80,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4968:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "4951:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"id": 82,
												"nodeType": "ExpressionStatement",
												"src": "4951:18:0"
											},
											{
												"condition": {
													"id": 83,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 34,
													"src": "4983:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 91,
												"nodeType": "IfStatement",
												"src": "4979:67:0",
												"trueBody": {
													"id": 90,
													"nodeType": "Block",
													"src": "4999:47:0",
													"statements": [
														{
															"expression": {
																"id": 88,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 84,
																		"name": "$",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 29,
																		"src": "5013:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_InitializableStorage_$10_storage_ptr",
																			"typeString": "struct Initializable.InitializableStorage storage pointer"
																		}
																	},
																	"id": 86,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "5015:13:0",
																	"memberName": "_initializing",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 9,
																	"src": "5013:15:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 87,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5031:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "5013:22:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 89,
															"nodeType": "ExpressionStatement",
															"src": "5013:22:0"
														}
													]
												}
											},
											{
												"id": 92,
												"nodeType": "PlaceholderStatement",
												"src": "5055:1:0"
											},
											{
												"condition": {
													"id": 93,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 34,
													"src": "5070:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 105,
												"nodeType": "IfStatement",
												"src": "5066:101:0",
												"trueBody": {
													"id": 104,
													"nodeType": "Block",
													"src": "5086:81:0",
													"statements": [
														{
															"expression": {
																"id": 98,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 94,
																		"name": "$",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 29,
																		"src": "5100:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_InitializableStorage_$10_storage_ptr",
																			"typeString": "struct Initializable.InitializableStorage storage pointer"
																		}
																	},
																	"id": 96,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "5102:13:0",
																	"memberName": "_initializing",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 9,
																	"src": "5100:15:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "66616c7365",
																	"id": 97,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5118:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "5100:23:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 99,
															"nodeType": "ExpressionStatement",
															"src": "5100:23:0"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"hexValue": "31",
																		"id": 101,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5154:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		}
																	],
																	"id": 100,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 24,
																	"src": "5142:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint64_$returns$__$",
																		"typeString": "function (uint64)"
																	}
																},
																"id": 102,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5142:14:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 103,
															"nodeType": "EmitStatement",
															"src": "5137:19:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 25,
										"nodeType": "StructuredDocumentation",
										"src": "3548:516:0",
										"text": " @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n production.\n Emits an {Initialized} event."
									},
									"id": 107,
									"name": "initializer",
									"nameLocation": "4078:11:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 26,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4089:2:0"
									},
									"src": "4069:1104:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 153,
										"nodeType": "Block",
										"src": "6291:392:0",
										"statements": [
											{
												"assignments": [
													114
												],
												"declarations": [
													{
														"constant": false,
														"id": 114,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "6386:1:0",
														"nodeType": "VariableDeclaration",
														"scope": 153,
														"src": "6357:30:0",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$10_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage"
														},
														"typeName": {
															"id": 113,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 112,
																"name": "InitializableStorage",
																"nameLocations": [
																	"6357:20:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 10,
																"src": "6357:20:0"
															},
															"referencedDeclaration": 10,
															"src": "6357:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$10_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 117,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 115,
														"name": "_getInitializableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 252,
														"src": "6390:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$10_storage_ptr_$",
															"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
														}
													},
													"id": 116,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6390:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_InitializableStorage_$10_storage_ptr",
														"typeString": "struct Initializable.InitializableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6357:59:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 124,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 118,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 114,
															"src": "6431:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$10_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 119,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6433:13:0",
														"memberName": "_initializing",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 9,
														"src": "6431:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														},
														"id": 123,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 120,
																"name": "$",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 114,
																"src": "6450:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_InitializableStorage_$10_storage_ptr",
																	"typeString": "struct Initializable.InitializableStorage storage pointer"
																}
															},
															"id": 121,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "6452:12:0",
															"memberName": "_initialized",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 6,
															"src": "6450:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">=",
														"rightExpression": {
															"id": 122,
															"name": "version",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 110,
															"src": "6468:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"src": "6450:25:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "6431:44:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 129,
												"nodeType": "IfStatement",
												"src": "6427:105:0",
												"trueBody": {
													"id": 128,
													"nodeType": "Block",
													"src": "6477:55:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 125,
																	"name": "InvalidInitialization",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 16,
																	"src": "6498:21:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 126,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6498:23:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 127,
															"nodeType": "RevertStatement",
															"src": "6491:30:0"
														}
													]
												}
											},
											{
												"expression": {
													"id": 134,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 130,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 114,
															"src": "6541:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$10_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 132,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "6543:12:0",
														"memberName": "_initialized",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 6,
														"src": "6541:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 133,
														"name": "version",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 110,
														"src": "6558:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"src": "6541:24:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"id": 135,
												"nodeType": "ExpressionStatement",
												"src": "6541:24:0"
											},
											{
												"expression": {
													"id": 140,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 136,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 114,
															"src": "6575:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$10_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 138,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "6577:13:0",
														"memberName": "_initializing",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 9,
														"src": "6575:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 139,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6593:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "6575:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 141,
												"nodeType": "ExpressionStatement",
												"src": "6575:22:0"
											},
											{
												"id": 142,
												"nodeType": "PlaceholderStatement",
												"src": "6607:1:0"
											},
											{
												"expression": {
													"id": 147,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 143,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 114,
															"src": "6618:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$10_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 145,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "6620:13:0",
														"memberName": "_initializing",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 9,
														"src": "6618:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 146,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6636:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "6618:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 148,
												"nodeType": "ExpressionStatement",
												"src": "6618:23:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 150,
															"name": "version",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 110,
															"src": "6668:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														],
														"id": 149,
														"name": "Initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 24,
														"src": "6656:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint64_$returns$__$",
															"typeString": "function (uint64)"
														}
													},
													"id": 151,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6656:20:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 152,
												"nodeType": "EmitStatement",
												"src": "6651:25:0"
											}
										]
									},
									"documentation": {
										"id": 108,
										"nodeType": "StructuredDocumentation",
										"src": "5179:1068:0",
										"text": " @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n Emits an {Initialized} event."
									},
									"id": 154,
									"name": "reinitializer",
									"nameLocation": "6261:13:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 111,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 110,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "6282:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 154,
												"src": "6275:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 109,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "6275:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6274:16:0"
									},
									"src": "6252:431:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 161,
										"nodeType": "Block",
										"src": "6921:48:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 157,
														"name": "_checkInitializing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 175,
														"src": "6931:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 158,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6931:20:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 159,
												"nodeType": "ExpressionStatement",
												"src": "6931:20:0"
											},
											{
												"id": 160,
												"nodeType": "PlaceholderStatement",
												"src": "6961:1:0"
											}
										]
									},
									"documentation": {
										"id": 155,
										"nodeType": "StructuredDocumentation",
										"src": "6689:199:0",
										"text": " @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."
									},
									"id": 162,
									"name": "onlyInitializing",
									"nameLocation": "6902:16:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 156,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6918:2:0"
									},
									"src": "6893:76:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 174,
										"nodeType": "Block",
										"src": "7136:89:0",
										"statements": [
											{
												"condition": {
													"id": 168,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "7150:18:0",
													"subExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 166,
															"name": "_isInitializing",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 243,
															"src": "7151:15:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																"typeString": "function () view returns (bool)"
															}
														},
														"id": 167,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7151:17:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 173,
												"nodeType": "IfStatement",
												"src": "7146:73:0",
												"trueBody": {
													"id": 172,
													"nodeType": "Block",
													"src": "7170:49:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 169,
																	"name": "NotInitializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 19,
																	"src": "7191:15:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 170,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7191:17:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 171,
															"nodeType": "RevertStatement",
															"src": "7184:24:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 163,
										"nodeType": "StructuredDocumentation",
										"src": "6975:104:0",
										"text": " @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}."
									},
									"id": 175,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkInitializing",
									"nameLocation": "7093:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 164,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7111:2:0"
									},
									"returnParameters": {
										"id": 165,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7136:0:0"
									},
									"scope": 253,
									"src": "7084:141:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 220,
										"nodeType": "Block",
										"src": "7760:373:0",
										"statements": [
											{
												"assignments": [
													181
												],
												"declarations": [
													{
														"constant": false,
														"id": 181,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "7855:1:0",
														"nodeType": "VariableDeclaration",
														"scope": 220,
														"src": "7826:30:0",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$10_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage"
														},
														"typeName": {
															"id": 180,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 179,
																"name": "InitializableStorage",
																"nameLocations": [
																	"7826:20:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 10,
																"src": "7826:20:0"
															},
															"referencedDeclaration": 10,
															"src": "7826:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$10_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 184,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 182,
														"name": "_getInitializableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 252,
														"src": "7859:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$10_storage_ptr_$",
															"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
														}
													},
													"id": 183,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7859:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_InitializableStorage_$10_storage_ptr",
														"typeString": "struct Initializable.InitializableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7826:59:0"
											},
											{
												"condition": {
													"expression": {
														"id": 185,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 181,
														"src": "7900:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$10_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage storage pointer"
														}
													},
													"id": 186,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "7902:13:0",
													"memberName": "_initializing",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 9,
													"src": "7900:15:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 191,
												"nodeType": "IfStatement",
												"src": "7896:76:0",
												"trueBody": {
													"id": 190,
													"nodeType": "Block",
													"src": "7917:55:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 187,
																	"name": "InvalidInitialization",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 16,
																	"src": "7938:21:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 188,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7938:23:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 189,
															"nodeType": "RevertStatement",
															"src": "7931:30:0"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													},
													"id": 199,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 192,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 181,
															"src": "7985:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$10_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 193,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "7987:12:0",
														"memberName": "_initialized",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 6,
														"src": "7985:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 196,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8008:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 195,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "8008:6:0",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	}
																],
																"id": 194,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "8003:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 197,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8003:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint64",
																"typeString": "type(uint64)"
															}
														},
														"id": 198,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "8016:3:0",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "8003:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"src": "7985:34:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 219,
												"nodeType": "IfStatement",
												"src": "7981:146:0",
												"trueBody": {
													"id": 218,
													"nodeType": "Block",
													"src": "8021:106:0",
													"statements": [
														{
															"expression": {
																"id": 208,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 200,
																		"name": "$",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 181,
																		"src": "8035:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_InitializableStorage_$10_storage_ptr",
																			"typeString": "struct Initializable.InitializableStorage storage pointer"
																		}
																	},
																	"id": 202,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "8037:12:0",
																	"memberName": "_initialized",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 6,
																	"src": "8035:14:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint64",
																		"typeString": "uint64"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"arguments": [
																			{
																				"id": 205,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "8057:6:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint64_$",
																					"typeString": "type(uint64)"
																				},
																				"typeName": {
																					"id": 204,
																					"name": "uint64",
																					"nodeType": "ElementaryTypeName",
																					"src": "8057:6:0",
																					"typeDescriptions": {}
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_type$_t_uint64_$",
																					"typeString": "type(uint64)"
																				}
																			],
																			"id": 203,
																			"name": "type",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967269,
																			"src": "8052:4:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 206,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8052:12:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_meta_type_t_uint64",
																			"typeString": "type(uint64)"
																		}
																	},
																	"id": 207,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "8065:3:0",
																	"memberName": "max",
																	"nodeType": "MemberAccess",
																	"src": "8052:16:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint64",
																		"typeString": "uint64"
																	}
																},
																"src": "8035:33:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"id": 209,
															"nodeType": "ExpressionStatement",
															"src": "8035:33:0"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 213,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "8104:6:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint64_$",
																						"typeString": "type(uint64)"
																					},
																					"typeName": {
																						"id": 212,
																						"name": "uint64",
																						"nodeType": "ElementaryTypeName",
																						"src": "8104:6:0",
																						"typeDescriptions": {}
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_type$_t_uint64_$",
																						"typeString": "type(uint64)"
																					}
																				],
																				"id": 211,
																				"name": "type",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967269,
																				"src": "8099:4:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 214,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8099:12:0",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_meta_type_t_uint64",
																				"typeString": "type(uint64)"
																			}
																		},
																		"id": 215,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "8112:3:0",
																		"memberName": "max",
																		"nodeType": "MemberAccess",
																		"src": "8099:16:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint64",
																			"typeString": "uint64"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint64",
																			"typeString": "uint64"
																		}
																	],
																	"id": 210,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 24,
																	"src": "8087:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint64_$returns$__$",
																		"typeString": "function (uint64)"
																	}
																},
																"id": 216,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8087:29:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 217,
															"nodeType": "EmitStatement",
															"src": "8082:34:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 176,
										"nodeType": "StructuredDocumentation",
										"src": "7231:475:0",
										"text": " @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."
									},
									"id": 221,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_disableInitializers",
									"nameLocation": "7720:20:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 177,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7740:2:0"
									},
									"returnParameters": {
										"id": 178,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7760:0:0"
									},
									"scope": 253,
									"src": "7711:422:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 231,
										"nodeType": "Block",
										"src": "8308:63:0",
										"statements": [
											{
												"expression": {
													"expression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 227,
															"name": "_getInitializableStorage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 252,
															"src": "8325:24:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$10_storage_ptr_$",
																"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
															}
														},
														"id": 228,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8325:26:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$10_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage storage pointer"
														}
													},
													"id": 229,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "8352:12:0",
													"memberName": "_initialized",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 6,
													"src": "8325:39:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"functionReturnParameters": 226,
												"id": 230,
												"nodeType": "Return",
												"src": "8318:46:0"
											}
										]
									},
									"documentation": {
										"id": 222,
										"nodeType": "StructuredDocumentation",
										"src": "8139:99:0",
										"text": " @dev Returns the highest version that has been initialized. See {reinitializer}."
									},
									"id": 232,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getInitializedVersion",
									"nameLocation": "8252:22:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 223,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8274:2:0"
									},
									"returnParameters": {
										"id": 226,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 225,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 232,
												"src": "8300:6:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 224,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "8300:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8299:8:0"
									},
									"scope": 253,
									"src": "8243:128:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 242,
										"nodeType": "Block",
										"src": "8543:64:0",
										"statements": [
											{
												"expression": {
													"expression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 238,
															"name": "_getInitializableStorage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 252,
															"src": "8560:24:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$10_storage_ptr_$",
																"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
															}
														},
														"id": 239,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8560:26:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$10_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage storage pointer"
														}
													},
													"id": 240,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "8587:13:0",
													"memberName": "_initializing",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 9,
													"src": "8560:40:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 237,
												"id": 241,
												"nodeType": "Return",
												"src": "8553:47:0"
											}
										]
									},
									"documentation": {
										"id": 233,
										"nodeType": "StructuredDocumentation",
										"src": "8377:105:0",
										"text": " @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."
									},
									"id": 243,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_isInitializing",
									"nameLocation": "8496:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 234,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8511:2:0"
									},
									"returnParameters": {
										"id": 237,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 236,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 243,
												"src": "8537:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 235,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8537:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8536:6:0"
									},
									"scope": 253,
									"src": "8487:120:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 251,
										"nodeType": "Block",
										"src": "8827:80:0",
										"statements": [
											{
												"AST": {
													"nativeSrc": "8846:55:0",
													"nodeType": "YulBlock",
													"src": "8846:55:0",
													"statements": [
														{
															"nativeSrc": "8860:31:0",
															"nodeType": "YulAssignment",
															"src": "8860:31:0",
															"value": {
																"name": "INITIALIZABLE_STORAGE",
																"nativeSrc": "8870:21:0",
																"nodeType": "YulIdentifier",
																"src": "8870:21:0"
															},
															"variableNames": [
																{
																	"name": "$.slot",
																	"nativeSrc": "8860:6:0",
																	"nodeType": "YulIdentifier",
																	"src": "8860:6:0"
																}
															]
														}
													]
												},
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 248,
														"isOffset": false,
														"isSlot": true,
														"src": "8860:6:0",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 13,
														"isOffset": false,
														"isSlot": false,
														"src": "8870:21:0",
														"valueSize": 1
													}
												],
												"id": 250,
												"nodeType": "InlineAssembly",
												"src": "8837:64:0"
											}
										]
									},
									"documentation": {
										"id": 244,
										"nodeType": "StructuredDocumentation",
										"src": "8613:67:0",
										"text": " @dev Returns a pointer to the storage namespace."
									},
									"id": 252,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getInitializableStorage",
									"nameLocation": "8746:24:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 245,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8770:2:0"
									},
									"returnParameters": {
										"id": 249,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 248,
												"mutability": "mutable",
												"name": "$",
												"nameLocation": "8824:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 252,
												"src": "8795:30:0",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_InitializableStorage_$10_storage_ptr",
													"typeString": "struct Initializable.InitializableStorage"
												},
												"typeName": {
													"id": 247,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 246,
														"name": "InitializableStorage",
														"nameLocations": [
															"8795:20:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 10,
														"src": "8795:20:0"
													},
													"referencedDeclaration": 10,
													"src": "8795:20:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_InitializableStorage_$10_storage_ptr",
														"typeString": "struct Initializable.InitializableStorage"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8794:32:0"
									},
									"scope": 253,
									"src": "8737:170:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 254,
							"src": "2349:6560:0",
							"usedErrors": [
								16,
								19
							],
							"usedEvents": [
								24
							]
						}
					],
					"src": "113:8797:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",
					"exportedSymbols": {
						"ContextUpgradeable": [
							916
						],
						"ERC20Upgradeable": [
							870
						],
						"IERC20": [
							1900
						],
						"IERC20Errors": [
							958
						],
						"IERC20Metadata": [
							1926
						],
						"Initializable": [
							253
						]
					},
					"id": 871,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 255,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "105:24:1"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 257,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 871,
							"sourceUnit": 1901,
							"src": "131:70:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 256,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1900,
										"src": "139:6:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
							"file": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
							"id": 259,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 871,
							"sourceUnit": 1927,
							"src": "202:97:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 258,
										"name": "IERC20Metadata",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1926,
										"src": "210:14:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
							"file": "../../utils/ContextUpgradeable.sol",
							"id": 261,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 871,
							"sourceUnit": 917,
							"src": "300:70:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 260,
										"name": "ContextUpgradeable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 916,
										"src": "308:18:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
							"file": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
							"id": 263,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 871,
							"sourceUnit": 1054,
							"src": "371:83:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 262,
										"name": "IERC20Errors",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 958,
										"src": "379:12:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../../proxy/utils/Initializable.sol",
							"id": 265,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 871,
							"sourceUnit": 254,
							"src": "455:66:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 264,
										"name": "Initializable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 253,
										"src": "463:13:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 267,
										"name": "Initializable",
										"nameLocations": [
											"1614:13:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 253,
										"src": "1614:13:1"
									},
									"id": 268,
									"nodeType": "InheritanceSpecifier",
									"src": "1614:13:1"
								},
								{
									"baseName": {
										"id": 269,
										"name": "ContextUpgradeable",
										"nameLocations": [
											"1629:18:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 916,
										"src": "1629:18:1"
									},
									"id": 270,
									"nodeType": "InheritanceSpecifier",
									"src": "1629:18:1"
								},
								{
									"baseName": {
										"id": 271,
										"name": "IERC20",
										"nameLocations": [
											"1649:6:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1900,
										"src": "1649:6:1"
									},
									"id": 272,
									"nodeType": "InheritanceSpecifier",
									"src": "1649:6:1"
								},
								{
									"baseName": {
										"id": 273,
										"name": "IERC20Metadata",
										"nameLocations": [
											"1657:14:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1926,
										"src": "1657:14:1"
									},
									"id": 274,
									"nodeType": "InheritanceSpecifier",
									"src": "1657:14:1"
								},
								{
									"baseName": {
										"id": 275,
										"name": "IERC20Errors",
										"nameLocations": [
											"1673:12:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 958,
										"src": "1673:12:1"
									},
									"id": 276,
									"nodeType": "InheritanceSpecifier",
									"src": "1673:12:1"
								}
							],
							"canonicalName": "ERC20Upgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 266,
								"nodeType": "StructuredDocumentation",
								"src": "523:1052:1",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification."
							},
							"fullyImplemented": true,
							"id": 870,
							"linearizedBaseContracts": [
								870,
								958,
								1926,
								1900,
								916,
								253
							],
							"name": "ERC20Upgradeable",
							"nameLocation": "1594:16:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "ERC20Upgradeable.ERC20Storage",
									"documentation": {
										"id": 277,
										"nodeType": "StructuredDocumentation",
										"src": "1692:63:1",
										"text": "@custom:storage-location erc7201:openzeppelin.storage.ERC20"
									},
									"id": 294,
									"members": [
										{
											"constant": false,
											"id": 281,
											"mutability": "mutable",
											"name": "_balances",
											"nameLocation": "1826:9:1",
											"nodeType": "VariableDeclaration",
											"scope": 294,
											"src": "1790:45:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"typeName": {
												"id": 280,
												"keyName": "account",
												"keyNameLocation": "1806:7:1",
												"keyType": {
													"id": 278,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1798:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "Mapping",
												"src": "1790:35:1",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
													"typeString": "mapping(address => uint256)"
												},
												"valueName": "",
												"valueNameLocation": "-1:-1:-1",
												"valueType": {
													"id": 279,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1817:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 287,
											"mutability": "mutable",
											"name": "_allowances",
											"nameLocation": "1910:11:1",
											"nodeType": "VariableDeclaration",
											"scope": 294,
											"src": "1846:75:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
												"typeString": "mapping(address => mapping(address => uint256))"
											},
											"typeName": {
												"id": 286,
												"keyName": "account",
												"keyNameLocation": "1862:7:1",
												"keyType": {
													"id": 282,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1854:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "Mapping",
												"src": "1846:63:1",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
													"typeString": "mapping(address => mapping(address => uint256))"
												},
												"valueName": "",
												"valueNameLocation": "-1:-1:-1",
												"valueType": {
													"id": 285,
													"keyName": "spender",
													"keyNameLocation": "1889:7:1",
													"keyType": {
														"id": 283,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "1881:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Mapping",
													"src": "1873:35:1",
													"typeDescriptions": {
														"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
														"typeString": "mapping(address => uint256)"
													},
													"valueName": "",
													"valueNameLocation": "-1:-1:-1",
													"valueType": {
														"id": 284,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "1900:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													}
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 289,
											"mutability": "mutable",
											"name": "_totalSupply",
											"nameLocation": "1940:12:1",
											"nodeType": "VariableDeclaration",
											"scope": 294,
											"src": "1932:20:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 288,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1932:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 291,
											"mutability": "mutable",
											"name": "_name",
											"nameLocation": "1970:5:1",
											"nodeType": "VariableDeclaration",
											"scope": 294,
											"src": "1963:12:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 290,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "1963:6:1",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 293,
											"mutability": "mutable",
											"name": "_symbol",
											"nameLocation": "1992:7:1",
											"nodeType": "VariableDeclaration",
											"scope": 294,
											"src": "1985:14:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 292,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "1985:6:1",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ERC20Storage",
									"nameLocation": "1767:12:1",
									"nodeType": "StructDefinition",
									"scope": 870,
									"src": "1760:246:1",
									"visibility": "public"
								},
								{
									"constant": true,
									"id": 297,
									"mutability": "constant",
									"name": "ERC20StorageLocation",
									"nameLocation": "2146:20:1",
									"nodeType": "VariableDeclaration",
									"scope": 870,
									"src": "2121:114:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 295,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2121:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307835326336333234376531663437646231396435636530343630303330633439376630363763613463656266373162613938656561646162653230626163653030",
										"id": 296,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2169:66:1",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_37439836327923360225337895871394760624280537466773280374265222508165906222592_by_1",
											"typeString": "int_const 3743...(69 digits omitted)...2592"
										},
										"value": "0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00"
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 304,
										"nodeType": "Block",
										"src": "2316:79:1",
										"statements": [
											{
												"AST": {
													"nativeSrc": "2335:54:1",
													"nodeType": "YulBlock",
													"src": "2335:54:1",
													"statements": [
														{
															"nativeSrc": "2349:30:1",
															"nodeType": "YulAssignment",
															"src": "2349:30:1",
															"value": {
																"name": "ERC20StorageLocation",
																"nativeSrc": "2359:20:1",
																"nodeType": "YulIdentifier",
																"src": "2359:20:1"
															},
															"variableNames": [
																{
																	"name": "$.slot",
																	"nativeSrc": "2349:6:1",
																	"nodeType": "YulIdentifier",
																	"src": "2349:6:1"
																}
															]
														}
													]
												},
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 301,
														"isOffset": false,
														"isSlot": true,
														"src": "2349:6:1",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 297,
														"isOffset": false,
														"isSlot": false,
														"src": "2359:20:1",
														"valueSize": 1
													}
												],
												"id": 303,
												"nodeType": "InlineAssembly",
												"src": "2326:63:1"
											}
										]
									},
									"id": 305,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getERC20Storage",
									"nameLocation": "2251:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 298,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2267:2:1"
									},
									"returnParameters": {
										"id": 302,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 301,
												"mutability": "mutable",
												"name": "$",
												"nameLocation": "2313:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "2292:22:1",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ERC20Storage_$294_storage_ptr",
													"typeString": "struct ERC20Upgradeable.ERC20Storage"
												},
												"typeName": {
													"id": 300,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 299,
														"name": "ERC20Storage",
														"nameLocations": [
															"2292:12:1"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 294,
														"src": "2292:12:1"
													},
													"referencedDeclaration": 294,
													"src": "2292:12:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC20Storage_$294_storage_ptr",
														"typeString": "struct ERC20Upgradeable.ERC20Storage"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2291:24:1"
									},
									"scope": 870,
									"src": "2242:153:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 320,
										"nodeType": "Block",
										"src": "2669:55:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 316,
															"name": "name_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 308,
															"src": "2702:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"id": 317,
															"name": "symbol_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 310,
															"src": "2709:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 315,
														"name": "__ERC20_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 349,
														"src": "2679:22:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (string memory,string memory)"
														}
													},
													"id": 318,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2679:38:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 319,
												"nodeType": "ExpressionStatement",
												"src": "2679:38:1"
											}
										]
									},
									"documentation": {
										"id": 306,
										"nodeType": "StructuredDocumentation",
										"src": "2401:171:1",
										"text": " @dev Sets the values for {name} and {symbol}.\n All two of these values are immutable: they can only be set once during\n construction."
									},
									"id": 321,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 313,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 312,
												"name": "onlyInitializing",
												"nameLocations": [
													"2652:16:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 162,
												"src": "2652:16:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "2652:16:1"
										}
									],
									"name": "__ERC20_init",
									"nameLocation": "2586:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 311,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 308,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "2613:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 321,
												"src": "2599:19:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 307,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2599:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 310,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "2634:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 321,
												"src": "2620:21:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 309,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2620:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2598:44:1"
									},
									"returnParameters": {
										"id": 314,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2669:0:1"
									},
									"scope": 870,
									"src": "2577:147:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 348,
										"nodeType": "Block",
										"src": "2832:114:1",
										"statements": [
											{
												"assignments": [
													332
												],
												"declarations": [
													{
														"constant": false,
														"id": 332,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "2863:1:1",
														"nodeType": "VariableDeclaration",
														"scope": 348,
														"src": "2842:22:1",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC20Storage_$294_storage_ptr",
															"typeString": "struct ERC20Upgradeable.ERC20Storage"
														},
														"typeName": {
															"id": 331,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 330,
																"name": "ERC20Storage",
																"nameLocations": [
																	"2842:12:1"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 294,
																"src": "2842:12:1"
															},
															"referencedDeclaration": 294,
															"src": "2842:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC20Storage_$294_storage_ptr",
																"typeString": "struct ERC20Upgradeable.ERC20Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 335,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 333,
														"name": "_getERC20Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 305,
														"src": "2867:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_ERC20Storage_$294_storage_ptr_$",
															"typeString": "function () pure returns (struct ERC20Upgradeable.ERC20Storage storage pointer)"
														}
													},
													"id": 334,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2867:18:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC20Storage_$294_storage_ptr",
														"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2842:43:1"
											},
											{
												"expression": {
													"id": 340,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 336,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 332,
															"src": "2895:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC20Storage_$294_storage_ptr",
																"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
															}
														},
														"id": 338,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "2897:5:1",
														"memberName": "_name",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 291,
														"src": "2895:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 339,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 323,
														"src": "2905:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2895:15:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 341,
												"nodeType": "ExpressionStatement",
												"src": "2895:15:1"
											},
											{
												"expression": {
													"id": 346,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 342,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 332,
															"src": "2920:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC20Storage_$294_storage_ptr",
																"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
															}
														},
														"id": 344,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "2922:7:1",
														"memberName": "_symbol",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 293,
														"src": "2920:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 345,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 325,
														"src": "2932:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2920:19:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 347,
												"nodeType": "ExpressionStatement",
												"src": "2920:19:1"
											}
										]
									},
									"id": 349,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 328,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 327,
												"name": "onlyInitializing",
												"nameLocations": [
													"2815:16:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 162,
												"src": "2815:16:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "2815:16:1"
										}
									],
									"name": "__ERC20_init_unchained",
									"nameLocation": "2739:22:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 326,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 323,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "2776:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 349,
												"src": "2762:19:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 322,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2762:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 325,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "2797:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 349,
												"src": "2783:21:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 324,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2783:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2761:44:1"
									},
									"returnParameters": {
										"id": 329,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2832:0:1"
									},
									"scope": 870,
									"src": "2730:216:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1913
									],
									"body": {
										"id": 364,
										"nodeType": "Block",
										"src": "3071:84:1",
										"statements": [
											{
												"assignments": [
													357
												],
												"declarations": [
													{
														"constant": false,
														"id": 357,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "3102:1:1",
														"nodeType": "VariableDeclaration",
														"scope": 364,
														"src": "3081:22:1",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC20Storage_$294_storage_ptr",
															"typeString": "struct ERC20Upgradeable.ERC20Storage"
														},
														"typeName": {
															"id": 356,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 355,
																"name": "ERC20Storage",
																"nameLocations": [
																	"3081:12:1"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 294,
																"src": "3081:12:1"
															},
															"referencedDeclaration": 294,
															"src": "3081:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC20Storage_$294_storage_ptr",
																"typeString": "struct ERC20Upgradeable.ERC20Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 360,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 358,
														"name": "_getERC20Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 305,
														"src": "3106:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_ERC20Storage_$294_storage_ptr_$",
															"typeString": "function () pure returns (struct ERC20Upgradeable.ERC20Storage storage pointer)"
														}
													},
													"id": 359,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3106:18:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC20Storage_$294_storage_ptr",
														"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3081:43:1"
											},
											{
												"expression": {
													"expression": {
														"id": 361,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 357,
														"src": "3141:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC20Storage_$294_storage_ptr",
															"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
														}
													},
													"id": 362,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "3143:5:1",
													"memberName": "_name",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 291,
													"src": "3141:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 354,
												"id": 363,
												"nodeType": "Return",
												"src": "3134:14:1"
											}
										]
									},
									"documentation": {
										"id": 350,
										"nodeType": "StructuredDocumentation",
										"src": "2952:54:1",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 365,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "3020:4:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 351,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3024:2:1"
									},
									"returnParameters": {
										"id": 354,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 353,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 365,
												"src": "3056:13:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 352,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3056:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3055:15:1"
									},
									"scope": 870,
									"src": "3011:144:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1919
									],
									"body": {
										"id": 380,
										"nodeType": "Block",
										"src": "3330:86:1",
										"statements": [
											{
												"assignments": [
													373
												],
												"declarations": [
													{
														"constant": false,
														"id": 373,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "3361:1:1",
														"nodeType": "VariableDeclaration",
														"scope": 380,
														"src": "3340:22:1",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC20Storage_$294_storage_ptr",
															"typeString": "struct ERC20Upgradeable.ERC20Storage"
														},
														"typeName": {
															"id": 372,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 371,
																"name": "ERC20Storage",
																"nameLocations": [
																	"3340:12:1"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 294,
																"src": "3340:12:1"
															},
															"referencedDeclaration": 294,
															"src": "3340:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC20Storage_$294_storage_ptr",
																"typeString": "struct ERC20Upgradeable.ERC20Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 376,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 374,
														"name": "_getERC20Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 305,
														"src": "3365:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_ERC20Storage_$294_storage_ptr_$",
															"typeString": "function () pure returns (struct ERC20Upgradeable.ERC20Storage storage pointer)"
														}
													},
													"id": 375,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3365:18:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC20Storage_$294_storage_ptr",
														"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3340:43:1"
											},
											{
												"expression": {
													"expression": {
														"id": 377,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 373,
														"src": "3400:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC20Storage_$294_storage_ptr",
															"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
														}
													},
													"id": 378,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "3402:7:1",
													"memberName": "_symbol",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 293,
													"src": "3400:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 370,
												"id": 379,
												"nodeType": "Return",
												"src": "3393:16:1"
											}
										]
									},
									"documentation": {
										"id": 366,
										"nodeType": "StructuredDocumentation",
										"src": "3161:102:1",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 381,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "3277:6:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 367,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3283:2:1"
									},
									"returnParameters": {
										"id": 370,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 369,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 381,
												"src": "3315:13:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 368,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3315:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3314:15:1"
									},
									"scope": 870,
									"src": "3268:148:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1925
									],
									"body": {
										"id": 389,
										"nodeType": "Block",
										"src": "4105:26:1",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 387,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4122:2:1",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 386,
												"id": 388,
												"nodeType": "Return",
												"src": "4115:9:1"
											}
										]
									},
									"documentation": {
										"id": 382,
										"nodeType": "StructuredDocumentation",
										"src": "3422:622:1",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 390,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "4058:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 383,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4066:2:1"
									},
									"returnParameters": {
										"id": 386,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 385,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 390,
												"src": "4098:5:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 384,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4098:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4097:7:1"
									},
									"scope": 870,
									"src": "4049:82:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1849
									],
									"body": {
										"id": 405,
										"nodeType": "Block",
										"src": "4252:91:1",
										"statements": [
											{
												"assignments": [
													398
												],
												"declarations": [
													{
														"constant": false,
														"id": 398,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "4283:1:1",
														"nodeType": "VariableDeclaration",
														"scope": 405,
														"src": "4262:22:1",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC20Storage_$294_storage_ptr",
															"typeString": "struct ERC20Upgradeable.ERC20Storage"
														},
														"typeName": {
															"id": 397,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 396,
																"name": "ERC20Storage",
																"nameLocations": [
																	"4262:12:1"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 294,
																"src": "4262:12:1"
															},
															"referencedDeclaration": 294,
															"src": "4262:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC20Storage_$294_storage_ptr",
																"typeString": "struct ERC20Upgradeable.ERC20Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 401,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 399,
														"name": "_getERC20Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 305,
														"src": "4287:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_ERC20Storage_$294_storage_ptr_$",
															"typeString": "function () pure returns (struct ERC20Upgradeable.ERC20Storage storage pointer)"
														}
													},
													"id": 400,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4287:18:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC20Storage_$294_storage_ptr",
														"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4262:43:1"
											},
											{
												"expression": {
													"expression": {
														"id": 402,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 398,
														"src": "4322:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC20Storage_$294_storage_ptr",
															"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
														}
													},
													"id": 403,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "4324:12:1",
													"memberName": "_totalSupply",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 289,
													"src": "4322:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 395,
												"id": 404,
												"nodeType": "Return",
												"src": "4315:21:1"
											}
										]
									},
									"documentation": {
										"id": 391,
										"nodeType": "StructuredDocumentation",
										"src": "4137:49:1",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 406,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "4200:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 392,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4211:2:1"
									},
									"returnParameters": {
										"id": 395,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 394,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 406,
												"src": "4243:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 393,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4243:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4242:9:1"
									},
									"scope": 870,
									"src": "4191:152:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1857
									],
									"body": {
										"id": 425,
										"nodeType": "Block",
										"src": "4475:97:1",
										"statements": [
											{
												"assignments": [
													416
												],
												"declarations": [
													{
														"constant": false,
														"id": 416,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "4506:1:1",
														"nodeType": "VariableDeclaration",
														"scope": 425,
														"src": "4485:22:1",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC20Storage_$294_storage_ptr",
															"typeString": "struct ERC20Upgradeable.ERC20Storage"
														},
														"typeName": {
															"id": 415,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 414,
																"name": "ERC20Storage",
																"nameLocations": [
																	"4485:12:1"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 294,
																"src": "4485:12:1"
															},
															"referencedDeclaration": 294,
															"src": "4485:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC20Storage_$294_storage_ptr",
																"typeString": "struct ERC20Upgradeable.ERC20Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 419,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 417,
														"name": "_getERC20Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 305,
														"src": "4510:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_ERC20Storage_$294_storage_ptr_$",
															"typeString": "function () pure returns (struct ERC20Upgradeable.ERC20Storage storage pointer)"
														}
													},
													"id": 418,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4510:18:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC20Storage_$294_storage_ptr",
														"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4485:43:1"
											},
											{
												"expression": {
													"baseExpression": {
														"expression": {
															"id": 420,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 416,
															"src": "4545:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC20Storage_$294_storage_ptr",
																"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
															}
														},
														"id": 421,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4547:9:1",
														"memberName": "_balances",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 281,
														"src": "4545:11:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 423,
													"indexExpression": {
														"id": 422,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 409,
														"src": "4557:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4545:20:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 413,
												"id": 424,
												"nodeType": "Return",
												"src": "4538:27:1"
											}
										]
									},
									"documentation": {
										"id": 407,
										"nodeType": "StructuredDocumentation",
										"src": "4349:47:1",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 426,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "4410:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 410,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 409,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "4428:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 426,
												"src": "4420:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 408,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4420:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4419:17:1"
									},
									"returnParameters": {
										"id": 413,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 412,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 426,
												"src": "4466:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 411,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4466:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4465:9:1"
									},
									"scope": 870,
									"src": "4401:171:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1867
									],
									"body": {
										"id": 449,
										"nodeType": "Block",
										"src": "4842:103:1",
										"statements": [
											{
												"assignments": [
													437
												],
												"declarations": [
													{
														"constant": false,
														"id": 437,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4860:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 449,
														"src": "4852:13:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 436,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4852:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 440,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 438,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 898,
														"src": "4868:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 439,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4868:12:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4852:28:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 442,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 437,
															"src": "4900:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 443,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 429,
															"src": "4907:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 444,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 431,
															"src": "4911:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 441,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 577,
														"src": "4890:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 445,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4890:27:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 446,
												"nodeType": "ExpressionStatement",
												"src": "4890:27:1"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 447,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4934:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 435,
												"id": 448,
												"nodeType": "Return",
												"src": "4927:11:1"
											}
										]
									},
									"documentation": {
										"id": 427,
										"nodeType": "StructuredDocumentation",
										"src": "4578:184:1",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `value`."
									},
									"functionSelector": "a9059cbb",
									"id": 450,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "4776:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 432,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 429,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4793:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 450,
												"src": "4785:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 428,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4785:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 431,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4805:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 450,
												"src": "4797:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 430,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4797:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4784:27:1"
									},
									"returnParameters": {
										"id": 435,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 434,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 450,
												"src": "4836:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 433,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4836:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4835:6:1"
									},
									"scope": 870,
									"src": "4767:178:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1877
									],
									"body": {
										"id": 473,
										"nodeType": "Block",
										"src": "5092:106:1",
										"statements": [
											{
												"assignments": [
													462
												],
												"declarations": [
													{
														"constant": false,
														"id": 462,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "5123:1:1",
														"nodeType": "VariableDeclaration",
														"scope": 473,
														"src": "5102:22:1",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC20Storage_$294_storage_ptr",
															"typeString": "struct ERC20Upgradeable.ERC20Storage"
														},
														"typeName": {
															"id": 461,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 460,
																"name": "ERC20Storage",
																"nameLocations": [
																	"5102:12:1"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 294,
																"src": "5102:12:1"
															},
															"referencedDeclaration": 294,
															"src": "5102:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC20Storage_$294_storage_ptr",
																"typeString": "struct ERC20Upgradeable.ERC20Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 465,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 463,
														"name": "_getERC20Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 305,
														"src": "5127:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_ERC20Storage_$294_storage_ptr_$",
															"typeString": "function () pure returns (struct ERC20Upgradeable.ERC20Storage storage pointer)"
														}
													},
													"id": 464,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5127:18:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC20Storage_$294_storage_ptr",
														"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5102:43:1"
											},
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"expression": {
																"id": 466,
																"name": "$",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 462,
																"src": "5162:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_ERC20Storage_$294_storage_ptr",
																	"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
																}
															},
															"id": 467,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5164:11:1",
															"memberName": "_allowances",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 287,
															"src": "5162:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 469,
														"indexExpression": {
															"id": 468,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 453,
															"src": "5176:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "5162:20:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 471,
													"indexExpression": {
														"id": 470,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 455,
														"src": "5183:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "5162:29:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 459,
												"id": 472,
												"nodeType": "Return",
												"src": "5155:36:1"
											}
										]
									},
									"documentation": {
										"id": 451,
										"nodeType": "StructuredDocumentation",
										"src": "4951:47:1",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 474,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "5012:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 456,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 453,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5030:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 474,
												"src": "5022:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 452,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5022:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 455,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "5045:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 474,
												"src": "5037:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 454,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5037:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5021:32:1"
									},
									"returnParameters": {
										"id": 459,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 458,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 474,
												"src": "5083:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 457,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5083:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5082:9:1"
									},
									"scope": 870,
									"src": "5003:195:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1887
									],
									"body": {
										"id": 497,
										"nodeType": "Block",
										"src": "5584:107:1",
										"statements": [
											{
												"assignments": [
													485
												],
												"declarations": [
													{
														"constant": false,
														"id": 485,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "5602:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 497,
														"src": "5594:13:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 484,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5594:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 488,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 486,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 898,
														"src": "5610:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 487,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5610:12:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5594:28:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 490,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 485,
															"src": "5641:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 491,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 477,
															"src": "5648:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 492,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 479,
															"src": "5657:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 489,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															753,
															821
														],
														"referencedDeclaration": 753,
														"src": "5632:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 493,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5632:31:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 494,
												"nodeType": "ExpressionStatement",
												"src": "5632:31:1"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 495,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5680:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 483,
												"id": 496,
												"nodeType": "Return",
												"src": "5673:11:1"
											}
										]
									},
									"documentation": {
										"id": 475,
										"nodeType": "StructuredDocumentation",
										"src": "5204:296:1",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 498,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "5514:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 480,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 477,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "5530:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 498,
												"src": "5522:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 476,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5522:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 479,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5547:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 498,
												"src": "5539:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 478,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5539:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5521:32:1"
									},
									"returnParameters": {
										"id": 483,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 482,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 498,
												"src": "5578:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 481,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5578:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5577:6:1"
									},
									"scope": 870,
									"src": "5505:186:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1899
									],
									"body": {
										"id": 529,
										"nodeType": "Block",
										"src": "6344:151:1",
										"statements": [
											{
												"assignments": [
													511
												],
												"declarations": [
													{
														"constant": false,
														"id": 511,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "6362:7:1",
														"nodeType": "VariableDeclaration",
														"scope": 529,
														"src": "6354:15:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 510,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6354:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 514,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 512,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 898,
														"src": "6372:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 513,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6372:12:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6354:30:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 516,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 501,
															"src": "6410:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 517,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 511,
															"src": "6416:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 518,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 505,
															"src": "6425:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 515,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 869,
														"src": "6394:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 519,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6394:37:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 520,
												"nodeType": "ExpressionStatement",
												"src": "6394:37:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 522,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 501,
															"src": "6451:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 523,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 503,
															"src": "6457:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 524,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 505,
															"src": "6461:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 521,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 577,
														"src": "6441:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 525,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6441:26:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 526,
												"nodeType": "ExpressionStatement",
												"src": "6441:26:1"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 527,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "6484:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 509,
												"id": 528,
												"nodeType": "Return",
												"src": "6477:11:1"
											}
										]
									},
									"documentation": {
										"id": 499,
										"nodeType": "StructuredDocumentation",
										"src": "5697:549:1",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `value`.\n - the caller must have allowance for ``from``'s tokens of at least\n `value`."
									},
									"functionSelector": "23b872dd",
									"id": 530,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "6260:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 506,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 501,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6281:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 530,
												"src": "6273:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 500,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6273:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 503,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6295:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 530,
												"src": "6287:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 502,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6287:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 505,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6307:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 530,
												"src": "6299:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 504,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6299:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6272:41:1"
									},
									"returnParameters": {
										"id": 509,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 508,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 530,
												"src": "6338:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 507,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6338:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6337:6:1"
									},
									"scope": 870,
									"src": "6251:244:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 576,
										"nodeType": "Block",
										"src": "6937:231:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 545,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 540,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 533,
														"src": "6951:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 543,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6967:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 542,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6959:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 541,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6959:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 544,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6959:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6951:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 554,
												"nodeType": "IfStatement",
												"src": "6947:86:1",
												"trueBody": {
													"id": 553,
													"nodeType": "Block",
													"src": "6971:62:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 549,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "7019:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 548,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "7011:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 547,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "7011:7:1",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 550,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7011:10:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 546,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 933,
																	"src": "6992:18:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 551,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6992:30:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 552,
															"nodeType": "RevertStatement",
															"src": "6985:37:1"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 560,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 555,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 535,
														"src": "7046:2:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 558,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7060:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 557,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7052:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 556,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "7052:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 559,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7052:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "7046:16:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 569,
												"nodeType": "IfStatement",
												"src": "7042:86:1",
												"trueBody": {
													"id": 568,
													"nodeType": "Block",
													"src": "7064:64:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 564,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "7114:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 563,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "7106:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 562,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "7106:7:1",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 565,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7106:10:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 561,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 938,
																	"src": "7085:20:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 566,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7085:32:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 567,
															"nodeType": "RevertStatement",
															"src": "7078:39:1"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 571,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 533,
															"src": "7145:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 572,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 535,
															"src": "7151:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 573,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 537,
															"src": "7155:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 570,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 669,
														"src": "7137:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 574,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7137:24:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 575,
												"nodeType": "ExpressionStatement",
												"src": "7137:24:1"
											}
										]
									},
									"documentation": {
										"id": 531,
										"nodeType": "StructuredDocumentation",
										"src": "6501:362:1",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 577,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "6877:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 538,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 533,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6895:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 577,
												"src": "6887:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 532,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6887:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 535,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6909:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 577,
												"src": "6901:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 534,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6901:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 537,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6921:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 577,
												"src": "6913:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 536,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6913:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6886:41:1"
									},
									"returnParameters": {
										"id": 539,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6937:0:1"
									},
									"scope": 870,
									"src": "6868:300:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 668,
										"nodeType": "Block",
										"src": "7558:1095:1",
										"statements": [
											{
												"assignments": [
													589
												],
												"declarations": [
													{
														"constant": false,
														"id": 589,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "7589:1:1",
														"nodeType": "VariableDeclaration",
														"scope": 668,
														"src": "7568:22:1",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC20Storage_$294_storage_ptr",
															"typeString": "struct ERC20Upgradeable.ERC20Storage"
														},
														"typeName": {
															"id": 588,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 587,
																"name": "ERC20Storage",
																"nameLocations": [
																	"7568:12:1"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 294,
																"src": "7568:12:1"
															},
															"referencedDeclaration": 294,
															"src": "7568:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC20Storage_$294_storage_ptr",
																"typeString": "struct ERC20Upgradeable.ERC20Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 592,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 590,
														"name": "_getERC20Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 305,
														"src": "7593:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_ERC20Storage_$294_storage_ptr_$",
															"typeString": "function () pure returns (struct ERC20Upgradeable.ERC20Storage storage pointer)"
														}
													},
													"id": 591,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7593:18:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC20Storage_$294_storage_ptr",
														"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7568:43:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 598,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 593,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 580,
														"src": "7625:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 596,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7641:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 595,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7633:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 594,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "7633:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 597,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7633:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "7625:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 635,
													"nodeType": "Block",
													"src": "7801:366:1",
													"statements": [
														{
															"assignments": [
																607
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 607,
																	"mutability": "mutable",
																	"name": "fromBalance",
																	"nameLocation": "7823:11:1",
																	"nodeType": "VariableDeclaration",
																	"scope": 635,
																	"src": "7815:19:1",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 606,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "7815:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 612,
															"initialValue": {
																"baseExpression": {
																	"expression": {
																		"id": 608,
																		"name": "$",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 589,
																		"src": "7837:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_ERC20Storage_$294_storage_ptr",
																			"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
																		}
																	},
																	"id": 609,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "7839:9:1",
																	"memberName": "_balances",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 281,
																	"src": "7837:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 611,
																"indexExpression": {
																	"id": 610,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 580,
																	"src": "7849:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "7837:17:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "7815:39:1"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 615,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 613,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 607,
																	"src": "7872:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 614,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 584,
																	"src": "7886:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7872:19:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 623,
															"nodeType": "IfStatement",
															"src": "7868:115:1",
															"trueBody": {
																"id": 622,
																"nodeType": "Block",
																"src": "7893:90:1",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 617,
																					"name": "from",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 580,
																					"src": "7943:4:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 618,
																					"name": "fromBalance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 607,
																					"src": "7949:11:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 619,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 584,
																					"src": "7962:5:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 616,
																				"name": "ERC20InsufficientBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 928,
																				"src": "7918:24:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
																					"typeString": "function (address,uint256,uint256) pure"
																				}
																			},
																			"id": 620,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7918:50:1",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 621,
																		"nodeType": "RevertStatement",
																		"src": "7911:57:1"
																	}
																]
															}
														},
														{
															"id": 634,
															"nodeType": "UncheckedBlock",
															"src": "7996:161:1",
															"statements": [
																{
																	"expression": {
																		"id": 632,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"expression": {
																					"id": 624,
																					"name": "$",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 589,
																					"src": "8103:1:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_ERC20Storage_$294_storage_ptr",
																						"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
																					}
																				},
																				"id": 627,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "8105:9:1",
																				"memberName": "_balances",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 281,
																				"src": "8103:11:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 628,
																			"indexExpression": {
																				"id": 626,
																				"name": "from",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 580,
																				"src": "8115:4:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "8103:17:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 631,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 629,
																				"name": "fromBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 607,
																				"src": "8123:11:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 630,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 584,
																				"src": "8137:5:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "8123:19:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "8103:39:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 633,
																	"nodeType": "ExpressionStatement",
																	"src": "8103:39:1"
																}
															]
														}
													]
												},
												"id": 636,
												"nodeType": "IfStatement",
												"src": "7621:546:1",
												"trueBody": {
													"id": 605,
													"nodeType": "Block",
													"src": "7645:150:1",
													"statements": [
														{
															"expression": {
																"id": 603,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 599,
																		"name": "$",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 589,
																		"src": "7761:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_ERC20Storage_$294_storage_ptr",
																			"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
																		}
																	},
																	"id": 601,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "7763:12:1",
																	"memberName": "_totalSupply",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 289,
																	"src": "7761:14:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"id": 602,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 584,
																	"src": "7779:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7761:23:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 604,
															"nodeType": "ExpressionStatement",
															"src": "7761:23:1"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 642,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 637,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 582,
														"src": "8181:2:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 640,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8195:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 639,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "8187:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 638,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "8187:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 641,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8187:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "8181:16:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 660,
													"nodeType": "Block",
													"src": "8398:208:1",
													"statements": [
														{
															"id": 659,
															"nodeType": "UncheckedBlock",
															"src": "8412:184:1",
															"statements": [
																{
																	"expression": {
																		"id": 657,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"expression": {
																					"id": 651,
																					"name": "$",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 589,
																					"src": "8557:1:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_ERC20Storage_$294_storage_ptr",
																						"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
																					}
																				},
																				"id": 654,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "8559:9:1",
																				"memberName": "_balances",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 281,
																				"src": "8557:11:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 655,
																			"indexExpression": {
																				"id": 653,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 582,
																				"src": "8569:2:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "8557:15:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"id": 656,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 584,
																			"src": "8576:5:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "8557:24:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 658,
																	"nodeType": "ExpressionStatement",
																	"src": "8557:24:1"
																}
															]
														}
													]
												},
												"id": 661,
												"nodeType": "IfStatement",
												"src": "8177:429:1",
												"trueBody": {
													"id": 650,
													"nodeType": "Block",
													"src": "8199:193:1",
													"statements": [
														{
															"id": 649,
															"nodeType": "UncheckedBlock",
															"src": "8213:169:1",
															"statements": [
																{
																	"expression": {
																		"id": 647,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"expression": {
																				"id": 643,
																				"name": "$",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 589,
																				"src": "8344:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_ERC20Storage_$294_storage_ptr",
																					"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
																				}
																			},
																			"id": 645,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"memberLocation": "8346:12:1",
																			"memberName": "_totalSupply",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 289,
																			"src": "8344:14:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "-=",
																		"rightHandSide": {
																			"id": 646,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 584,
																			"src": "8362:5:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "8344:23:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 648,
																	"nodeType": "ExpressionStatement",
																	"src": "8344:23:1"
																}
															]
														}
													]
												}
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 663,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 580,
															"src": "8630:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 664,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 582,
															"src": "8636:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 665,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 584,
															"src": "8640:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 662,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1834,
														"src": "8621:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 666,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8621:25:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 667,
												"nodeType": "EmitStatement",
												"src": "8616:30:1"
											}
										]
									},
									"documentation": {
										"id": 578,
										"nodeType": "StructuredDocumentation",
										"src": "7174:304:1",
										"text": " @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n this function.\n Emits a {Transfer} event."
									},
									"id": 669,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_update",
									"nameLocation": "7492:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 585,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 580,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "7508:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 669,
												"src": "7500:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 579,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7500:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 582,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "7522:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 669,
												"src": "7514:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 581,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7514:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 584,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "7534:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 669,
												"src": "7526:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 583,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7526:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7499:41:1"
									},
									"returnParameters": {
										"id": 586,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7558:0:1"
									},
									"scope": 870,
									"src": "7483:1170:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 701,
										"nodeType": "Block",
										"src": "9052:152:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 682,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 677,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 672,
														"src": "9066:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 680,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9085:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 679,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "9077:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 678,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "9077:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 681,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9077:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "9066:21:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 691,
												"nodeType": "IfStatement",
												"src": "9062:91:1",
												"trueBody": {
													"id": 690,
													"nodeType": "Block",
													"src": "9089:64:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 686,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "9139:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 685,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "9131:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 684,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "9131:7:1",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 687,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "9131:10:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 683,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 938,
																	"src": "9110:20:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 688,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9110:32:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 689,
															"nodeType": "RevertStatement",
															"src": "9103:39:1"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 695,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9178:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 694,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9170:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 693,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9170:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 696,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9170:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 697,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 672,
															"src": "9182:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 698,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 674,
															"src": "9191:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 692,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 669,
														"src": "9162:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 699,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9162:35:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 700,
												"nodeType": "ExpressionStatement",
												"src": "9162:35:1"
											}
										]
									},
									"documentation": {
										"id": 670,
										"nodeType": "StructuredDocumentation",
										"src": "8659:332:1",
										"text": " @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n Relies on the `_update` mechanism\n Emits a {Transfer} event with `from` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 702,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "9005:5:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 675,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 672,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "9019:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 702,
												"src": "9011:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 671,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9011:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 674,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9036:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 702,
												"src": "9028:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 673,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9028:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9010:32:1"
									},
									"returnParameters": {
										"id": 676,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9052:0:1"
									},
									"scope": 870,
									"src": "8996:208:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 734,
										"nodeType": "Block",
										"src": "9578:150:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 715,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 710,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 705,
														"src": "9592:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 713,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9611:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 712,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "9603:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 711,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "9603:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 714,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9603:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "9592:21:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 724,
												"nodeType": "IfStatement",
												"src": "9588:89:1",
												"trueBody": {
													"id": 723,
													"nodeType": "Block",
													"src": "9615:62:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 719,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "9663:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 718,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "9655:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 717,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "9655:7:1",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 720,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "9655:10:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 716,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 933,
																	"src": "9636:18:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 721,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9636:30:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 722,
															"nodeType": "RevertStatement",
															"src": "9629:37:1"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 726,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 705,
															"src": "9694:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 729,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9711:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 728,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9703:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 727,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9703:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 730,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9703:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 731,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 707,
															"src": "9715:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 725,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 669,
														"src": "9686:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 732,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9686:35:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 733,
												"nodeType": "ExpressionStatement",
												"src": "9686:35:1"
											}
										]
									},
									"documentation": {
										"id": 703,
										"nodeType": "StructuredDocumentation",
										"src": "9210:307:1",
										"text": " @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n Relies on the `_update` mechanism.\n Emits a {Transfer} event with `to` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead"
									},
									"id": 735,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "9531:5:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 708,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 705,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "9545:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 735,
												"src": "9537:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 704,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9537:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 707,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9562:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 735,
												"src": "9554:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 706,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9554:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9536:32:1"
									},
									"returnParameters": {
										"id": 709,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9578:0:1"
									},
									"scope": 870,
									"src": "9522:206:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 752,
										"nodeType": "Block",
										"src": "10338:54:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 746,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 738,
															"src": "10357:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 747,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 740,
															"src": "10364:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 748,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 742,
															"src": "10373:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "74727565",
															"id": 749,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10380:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 745,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															753,
															821
														],
														"referencedDeclaration": 821,
														"src": "10348:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
															"typeString": "function (address,address,uint256,bool)"
														}
													},
													"id": 750,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10348:37:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 751,
												"nodeType": "ExpressionStatement",
												"src": "10348:37:1"
											}
										]
									},
									"documentation": {
										"id": 736,
										"nodeType": "StructuredDocumentation",
										"src": "9734:525:1",
										"text": " @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."
									},
									"id": 753,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "10273:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 743,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 738,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10290:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 753,
												"src": "10282:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 737,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10282:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 740,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10305:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 753,
												"src": "10297:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 739,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10297:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 742,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10322:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 753,
												"src": "10314:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 741,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10314:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10281:47:1"
									},
									"returnParameters": {
										"id": 744,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10338:0:1"
									},
									"scope": 870,
									"src": "10264:128:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 820,
										"nodeType": "Block",
										"src": "11322:389:1",
										"statements": [
											{
												"assignments": [
													767
												],
												"declarations": [
													{
														"constant": false,
														"id": 767,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "11353:1:1",
														"nodeType": "VariableDeclaration",
														"scope": 820,
														"src": "11332:22:1",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC20Storage_$294_storage_ptr",
															"typeString": "struct ERC20Upgradeable.ERC20Storage"
														},
														"typeName": {
															"id": 766,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 765,
																"name": "ERC20Storage",
																"nameLocations": [
																	"11332:12:1"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 294,
																"src": "11332:12:1"
															},
															"referencedDeclaration": 294,
															"src": "11332:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC20Storage_$294_storage_ptr",
																"typeString": "struct ERC20Upgradeable.ERC20Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 770,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 768,
														"name": "_getERC20Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 305,
														"src": "11357:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_ERC20Storage_$294_storage_ptr_$",
															"typeString": "function () pure returns (struct ERC20Upgradeable.ERC20Storage storage pointer)"
														}
													},
													"id": 769,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11357:18:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC20Storage_$294_storage_ptr",
														"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11332:43:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 776,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 771,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 756,
														"src": "11389:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 774,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11406:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 773,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "11398:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 772,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "11398:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 775,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "11398:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "11389:19:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 785,
												"nodeType": "IfStatement",
												"src": "11385:89:1",
												"trueBody": {
													"id": 784,
													"nodeType": "Block",
													"src": "11410:64:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 780,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "11460:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 779,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "11452:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 778,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "11452:7:1",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 781,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11452:10:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 777,
																	"name": "ERC20InvalidApprover",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 952,
																	"src": "11431:20:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 782,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11431:32:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 783,
															"nodeType": "RevertStatement",
															"src": "11424:39:1"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 791,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 786,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 758,
														"src": "11487:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 789,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11506:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 788,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "11498:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 787,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "11498:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 790,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "11498:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "11487:21:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 800,
												"nodeType": "IfStatement",
												"src": "11483:90:1",
												"trueBody": {
													"id": 799,
													"nodeType": "Block",
													"src": "11510:63:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 795,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "11559:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 794,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "11551:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 793,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "11551:7:1",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 796,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11551:10:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 792,
																	"name": "ERC20InvalidSpender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 957,
																	"src": "11531:19:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 797,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11531:31:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 798,
															"nodeType": "RevertStatement",
															"src": "11524:38:1"
														}
													]
												}
											},
											{
												"expression": {
													"id": 809,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"expression": {
																	"id": 801,
																	"name": "$",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 767,
																	"src": "11582:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ERC20Storage_$294_storage_ptr",
																		"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
																	}
																},
																"id": 805,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "11584:11:1",
																"memberName": "_allowances",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 287,
																"src": "11582:13:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 806,
															"indexExpression": {
																"id": 803,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 756,
																"src": "11596:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "11582:20:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 807,
														"indexExpression": {
															"id": 804,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 758,
															"src": "11603:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "11582:29:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 808,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 760,
														"src": "11614:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11582:37:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 810,
												"nodeType": "ExpressionStatement",
												"src": "11582:37:1"
											},
											{
												"condition": {
													"id": 811,
													"name": "emitEvent",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 762,
													"src": "11633:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 819,
												"nodeType": "IfStatement",
												"src": "11629:76:1",
												"trueBody": {
													"id": 818,
													"nodeType": "Block",
													"src": "11644:61:1",
													"statements": [
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 813,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 756,
																		"src": "11672:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 814,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 758,
																		"src": "11679:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 815,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 760,
																		"src": "11688:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 812,
																	"name": "Approval",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1843,
																	"src": "11663:8:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,uint256)"
																	}
																},
																"id": 816,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11663:31:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 817,
															"nodeType": "EmitStatement",
															"src": "11658:36:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 754,
										"nodeType": "StructuredDocumentation",
										"src": "10398:821:1",
										"text": " @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n `Approval` event during `transferFrom` operations.\n Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n true using the following override:\n ```\n function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     super._approve(owner, spender, value, true);\n }\n ```\n Requirements are the same as {_approve}."
									},
									"id": 821,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "11233:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 763,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 756,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "11250:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 821,
												"src": "11242:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 755,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11242:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 758,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "11265:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 821,
												"src": "11257:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 757,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11257:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 760,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "11282:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 821,
												"src": "11274:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 759,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11274:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 762,
												"mutability": "mutable",
												"name": "emitEvent",
												"nameLocation": "11294:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 821,
												"src": "11289:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 761,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "11289:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11241:63:1"
									},
									"returnParameters": {
										"id": 764,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11322:0:1"
									},
									"scope": 870,
									"src": "11224:487:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 868,
										"nodeType": "Block",
										"src": "12082:388:1",
										"statements": [
											{
												"assignments": [
													832
												],
												"declarations": [
													{
														"constant": false,
														"id": 832,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "12100:16:1",
														"nodeType": "VariableDeclaration",
														"scope": 868,
														"src": "12092:24:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 831,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "12092:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 837,
												"initialValue": {
													"arguments": [
														{
															"id": 834,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 824,
															"src": "12129:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 835,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 826,
															"src": "12136:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 833,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 474,
														"src": "12119:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 836,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12119:25:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12092:52:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 844,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 838,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 832,
														"src": "12158:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 841,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "12183:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 840,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "12183:7:1",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 839,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "12178:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 842,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "12178:13:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 843,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "12192:3:1",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "12178:17:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "12158:37:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 867,
												"nodeType": "IfStatement",
												"src": "12154:310:1",
												"trueBody": {
													"id": 866,
													"nodeType": "Block",
													"src": "12197:267:1",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 847,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 845,
																	"name": "currentAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 832,
																	"src": "12215:16:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 846,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 828,
																	"src": "12234:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "12215:24:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 855,
															"nodeType": "IfStatement",
															"src": "12211:130:1",
															"trueBody": {
																"id": 854,
																"nodeType": "Block",
																"src": "12241:100:1",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 849,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 826,
																					"src": "12293:7:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 850,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 832,
																					"src": "12302:16:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 851,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 828,
																					"src": "12320:5:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 848,
																				"name": "ERC20InsufficientAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 947,
																				"src": "12266:26:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
																					"typeString": "function (address,uint256,uint256) pure"
																				}
																			},
																			"id": 852,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "12266:60:1",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 853,
																		"nodeType": "RevertStatement",
																		"src": "12259:67:1"
																	}
																]
															}
														},
														{
															"id": 865,
															"nodeType": "UncheckedBlock",
															"src": "12354:100:1",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 857,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 824,
																				"src": "12391:5:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 858,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 826,
																				"src": "12398:7:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 861,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 859,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 832,
																					"src": "12407:16:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 860,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 828,
																					"src": "12426:5:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "12407:24:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"hexValue": "66616c7365",
																				"id": 862,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "bool",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12433:5:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				},
																				"value": "false"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			],
																			"id": 856,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [
																				753,
																				821
																			],
																			"referencedDeclaration": 821,
																			"src": "12382:8:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
																				"typeString": "function (address,address,uint256,bool)"
																			}
																		},
																		"id": 863,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "12382:57:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 864,
																	"nodeType": "ExpressionStatement",
																	"src": "12382:57:1"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 822,
										"nodeType": "StructuredDocumentation",
										"src": "11717:271:1",
										"text": " @dev Updates `owner` s allowance for `spender` based on spent `value`.\n Does not update the allowance value in case of infinite allowance.\n Revert if not enough allowance is available.\n Does not emit an {Approval} event."
									},
									"id": 869,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "12002:15:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 829,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 824,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "12026:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 869,
												"src": "12018:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 823,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12018:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 826,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "12041:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 869,
												"src": "12033:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 825,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12033:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 828,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "12058:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 869,
												"src": "12050:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 827,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12050:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12017:47:1"
									},
									"returnParameters": {
										"id": 830,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12082:0:1"
									},
									"scope": 870,
									"src": "11993:477:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 871,
							"src": "1576:10896:1",
							"usedErrors": [
								16,
								19,
								928,
								933,
								938,
								947,
								952,
								957
							],
							"usedEvents": [
								24,
								1834,
								1843
							]
						}
					],
					"src": "105:12368:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
					"exportedSymbols": {
						"ContextUpgradeable": [
							916
						],
						"Initializable": [
							253
						]
					},
					"id": 917,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 872,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 874,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 917,
							"sourceUnit": 254,
							"src": "126:63:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 873,
										"name": "Initializable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 253,
										"src": "134:13:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 876,
										"name": "Initializable",
										"nameLocations": [
											"728:13:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 253,
										"src": "728:13:2"
									},
									"id": 877,
									"nodeType": "InheritanceSpecifier",
									"src": "728:13:2"
								}
							],
							"canonicalName": "ContextUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 875,
								"nodeType": "StructuredDocumentation",
								"src": "191:496:2",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 916,
							"linearizedBaseContracts": [
								916,
								253
							],
							"name": "ContextUpgradeable",
							"nameLocation": "706:18:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 882,
										"nodeType": "Block",
										"src": "800:7:2",
										"statements": []
									},
									"id": 883,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 880,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 879,
												"name": "onlyInitializing",
												"nameLocations": [
													"783:16:2"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 162,
												"src": "783:16:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "783:16:2"
										}
									],
									"name": "__Context_init",
									"nameLocation": "757:14:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 878,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "771:2:2"
									},
									"returnParameters": {
										"id": 881,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "800:0:2"
									},
									"scope": 916,
									"src": "748:59:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 888,
										"nodeType": "Block",
										"src": "875:7:2",
										"statements": []
									},
									"id": 889,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 886,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 885,
												"name": "onlyInitializing",
												"nameLocations": [
													"858:16:2"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 162,
												"src": "858:16:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "858:16:2"
										}
									],
									"name": "__Context_init_unchained",
									"nameLocation": "822:24:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 884,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "846:2:2"
									},
									"returnParameters": {
										"id": 887,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "875:0:2"
									},
									"scope": 916,
									"src": "813:69:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 897,
										"nodeType": "Block",
										"src": "949:34:2",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 894,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "966:3:2",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 895,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "970:6:2",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "966:10:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 893,
												"id": 896,
												"nodeType": "Return",
												"src": "959:17:2"
											}
										]
									},
									"id": 898,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "896:10:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 890,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "906:2:2"
									},
									"returnParameters": {
										"id": 893,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 892,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 898,
												"src": "940:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 891,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "940:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "939:9:2"
									},
									"scope": 916,
									"src": "887:96:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 906,
										"nodeType": "Block",
										"src": "1056:32:2",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 903,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "1073:3:2",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 904,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "1077:4:2",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "1073:8:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 902,
												"id": 905,
												"nodeType": "Return",
												"src": "1066:15:2"
											}
										]
									},
									"id": 907,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "998:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 899,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1006:2:2"
									},
									"returnParameters": {
										"id": 902,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 901,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 907,
												"src": "1040:14:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 900,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1040:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1039:16:2"
									},
									"scope": 916,
									"src": "989:99:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 914,
										"nodeType": "Block",
										"src": "1166:25:2",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 912,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1183:1:2",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 911,
												"id": 913,
												"nodeType": "Return",
												"src": "1176:8:2"
											}
										]
									},
									"id": 915,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contextSuffixLength",
									"nameLocation": "1103:20:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 908,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1123:2:2"
									},
									"returnParameters": {
										"id": 911,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 910,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 915,
												"src": "1157:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 909,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1157:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1156:9:2"
									},
									"scope": 916,
									"src": "1094:97:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 917,
							"src": "688:505:2",
							"usedErrors": [
								16,
								19
							],
							"usedEvents": [
								24
							]
						}
					],
					"src": "101:1093:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
					"exportedSymbols": {
						"IERC1155Errors": [
							1053
						],
						"IERC20Errors": [
							958
						],
						"IERC721Errors": [
							1006
						]
					},
					"id": 1054,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 918,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "112:24:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 919,
								"nodeType": "StructuredDocumentation",
								"src": "138:139:3",
								"text": " @dev Standard ERC20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens."
							},
							"fullyImplemented": true,
							"id": 958,
							"linearizedBaseContracts": [
								958
							],
							"name": "IERC20Errors",
							"nameLocation": "288:12:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 920,
										"nodeType": "StructuredDocumentation",
										"src": "307:309:3",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "e450d38c",
									"id": 928,
									"name": "ERC20InsufficientBalance",
									"nameLocation": "627:24:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 927,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 922,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "660:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 928,
												"src": "652:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 921,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "652:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 924,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "676:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 928,
												"src": "668:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 923,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "668:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 926,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "693:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 928,
												"src": "685:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 925,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "685:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "651:49:3"
									},
									"src": "621:80:3"
								},
								{
									"documentation": {
										"id": 929,
										"nodeType": "StructuredDocumentation",
										"src": "707:152:3",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "96c6fd1e",
									"id": 933,
									"name": "ERC20InvalidSender",
									"nameLocation": "870:18:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 932,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 931,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "897:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 933,
												"src": "889:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 930,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "889:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "888:16:3"
									},
									"src": "864:41:3"
								},
								{
									"documentation": {
										"id": 934,
										"nodeType": "StructuredDocumentation",
										"src": "911:159:3",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "ec442f05",
									"id": 938,
									"name": "ERC20InvalidReceiver",
									"nameLocation": "1081:20:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 937,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 936,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "1110:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 938,
												"src": "1102:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 935,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1102:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1101:18:3"
									},
									"src": "1075:45:3"
								},
								{
									"documentation": {
										"id": 939,
										"nodeType": "StructuredDocumentation",
										"src": "1126:345:3",
										"text": " @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "fb8f41b2",
									"id": 947,
									"name": "ERC20InsufficientAllowance",
									"nameLocation": "1482:26:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 946,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 941,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1517:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 947,
												"src": "1509:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 940,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1509:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 943,
												"mutability": "mutable",
												"name": "allowance",
												"nameLocation": "1534:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 947,
												"src": "1526:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 942,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1526:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 945,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "1553:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 947,
												"src": "1545:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 944,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1545:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1508:52:3"
									},
									"src": "1476:85:3"
								},
								{
									"documentation": {
										"id": 948,
										"nodeType": "StructuredDocumentation",
										"src": "1567:174:3",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "e602df05",
									"id": 952,
									"name": "ERC20InvalidApprover",
									"nameLocation": "1752:20:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 951,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 950,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "1781:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 952,
												"src": "1773:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 949,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1773:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1772:18:3"
									},
									"src": "1746:45:3"
								},
								{
									"documentation": {
										"id": 953,
										"nodeType": "StructuredDocumentation",
										"src": "1797:195:3",
										"text": " @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "94280d62",
									"id": 957,
									"name": "ERC20InvalidSpender",
									"nameLocation": "2003:19:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 956,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 955,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2031:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 957,
												"src": "2023:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 954,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2023:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2022:17:3"
									},
									"src": "1997:43:3"
								}
							],
							"scope": 1054,
							"src": "278:1764:3",
							"usedErrors": [
								928,
								933,
								938,
								947,
								952,
								957
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC721Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 959,
								"nodeType": "StructuredDocumentation",
								"src": "2044:141:3",
								"text": " @dev Standard ERC721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens."
							},
							"fullyImplemented": true,
							"id": 1006,
							"linearizedBaseContracts": [
								1006
							],
							"name": "IERC721Errors",
							"nameLocation": "2196:13:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 960,
										"nodeType": "StructuredDocumentation",
										"src": "2216:219:3",
										"text": " @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "89c62b64",
									"id": 964,
									"name": "ERC721InvalidOwner",
									"nameLocation": "2446:18:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 963,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 962,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2473:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 964,
												"src": "2465:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 961,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2465:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2464:15:3"
									},
									"src": "2440:40:3"
								},
								{
									"documentation": {
										"id": 965,
										"nodeType": "StructuredDocumentation",
										"src": "2486:132:3",
										"text": " @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "7e273289",
									"id": 969,
									"name": "ERC721NonexistentToken",
									"nameLocation": "2629:22:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 968,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 967,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2660:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 969,
												"src": "2652:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 966,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2652:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2651:17:3"
									},
									"src": "2623:46:3"
								},
								{
									"documentation": {
										"id": 970,
										"nodeType": "StructuredDocumentation",
										"src": "2675:289:3",
										"text": " @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "64283d7b",
									"id": 978,
									"name": "ERC721IncorrectOwner",
									"nameLocation": "2975:20:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 977,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 972,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3004:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 978,
												"src": "2996:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 971,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2996:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 974,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3020:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 978,
												"src": "3012:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 973,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3012:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 976,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3037:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 978,
												"src": "3029:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 975,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3029:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2995:48:3"
									},
									"src": "2969:75:3"
								},
								{
									"documentation": {
										"id": 979,
										"nodeType": "StructuredDocumentation",
										"src": "3050:152:3",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "73c6ac6e",
									"id": 983,
									"name": "ERC721InvalidSender",
									"nameLocation": "3213:19:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 982,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 981,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3241:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 983,
												"src": "3233:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 980,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3233:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3232:16:3"
									},
									"src": "3207:42:3"
								},
								{
									"documentation": {
										"id": 984,
										"nodeType": "StructuredDocumentation",
										"src": "3255:159:3",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "64a0ae92",
									"id": 988,
									"name": "ERC721InvalidReceiver",
									"nameLocation": "3425:21:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 987,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 986,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "3455:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 988,
												"src": "3447:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 985,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3447:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3446:18:3"
									},
									"src": "3419:46:3"
								},
								{
									"documentation": {
										"id": 989,
										"nodeType": "StructuredDocumentation",
										"src": "3471:247:3",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "177e802f",
									"id": 995,
									"name": "ERC721InsufficientApproval",
									"nameLocation": "3729:26:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 994,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 991,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "3764:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 995,
												"src": "3756:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 990,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3756:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 993,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3782:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 995,
												"src": "3774:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 992,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3774:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3755:35:3"
									},
									"src": "3723:68:3"
								},
								{
									"documentation": {
										"id": 996,
										"nodeType": "StructuredDocumentation",
										"src": "3797:174:3",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "a9fbf51f",
									"id": 1000,
									"name": "ERC721InvalidApprover",
									"nameLocation": "3982:21:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 999,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 998,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "4012:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 1000,
												"src": "4004:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 997,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4004:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4003:18:3"
									},
									"src": "3976:46:3"
								},
								{
									"documentation": {
										"id": 1001,
										"nodeType": "StructuredDocumentation",
										"src": "4028:197:3",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "5b08ba18",
									"id": 1005,
									"name": "ERC721InvalidOperator",
									"nameLocation": "4236:21:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1004,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1003,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4266:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 1005,
												"src": "4258:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1002,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4258:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4257:18:3"
									},
									"src": "4230:46:3"
								}
							],
							"scope": 1054,
							"src": "2186:2092:3",
							"usedErrors": [
								964,
								969,
								978,
								983,
								988,
								995,
								1000,
								1005
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC1155Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1007,
								"nodeType": "StructuredDocumentation",
								"src": "4280:143:3",
								"text": " @dev Standard ERC1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens."
							},
							"fullyImplemented": true,
							"id": 1053,
							"linearizedBaseContracts": [
								1053
							],
							"name": "IERC1155Errors",
							"nameLocation": "4434:14:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1008,
										"nodeType": "StructuredDocumentation",
										"src": "4455:361:3",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "03dee4c5",
									"id": 1018,
									"name": "ERC1155InsufficientBalance",
									"nameLocation": "4827:26:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1017,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1010,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "4862:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 1018,
												"src": "4854:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1009,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4854:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1012,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "4878:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1018,
												"src": "4870:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1011,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4870:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1014,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "4895:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 1018,
												"src": "4887:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1013,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4887:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1016,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4911:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1018,
												"src": "4903:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1015,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4903:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4853:66:3"
									},
									"src": "4821:99:3"
								},
								{
									"documentation": {
										"id": 1019,
										"nodeType": "StructuredDocumentation",
										"src": "4926:152:3",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "01a83514",
									"id": 1023,
									"name": "ERC1155InvalidSender",
									"nameLocation": "5089:20:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1022,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1021,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "5118:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 1023,
												"src": "5110:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1020,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5110:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5109:16:3"
									},
									"src": "5083:43:3"
								},
								{
									"documentation": {
										"id": 1024,
										"nodeType": "StructuredDocumentation",
										"src": "5132:159:3",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "57f447ce",
									"id": 1028,
									"name": "ERC1155InvalidReceiver",
									"nameLocation": "5302:22:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1027,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1026,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "5333:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 1028,
												"src": "5325:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1025,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5325:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5324:18:3"
									},
									"src": "5296:47:3"
								},
								{
									"documentation": {
										"id": 1029,
										"nodeType": "StructuredDocumentation",
										"src": "5349:256:3",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "e237d922",
									"id": 1035,
									"name": "ERC1155MissingApprovalForAll",
									"nameLocation": "5616:28:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1034,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1031,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "5653:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 1035,
												"src": "5645:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1030,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5645:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1033,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5671:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 1035,
												"src": "5663:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1032,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5663:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5644:33:3"
									},
									"src": "5610:68:3"
								},
								{
									"documentation": {
										"id": 1036,
										"nodeType": "StructuredDocumentation",
										"src": "5684:174:3",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "3e31884e",
									"id": 1040,
									"name": "ERC1155InvalidApprover",
									"nameLocation": "5869:22:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1039,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1038,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "5900:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 1040,
												"src": "5892:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1037,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5892:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5891:18:3"
									},
									"src": "5863:47:3"
								},
								{
									"documentation": {
										"id": 1041,
										"nodeType": "StructuredDocumentation",
										"src": "5916:197:3",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "ced3e100",
									"id": 1045,
									"name": "ERC1155InvalidOperator",
									"nameLocation": "6124:22:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1044,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1043,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "6155:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 1045,
												"src": "6147:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1042,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6147:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6146:18:3"
									},
									"src": "6118:47:3"
								},
								{
									"documentation": {
										"id": 1046,
										"nodeType": "StructuredDocumentation",
										"src": "6171:280:3",
										"text": " @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"
									},
									"errorSelector": "5b059991",
									"id": 1052,
									"name": "ERC1155InvalidArrayLength",
									"nameLocation": "6462:25:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1051,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1048,
												"mutability": "mutable",
												"name": "idsLength",
												"nameLocation": "6496:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 1052,
												"src": "6488:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1047,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6488:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1050,
												"mutability": "mutable",
												"name": "valuesLength",
												"nameLocation": "6515:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 1052,
												"src": "6507:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1049,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6507:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6487:41:3"
									},
									"src": "6456:73:3"
								}
							],
							"scope": 1054,
							"src": "4424:2107:3",
							"usedErrors": [
								1018,
								1023,
								1028,
								1035,
								1040,
								1045,
								1052
							],
							"usedEvents": []
						}
					],
					"src": "112:6420:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/proxy/utils/Initializable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/proxy/utils/Initializable.sol",
					"exportedSymbols": {
						"Initializable": [
							1307
						]
					},
					"id": 1308,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1055,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "113:24:4"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Initializable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1056,
								"nodeType": "StructuredDocumentation",
								"src": "139:2209:4",
								"text": " @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```solidity\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="
							},
							"fullyImplemented": true,
							"id": 1307,
							"linearizedBaseContracts": [
								1307
							],
							"name": "Initializable",
							"nameLocation": "2367:13:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "Initializable.InitializableStorage",
									"documentation": {
										"id": 1057,
										"nodeType": "StructuredDocumentation",
										"src": "2387:293:4",
										"text": " @dev Storage of the initializable contract.\n It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n when using with upgradeable contracts.\n @custom:storage-location erc7201:openzeppelin.storage.Initializable"
									},
									"id": 1064,
									"members": [
										{
											"constant": false,
											"id": 1060,
											"mutability": "mutable",
											"name": "_initialized",
											"nameLocation": "2820:12:4",
											"nodeType": "VariableDeclaration",
											"scope": 1064,
											"src": "2813:19:4",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 1059,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "2813:6:4",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1063,
											"mutability": "mutable",
											"name": "_initializing",
											"nameLocation": "2955:13:4",
											"nodeType": "VariableDeclaration",
											"scope": 1064,
											"src": "2950:18:4",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 1062,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "2950:4:4",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "InitializableStorage",
									"nameLocation": "2692:20:4",
									"nodeType": "StructDefinition",
									"scope": 1307,
									"src": "2685:290:4",
									"visibility": "public"
								},
								{
									"constant": true,
									"id": 1067,
									"mutability": "constant",
									"name": "INITIALIZABLE_STORAGE",
									"nameLocation": "3123:21:4",
									"nodeType": "VariableDeclaration",
									"scope": 1307,
									"src": "3098:115:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1065,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "3098:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307866306335376531363834306466303430663135303838646332663831666533393163333932336265633733653233613936363265666339633232396336613030",
										"id": 1066,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "3147:66:4",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_108904022758810753673719992590105913556127789646572562039383141376366747609600_by_1",
											"typeString": "int_const 1089...(70 digits omitted)...9600"
										},
										"value": "0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00"
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 1068,
										"nodeType": "StructuredDocumentation",
										"src": "3220:60:4",
										"text": " @dev The contract is already initialized."
									},
									"errorSelector": "f92ee8a9",
									"id": 1070,
									"name": "InvalidInitialization",
									"nameLocation": "3291:21:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1069,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3312:2:4"
									},
									"src": "3285:30:4"
								},
								{
									"documentation": {
										"id": 1071,
										"nodeType": "StructuredDocumentation",
										"src": "3321:57:4",
										"text": " @dev The contract is not initializing."
									},
									"errorSelector": "d7e6bcf8",
									"id": 1073,
									"name": "NotInitializing",
									"nameLocation": "3389:15:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1072,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3404:2:4"
									},
									"src": "3383:24:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1074,
										"nodeType": "StructuredDocumentation",
										"src": "3413:90:4",
										"text": " @dev Triggered when the contract has been initialized or reinitialized."
									},
									"eventSelector": "c7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2",
									"id": 1078,
									"name": "Initialized",
									"nameLocation": "3514:11:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1077,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1076,
												"indexed": false,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "3533:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1078,
												"src": "3526:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 1075,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "3526:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3525:16:4"
									},
									"src": "3508:34:4"
								},
								{
									"body": {
										"id": 1160,
										"nodeType": "Block",
										"src": "4092:1081:4",
										"statements": [
											{
												"assignments": [
													1083
												],
												"declarations": [
													{
														"constant": false,
														"id": 1083,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "4187:1:4",
														"nodeType": "VariableDeclaration",
														"scope": 1160,
														"src": "4158:30:4",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$1064_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage"
														},
														"typeName": {
															"id": 1082,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1081,
																"name": "InitializableStorage",
																"nameLocations": [
																	"4158:20:4"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1064,
																"src": "4158:20:4"
															},
															"referencedDeclaration": 1064,
															"src": "4158:20:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$1064_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1086,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1084,
														"name": "_getInitializableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1306,
														"src": "4191:24:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$1064_storage_ptr_$",
															"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
														}
													},
													"id": 1085,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4191:26:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_InitializableStorage_$1064_storage_ptr",
														"typeString": "struct Initializable.InitializableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4158:59:4"
											},
											{
												"assignments": [
													1088
												],
												"declarations": [
													{
														"constant": false,
														"id": 1088,
														"mutability": "mutable",
														"name": "isTopLevelCall",
														"nameLocation": "4284:14:4",
														"nodeType": "VariableDeclaration",
														"scope": 1160,
														"src": "4279:19:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1087,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4279:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1092,
												"initialValue": {
													"id": 1091,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "4301:16:4",
													"subExpression": {
														"expression": {
															"id": 1089,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1083,
															"src": "4302:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$1064_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 1090,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4304:13:4",
														"memberName": "_initializing",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1063,
														"src": "4302:15:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4279:38:4"
											},
											{
												"assignments": [
													1094
												],
												"declarations": [
													{
														"constant": false,
														"id": 1094,
														"mutability": "mutable",
														"name": "initialized",
														"nameLocation": "4334:11:4",
														"nodeType": "VariableDeclaration",
														"scope": 1160,
														"src": "4327:18:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														},
														"typeName": {
															"id": 1093,
															"name": "uint64",
															"nodeType": "ElementaryTypeName",
															"src": "4327:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1097,
												"initialValue": {
													"expression": {
														"id": 1095,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1083,
														"src": "4348:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$1064_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage storage pointer"
														}
													},
													"id": 1096,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "4350:12:4",
													"memberName": "_initialized",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1060,
													"src": "4348:14:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4327:35:4"
											},
											{
												"assignments": [
													1099
												],
												"declarations": [
													{
														"constant": false,
														"id": 1099,
														"mutability": "mutable",
														"name": "initialSetup",
														"nameLocation": "4711:12:4",
														"nodeType": "VariableDeclaration",
														"scope": 1160,
														"src": "4706:17:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1098,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4706:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1105,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1104,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														},
														"id": 1102,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1100,
															"name": "initialized",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1094,
															"src": "4726:11:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 1101,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4741:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "4726:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"id": 1103,
														"name": "isTopLevelCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1088,
														"src": "4746:14:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4726:34:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4706:54:4"
											},
											{
												"assignments": [
													1107
												],
												"declarations": [
													{
														"constant": false,
														"id": 1107,
														"mutability": "mutable",
														"name": "construction",
														"nameLocation": "4775:12:4",
														"nodeType": "VariableDeclaration",
														"scope": 1160,
														"src": "4770:17:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1106,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4770:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1120,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1119,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														},
														"id": 1110,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1108,
															"name": "initialized",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1094,
															"src": "4790:11:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "31",
															"id": 1109,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4805:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "4790:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1118,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1113,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "4818:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Initializable_$1307",
																				"typeString": "contract Initializable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Initializable_$1307",
																				"typeString": "contract Initializable"
																			}
																		],
																		"id": 1112,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4810:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1111,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "4810:7:4",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1114,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4810:13:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 1115,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "4824:4:4",
																"memberName": "code",
																"nodeType": "MemberAccess",
																"src": "4810:18:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 1116,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4829:6:4",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "4810:25:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 1117,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4839:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "4810:30:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4790:50:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4770:70:4"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1125,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1122,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "4855:13:4",
														"subExpression": {
															"id": 1121,
															"name": "initialSetup",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1099,
															"src": "4856:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"id": 1124,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "4872:13:4",
														"subExpression": {
															"id": 1123,
															"name": "construction",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1107,
															"src": "4873:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4855:30:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1130,
												"nodeType": "IfStatement",
												"src": "4851:91:4",
												"trueBody": {
													"id": 1129,
													"nodeType": "Block",
													"src": "4887:55:4",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1126,
																	"name": "InvalidInitialization",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1070,
																	"src": "4908:21:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1127,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4908:23:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1128,
															"nodeType": "RevertStatement",
															"src": "4901:30:4"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1135,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1131,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1083,
															"src": "4951:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$1064_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 1133,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "4953:12:4",
														"memberName": "_initialized",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1060,
														"src": "4951:14:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 1134,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4968:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "4951:18:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"id": 1136,
												"nodeType": "ExpressionStatement",
												"src": "4951:18:4"
											},
											{
												"condition": {
													"id": 1137,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1088,
													"src": "4983:14:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1145,
												"nodeType": "IfStatement",
												"src": "4979:67:4",
												"trueBody": {
													"id": 1144,
													"nodeType": "Block",
													"src": "4999:47:4",
													"statements": [
														{
															"expression": {
																"id": 1142,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 1138,
																		"name": "$",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1083,
																		"src": "5013:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_InitializableStorage_$1064_storage_ptr",
																			"typeString": "struct Initializable.InitializableStorage storage pointer"
																		}
																	},
																	"id": 1140,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "5015:13:4",
																	"memberName": "_initializing",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1063,
																	"src": "5013:15:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 1141,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5031:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "5013:22:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1143,
															"nodeType": "ExpressionStatement",
															"src": "5013:22:4"
														}
													]
												}
											},
											{
												"id": 1146,
												"nodeType": "PlaceholderStatement",
												"src": "5055:1:4"
											},
											{
												"condition": {
													"id": 1147,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1088,
													"src": "5070:14:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1159,
												"nodeType": "IfStatement",
												"src": "5066:101:4",
												"trueBody": {
													"id": 1158,
													"nodeType": "Block",
													"src": "5086:81:4",
													"statements": [
														{
															"expression": {
																"id": 1152,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 1148,
																		"name": "$",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1083,
																		"src": "5100:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_InitializableStorage_$1064_storage_ptr",
																			"typeString": "struct Initializable.InitializableStorage storage pointer"
																		}
																	},
																	"id": 1150,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "5102:13:4",
																	"memberName": "_initializing",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1063,
																	"src": "5100:15:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "66616c7365",
																	"id": 1151,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5118:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "5100:23:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1153,
															"nodeType": "ExpressionStatement",
															"src": "5100:23:4"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"hexValue": "31",
																		"id": 1155,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5154:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		}
																	],
																	"id": 1154,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1078,
																	"src": "5142:11:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint64_$returns$__$",
																		"typeString": "function (uint64)"
																	}
																},
																"id": 1156,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5142:14:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1157,
															"nodeType": "EmitStatement",
															"src": "5137:19:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1079,
										"nodeType": "StructuredDocumentation",
										"src": "3548:516:4",
										"text": " @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n production.\n Emits an {Initialized} event."
									},
									"id": 1161,
									"name": "initializer",
									"nameLocation": "4078:11:4",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1080,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4089:2:4"
									},
									"src": "4069:1104:4",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1207,
										"nodeType": "Block",
										"src": "6291:392:4",
										"statements": [
											{
												"assignments": [
													1168
												],
												"declarations": [
													{
														"constant": false,
														"id": 1168,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "6386:1:4",
														"nodeType": "VariableDeclaration",
														"scope": 1207,
														"src": "6357:30:4",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$1064_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage"
														},
														"typeName": {
															"id": 1167,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1166,
																"name": "InitializableStorage",
																"nameLocations": [
																	"6357:20:4"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1064,
																"src": "6357:20:4"
															},
															"referencedDeclaration": 1064,
															"src": "6357:20:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$1064_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1171,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1169,
														"name": "_getInitializableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1306,
														"src": "6390:24:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$1064_storage_ptr_$",
															"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
														}
													},
													"id": 1170,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6390:26:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_InitializableStorage_$1064_storage_ptr",
														"typeString": "struct Initializable.InitializableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6357:59:4"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1178,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1172,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1168,
															"src": "6431:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$1064_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 1173,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6433:13:4",
														"memberName": "_initializing",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1063,
														"src": "6431:15:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														},
														"id": 1177,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 1174,
																"name": "$",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1168,
																"src": "6450:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_InitializableStorage_$1064_storage_ptr",
																	"typeString": "struct Initializable.InitializableStorage storage pointer"
																}
															},
															"id": 1175,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "6452:12:4",
															"memberName": "_initialized",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1060,
															"src": "6450:14:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">=",
														"rightExpression": {
															"id": 1176,
															"name": "version",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1164,
															"src": "6468:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"src": "6450:25:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "6431:44:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1183,
												"nodeType": "IfStatement",
												"src": "6427:105:4",
												"trueBody": {
													"id": 1182,
													"nodeType": "Block",
													"src": "6477:55:4",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1179,
																	"name": "InvalidInitialization",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1070,
																	"src": "6498:21:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1180,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6498:23:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1181,
															"nodeType": "RevertStatement",
															"src": "6491:30:4"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1188,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1184,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1168,
															"src": "6541:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$1064_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 1186,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "6543:12:4",
														"memberName": "_initialized",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1060,
														"src": "6541:14:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1187,
														"name": "version",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1164,
														"src": "6558:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"src": "6541:24:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"id": 1189,
												"nodeType": "ExpressionStatement",
												"src": "6541:24:4"
											},
											{
												"expression": {
													"id": 1194,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1190,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1168,
															"src": "6575:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$1064_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 1192,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "6577:13:4",
														"memberName": "_initializing",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1063,
														"src": "6575:15:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 1193,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6593:4:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "6575:22:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1195,
												"nodeType": "ExpressionStatement",
												"src": "6575:22:4"
											},
											{
												"id": 1196,
												"nodeType": "PlaceholderStatement",
												"src": "6607:1:4"
											},
											{
												"expression": {
													"id": 1201,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1197,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1168,
															"src": "6618:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$1064_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 1199,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "6620:13:4",
														"memberName": "_initializing",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1063,
														"src": "6618:15:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 1200,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6636:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "6618:23:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1202,
												"nodeType": "ExpressionStatement",
												"src": "6618:23:4"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1204,
															"name": "version",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1164,
															"src": "6668:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														],
														"id": 1203,
														"name": "Initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1078,
														"src": "6656:11:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint64_$returns$__$",
															"typeString": "function (uint64)"
														}
													},
													"id": 1205,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6656:20:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1206,
												"nodeType": "EmitStatement",
												"src": "6651:25:4"
											}
										]
									},
									"documentation": {
										"id": 1162,
										"nodeType": "StructuredDocumentation",
										"src": "5179:1068:4",
										"text": " @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n Emits an {Initialized} event."
									},
									"id": 1208,
									"name": "reinitializer",
									"nameLocation": "6261:13:4",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1165,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1164,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "6282:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1208,
												"src": "6275:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 1163,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "6275:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6274:16:4"
									},
									"src": "6252:431:4",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1215,
										"nodeType": "Block",
										"src": "6921:48:4",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1211,
														"name": "_checkInitializing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1229,
														"src": "6931:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 1212,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6931:20:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1213,
												"nodeType": "ExpressionStatement",
												"src": "6931:20:4"
											},
											{
												"id": 1214,
												"nodeType": "PlaceholderStatement",
												"src": "6961:1:4"
											}
										]
									},
									"documentation": {
										"id": 1209,
										"nodeType": "StructuredDocumentation",
										"src": "6689:199:4",
										"text": " @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."
									},
									"id": 1216,
									"name": "onlyInitializing",
									"nameLocation": "6902:16:4",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1210,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6918:2:4"
									},
									"src": "6893:76:4",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1228,
										"nodeType": "Block",
										"src": "7136:89:4",
										"statements": [
											{
												"condition": {
													"id": 1222,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "7150:18:4",
													"subExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1220,
															"name": "_isInitializing",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1297,
															"src": "7151:15:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																"typeString": "function () view returns (bool)"
															}
														},
														"id": 1221,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7151:17:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1227,
												"nodeType": "IfStatement",
												"src": "7146:73:4",
												"trueBody": {
													"id": 1226,
													"nodeType": "Block",
													"src": "7170:49:4",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1223,
																	"name": "NotInitializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1073,
																	"src": "7191:15:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1224,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7191:17:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1225,
															"nodeType": "RevertStatement",
															"src": "7184:24:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1217,
										"nodeType": "StructuredDocumentation",
										"src": "6975:104:4",
										"text": " @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}."
									},
									"id": 1229,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkInitializing",
									"nameLocation": "7093:18:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1218,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7111:2:4"
									},
									"returnParameters": {
										"id": 1219,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7136:0:4"
									},
									"scope": 1307,
									"src": "7084:141:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1274,
										"nodeType": "Block",
										"src": "7760:373:4",
										"statements": [
											{
												"assignments": [
													1235
												],
												"declarations": [
													{
														"constant": false,
														"id": 1235,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "7855:1:4",
														"nodeType": "VariableDeclaration",
														"scope": 1274,
														"src": "7826:30:4",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$1064_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage"
														},
														"typeName": {
															"id": 1234,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1233,
																"name": "InitializableStorage",
																"nameLocations": [
																	"7826:20:4"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1064,
																"src": "7826:20:4"
															},
															"referencedDeclaration": 1064,
															"src": "7826:20:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$1064_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1238,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1236,
														"name": "_getInitializableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1306,
														"src": "7859:24:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$1064_storage_ptr_$",
															"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
														}
													},
													"id": 1237,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7859:26:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_InitializableStorage_$1064_storage_ptr",
														"typeString": "struct Initializable.InitializableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7826:59:4"
											},
											{
												"condition": {
													"expression": {
														"id": 1239,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1235,
														"src": "7900:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$1064_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage storage pointer"
														}
													},
													"id": 1240,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "7902:13:4",
													"memberName": "_initializing",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1063,
													"src": "7900:15:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1245,
												"nodeType": "IfStatement",
												"src": "7896:76:4",
												"trueBody": {
													"id": 1244,
													"nodeType": "Block",
													"src": "7917:55:4",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1241,
																	"name": "InvalidInitialization",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1070,
																	"src": "7938:21:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1242,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7938:23:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1243,
															"nodeType": "RevertStatement",
															"src": "7931:30:4"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													},
													"id": 1253,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1246,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1235,
															"src": "7985:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$1064_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 1247,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "7987:12:4",
														"memberName": "_initialized",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1060,
														"src": "7985:14:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 1250,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8008:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 1249,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "8008:6:4",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	}
																],
																"id": 1248,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "8003:4:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 1251,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8003:12:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint64",
																"typeString": "type(uint64)"
															}
														},
														"id": 1252,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "8016:3:4",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "8003:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"src": "7985:34:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1273,
												"nodeType": "IfStatement",
												"src": "7981:146:4",
												"trueBody": {
													"id": 1272,
													"nodeType": "Block",
													"src": "8021:106:4",
													"statements": [
														{
															"expression": {
																"id": 1262,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 1254,
																		"name": "$",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1235,
																		"src": "8035:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_InitializableStorage_$1064_storage_ptr",
																			"typeString": "struct Initializable.InitializableStorage storage pointer"
																		}
																	},
																	"id": 1256,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "8037:12:4",
																	"memberName": "_initialized",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1060,
																	"src": "8035:14:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint64",
																		"typeString": "uint64"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"arguments": [
																			{
																				"id": 1259,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "8057:6:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint64_$",
																					"typeString": "type(uint64)"
																				},
																				"typeName": {
																					"id": 1258,
																					"name": "uint64",
																					"nodeType": "ElementaryTypeName",
																					"src": "8057:6:4",
																					"typeDescriptions": {}
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_type$_t_uint64_$",
																					"typeString": "type(uint64)"
																				}
																			],
																			"id": 1257,
																			"name": "type",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967269,
																			"src": "8052:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 1260,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8052:12:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_meta_type_t_uint64",
																			"typeString": "type(uint64)"
																		}
																	},
																	"id": 1261,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "8065:3:4",
																	"memberName": "max",
																	"nodeType": "MemberAccess",
																	"src": "8052:16:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint64",
																		"typeString": "uint64"
																	}
																},
																"src": "8035:33:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"id": 1263,
															"nodeType": "ExpressionStatement",
															"src": "8035:33:4"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 1267,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "8104:6:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint64_$",
																						"typeString": "type(uint64)"
																					},
																					"typeName": {
																						"id": 1266,
																						"name": "uint64",
																						"nodeType": "ElementaryTypeName",
																						"src": "8104:6:4",
																						"typeDescriptions": {}
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_type$_t_uint64_$",
																						"typeString": "type(uint64)"
																					}
																				],
																				"id": 1265,
																				"name": "type",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967269,
																				"src": "8099:4:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 1268,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8099:12:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_meta_type_t_uint64",
																				"typeString": "type(uint64)"
																			}
																		},
																		"id": 1269,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "8112:3:4",
																		"memberName": "max",
																		"nodeType": "MemberAccess",
																		"src": "8099:16:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint64",
																			"typeString": "uint64"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint64",
																			"typeString": "uint64"
																		}
																	],
																	"id": 1264,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1078,
																	"src": "8087:11:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint64_$returns$__$",
																		"typeString": "function (uint64)"
																	}
																},
																"id": 1270,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8087:29:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1271,
															"nodeType": "EmitStatement",
															"src": "8082:34:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1230,
										"nodeType": "StructuredDocumentation",
										"src": "7231:475:4",
										"text": " @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."
									},
									"id": 1275,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_disableInitializers",
									"nameLocation": "7720:20:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1231,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7740:2:4"
									},
									"returnParameters": {
										"id": 1232,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7760:0:4"
									},
									"scope": 1307,
									"src": "7711:422:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1285,
										"nodeType": "Block",
										"src": "8308:63:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1281,
															"name": "_getInitializableStorage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1306,
															"src": "8325:24:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$1064_storage_ptr_$",
																"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
															}
														},
														"id": 1282,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8325:26:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$1064_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage storage pointer"
														}
													},
													"id": 1283,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "8352:12:4",
													"memberName": "_initialized",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1060,
													"src": "8325:39:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"functionReturnParameters": 1280,
												"id": 1284,
												"nodeType": "Return",
												"src": "8318:46:4"
											}
										]
									},
									"documentation": {
										"id": 1276,
										"nodeType": "StructuredDocumentation",
										"src": "8139:99:4",
										"text": " @dev Returns the highest version that has been initialized. See {reinitializer}."
									},
									"id": 1286,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getInitializedVersion",
									"nameLocation": "8252:22:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1277,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8274:2:4"
									},
									"returnParameters": {
										"id": 1280,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1279,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1286,
												"src": "8300:6:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 1278,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "8300:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8299:8:4"
									},
									"scope": 1307,
									"src": "8243:128:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1296,
										"nodeType": "Block",
										"src": "8543:64:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1292,
															"name": "_getInitializableStorage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1306,
															"src": "8560:24:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$1064_storage_ptr_$",
																"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
															}
														},
														"id": 1293,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8560:26:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$1064_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage storage pointer"
														}
													},
													"id": 1294,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "8587:13:4",
													"memberName": "_initializing",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1063,
													"src": "8560:40:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1291,
												"id": 1295,
												"nodeType": "Return",
												"src": "8553:47:4"
											}
										]
									},
									"documentation": {
										"id": 1287,
										"nodeType": "StructuredDocumentation",
										"src": "8377:105:4",
										"text": " @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."
									},
									"id": 1297,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_isInitializing",
									"nameLocation": "8496:15:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1288,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8511:2:4"
									},
									"returnParameters": {
										"id": 1291,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1290,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1297,
												"src": "8537:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1289,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8537:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8536:6:4"
									},
									"scope": 1307,
									"src": "8487:120:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1305,
										"nodeType": "Block",
										"src": "8827:80:4",
										"statements": [
											{
												"AST": {
													"nativeSrc": "8846:55:4",
													"nodeType": "YulBlock",
													"src": "8846:55:4",
													"statements": [
														{
															"nativeSrc": "8860:31:4",
															"nodeType": "YulAssignment",
															"src": "8860:31:4",
															"value": {
																"name": "INITIALIZABLE_STORAGE",
																"nativeSrc": "8870:21:4",
																"nodeType": "YulIdentifier",
																"src": "8870:21:4"
															},
															"variableNames": [
																{
																	"name": "$.slot",
																	"nativeSrc": "8860:6:4",
																	"nodeType": "YulIdentifier",
																	"src": "8860:6:4"
																}
															]
														}
													]
												},
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 1302,
														"isOffset": false,
														"isSlot": true,
														"src": "8860:6:4",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1067,
														"isOffset": false,
														"isSlot": false,
														"src": "8870:21:4",
														"valueSize": 1
													}
												],
												"id": 1304,
												"nodeType": "InlineAssembly",
												"src": "8837:64:4"
											}
										]
									},
									"documentation": {
										"id": 1298,
										"nodeType": "StructuredDocumentation",
										"src": "8613:67:4",
										"text": " @dev Returns a pointer to the storage namespace."
									},
									"id": 1306,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getInitializableStorage",
									"nameLocation": "8746:24:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1299,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8770:2:4"
									},
									"returnParameters": {
										"id": 1303,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1302,
												"mutability": "mutable",
												"name": "$",
												"nameLocation": "8824:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 1306,
												"src": "8795:30:4",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_InitializableStorage_$1064_storage_ptr",
													"typeString": "struct Initializable.InitializableStorage"
												},
												"typeName": {
													"id": 1301,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1300,
														"name": "InitializableStorage",
														"nameLocations": [
															"8795:20:4"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1064,
														"src": "8795:20:4"
													},
													"referencedDeclaration": 1064,
													"src": "8795:20:4",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_InitializableStorage_$1064_storage_ptr",
														"typeString": "struct Initializable.InitializableStorage"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8794:32:4"
									},
									"scope": 1307,
									"src": "8737:170:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 1308,
							"src": "2349:6560:4",
							"usedErrors": [
								1070,
								1073
							],
							"usedEvents": [
								1078
							]
						}
					],
					"src": "113:8797:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
					"exportedSymbols": {
						"Context": [
							1956
						],
						"ERC20": [
							1822
						],
						"IERC20": [
							1900
						],
						"IERC20Errors": [
							958
						],
						"IERC20Metadata": [
							1926
						]
					},
					"id": 1823,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1309,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "105:24:5"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 1311,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1823,
							"sourceUnit": 1901,
							"src": "131:36:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1310,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1900,
										"src": "139:6:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
							"file": "./extensions/IERC20Metadata.sol",
							"id": 1313,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1823,
							"sourceUnit": 1927,
							"src": "168:63:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1312,
										"name": "IERC20Metadata",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1926,
										"src": "176:14:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../../utils/Context.sol",
							"id": 1315,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1823,
							"sourceUnit": 1957,
							"src": "232:48:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1314,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1956,
										"src": "240:7:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
							"file": "../../interfaces/draft-IERC6093.sol",
							"id": 1317,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1823,
							"sourceUnit": 1054,
							"src": "281:65:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1316,
										"name": "IERC20Errors",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 958,
										"src": "289:12:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1319,
										"name": "Context",
										"nameLocations": [
											"1428:7:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1956,
										"src": "1428:7:5"
									},
									"id": 1320,
									"nodeType": "InheritanceSpecifier",
									"src": "1428:7:5"
								},
								{
									"baseName": {
										"id": 1321,
										"name": "IERC20",
										"nameLocations": [
											"1437:6:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1900,
										"src": "1437:6:5"
									},
									"id": 1322,
									"nodeType": "InheritanceSpecifier",
									"src": "1437:6:5"
								},
								{
									"baseName": {
										"id": 1323,
										"name": "IERC20Metadata",
										"nameLocations": [
											"1445:14:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1926,
										"src": "1445:14:5"
									},
									"id": 1324,
									"nodeType": "InheritanceSpecifier",
									"src": "1445:14:5"
								},
								{
									"baseName": {
										"id": 1325,
										"name": "IERC20Errors",
										"nameLocations": [
											"1461:12:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 958,
										"src": "1461:12:5"
									},
									"id": 1326,
									"nodeType": "InheritanceSpecifier",
									"src": "1461:12:5"
								}
							],
							"canonicalName": "ERC20",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1318,
								"nodeType": "StructuredDocumentation",
								"src": "348:1052:5",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification."
							},
							"fullyImplemented": true,
							"id": 1822,
							"linearizedBaseContracts": [
								1822,
								958,
								1926,
								1900,
								1956
							],
							"name": "ERC20",
							"nameLocation": "1419:5:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 1330,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1524:9:5",
									"nodeType": "VariableDeclaration",
									"scope": 1822,
									"src": "1480:53:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 1329,
										"keyName": "account",
										"keyNameLocation": "1496:7:5",
										"keyType": {
											"id": 1327,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1488:7:5",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1480:35:5",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 1328,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1507:7:5",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1336,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "1612:11:5",
									"nodeType": "VariableDeclaration",
									"scope": 1822,
									"src": "1540:83:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 1335,
										"keyName": "account",
										"keyNameLocation": "1556:7:5",
										"keyType": {
											"id": 1331,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1548:7:5",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1540:63:5",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 1334,
											"keyName": "spender",
											"keyNameLocation": "1583:7:5",
											"keyType": {
												"id": 1332,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1575:7:5",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1567:35:5",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueName": "",
											"valueNameLocation": "-1:-1:-1",
											"valueType": {
												"id": 1333,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1594:7:5",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1338,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "1646:12:5",
									"nodeType": "VariableDeclaration",
									"scope": 1822,
									"src": "1630:28:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1337,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1630:7:5",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1340,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "1680:5:5",
									"nodeType": "VariableDeclaration",
									"scope": 1822,
									"src": "1665:20:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 1339,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1665:6:5",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1342,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1706:7:5",
									"nodeType": "VariableDeclaration",
									"scope": 1822,
									"src": "1691:22:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 1341,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1691:6:5",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 1358,
										"nodeType": "Block",
										"src": "1952:57:5",
										"statements": [
											{
												"expression": {
													"id": 1352,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1350,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1340,
														"src": "1962:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1351,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1345,
														"src": "1970:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1962:13:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 1353,
												"nodeType": "ExpressionStatement",
												"src": "1962:13:5"
											},
											{
												"expression": {
													"id": 1356,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1354,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1342,
														"src": "1985:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1355,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1347,
														"src": "1995:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1985:17:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 1357,
												"nodeType": "ExpressionStatement",
												"src": "1985:17:5"
											}
										]
									},
									"documentation": {
										"id": 1343,
										"nodeType": "StructuredDocumentation",
										"src": "1720:171:5",
										"text": " @dev Sets the values for {name} and {symbol}.\n All two of these values are immutable: they can only be set once during\n construction."
									},
									"id": 1359,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1348,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1345,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "1922:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1359,
												"src": "1908:19:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1344,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1908:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1347,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "1943:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1359,
												"src": "1929:21:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1346,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1929:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1907:44:5"
									},
									"returnParameters": {
										"id": 1349,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1952:0:5"
									},
									"scope": 1822,
									"src": "1896:113:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1913
									],
									"body": {
										"id": 1367,
										"nodeType": "Block",
										"src": "2134:29:5",
										"statements": [
											{
												"expression": {
													"id": 1365,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1340,
													"src": "2151:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 1364,
												"id": 1366,
												"nodeType": "Return",
												"src": "2144:12:5"
											}
										]
									},
									"documentation": {
										"id": 1360,
										"nodeType": "StructuredDocumentation",
										"src": "2015:54:5",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 1368,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "2083:4:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1361,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2087:2:5"
									},
									"returnParameters": {
										"id": 1364,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1363,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1368,
												"src": "2119:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1362,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2119:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2118:15:5"
									},
									"scope": 1822,
									"src": "2074:89:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1919
									],
									"body": {
										"id": 1376,
										"nodeType": "Block",
										"src": "2338:31:5",
										"statements": [
											{
												"expression": {
													"id": 1374,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1342,
													"src": "2355:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 1373,
												"id": 1375,
												"nodeType": "Return",
												"src": "2348:14:5"
											}
										]
									},
									"documentation": {
										"id": 1369,
										"nodeType": "StructuredDocumentation",
										"src": "2169:102:5",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 1377,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "2285:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1370,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2291:2:5"
									},
									"returnParameters": {
										"id": 1373,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1372,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1377,
												"src": "2323:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1371,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2323:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2322:15:5"
									},
									"scope": 1822,
									"src": "2276:93:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1925
									],
									"body": {
										"id": 1385,
										"nodeType": "Block",
										"src": "3058:26:5",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 1383,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3075:2:5",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 1382,
												"id": 1384,
												"nodeType": "Return",
												"src": "3068:9:5"
											}
										]
									},
									"documentation": {
										"id": 1378,
										"nodeType": "StructuredDocumentation",
										"src": "2375:622:5",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 1386,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "3011:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1379,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3019:2:5"
									},
									"returnParameters": {
										"id": 1382,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1381,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1386,
												"src": "3051:5:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1380,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3051:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3050:7:5"
									},
									"scope": 1822,
									"src": "3002:82:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1849
									],
									"body": {
										"id": 1394,
										"nodeType": "Block",
										"src": "3205:36:5",
										"statements": [
											{
												"expression": {
													"id": 1392,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1338,
													"src": "3222:12:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1391,
												"id": 1393,
												"nodeType": "Return",
												"src": "3215:19:5"
											}
										]
									},
									"documentation": {
										"id": 1387,
										"nodeType": "StructuredDocumentation",
										"src": "3090:49:5",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 1395,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "3153:11:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1388,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3164:2:5"
									},
									"returnParameters": {
										"id": 1391,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1390,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1395,
												"src": "3196:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1389,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3196:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3195:9:5"
									},
									"scope": 1822,
									"src": "3144:97:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1857
									],
									"body": {
										"id": 1407,
										"nodeType": "Block",
										"src": "3373:42:5",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 1403,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1330,
														"src": "3390:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1405,
													"indexExpression": {
														"id": 1404,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1398,
														"src": "3400:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3390:18:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1402,
												"id": 1406,
												"nodeType": "Return",
												"src": "3383:25:5"
											}
										]
									},
									"documentation": {
										"id": 1396,
										"nodeType": "StructuredDocumentation",
										"src": "3247:47:5",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 1408,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "3308:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1399,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1398,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3326:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1408,
												"src": "3318:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1397,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3318:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3317:17:5"
									},
									"returnParameters": {
										"id": 1402,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1401,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1408,
												"src": "3364:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1400,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3364:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3363:9:5"
									},
									"scope": 1822,
									"src": "3299:116:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1867
									],
									"body": {
										"id": 1431,
										"nodeType": "Block",
										"src": "3685:103:5",
										"statements": [
											{
												"assignments": [
													1419
												],
												"declarations": [
													{
														"constant": false,
														"id": 1419,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "3703:5:5",
														"nodeType": "VariableDeclaration",
														"scope": 1431,
														"src": "3695:13:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1418,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3695:7:5",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1422,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1420,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1938,
														"src": "3711:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 1421,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3711:12:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3695:28:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1424,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1419,
															"src": "3743:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1425,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1411,
															"src": "3750:2:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1426,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1413,
															"src": "3754:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1423,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1552,
														"src": "3733:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1427,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3733:27:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1428,
												"nodeType": "ExpressionStatement",
												"src": "3733:27:5"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1429,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3777:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1417,
												"id": 1430,
												"nodeType": "Return",
												"src": "3770:11:5"
											}
										]
									},
									"documentation": {
										"id": 1409,
										"nodeType": "StructuredDocumentation",
										"src": "3421:184:5",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `value`."
									},
									"functionSelector": "a9059cbb",
									"id": 1432,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "3619:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1414,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1411,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3636:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 1432,
												"src": "3628:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1410,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3628:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1413,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3648:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1432,
												"src": "3640:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1412,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3640:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3627:27:5"
									},
									"returnParameters": {
										"id": 1417,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1416,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1432,
												"src": "3679:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1415,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3679:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3678:6:5"
									},
									"scope": 1822,
									"src": "3610:178:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1877
									],
									"body": {
										"id": 1448,
										"nodeType": "Block",
										"src": "3935:51:5",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 1442,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1336,
															"src": "3952:11:5",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 1444,
														"indexExpression": {
															"id": 1443,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1435,
															"src": "3964:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "3952:18:5",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1446,
													"indexExpression": {
														"id": 1445,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1437,
														"src": "3971:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3952:27:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1441,
												"id": 1447,
												"nodeType": "Return",
												"src": "3945:34:5"
											}
										]
									},
									"documentation": {
										"id": 1433,
										"nodeType": "StructuredDocumentation",
										"src": "3794:47:5",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 1449,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "3855:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1438,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1435,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3873:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1449,
												"src": "3865:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1434,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3865:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1437,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3888:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1449,
												"src": "3880:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1436,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3880:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3864:32:5"
									},
									"returnParameters": {
										"id": 1441,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1440,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1449,
												"src": "3926:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1439,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3926:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3925:9:5"
									},
									"scope": 1822,
									"src": "3846:140:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1887
									],
									"body": {
										"id": 1472,
										"nodeType": "Block",
										"src": "4372:107:5",
										"statements": [
											{
												"assignments": [
													1460
												],
												"declarations": [
													{
														"constant": false,
														"id": 1460,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4390:5:5",
														"nodeType": "VariableDeclaration",
														"scope": 1472,
														"src": "4382:13:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1459,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4382:7:5",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1463,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1461,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1938,
														"src": "4398:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 1462,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4398:12:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4382:28:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1465,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1460,
															"src": "4429:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1466,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1452,
															"src": "4436:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1467,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1454,
															"src": "4445:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1464,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1713,
															1773
														],
														"referencedDeclaration": 1713,
														"src": "4420:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1468,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4420:31:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1469,
												"nodeType": "ExpressionStatement",
												"src": "4420:31:5"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1470,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4468:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1458,
												"id": 1471,
												"nodeType": "Return",
												"src": "4461:11:5"
											}
										]
									},
									"documentation": {
										"id": 1450,
										"nodeType": "StructuredDocumentation",
										"src": "3992:296:5",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 1473,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4302:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1455,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1452,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4318:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1473,
												"src": "4310:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1451,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4310:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1454,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4335:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1473,
												"src": "4327:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1453,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4327:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4309:32:5"
									},
									"returnParameters": {
										"id": 1458,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1457,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1473,
												"src": "4366:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1456,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4366:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4365:6:5"
									},
									"scope": 1822,
									"src": "4293:186:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1899
									],
									"body": {
										"id": 1504,
										"nodeType": "Block",
										"src": "5132:151:5",
										"statements": [
											{
												"assignments": [
													1486
												],
												"declarations": [
													{
														"constant": false,
														"id": 1486,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "5150:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 1504,
														"src": "5142:15:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1485,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5142:7:5",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1489,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1487,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1938,
														"src": "5160:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 1488,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5160:12:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5142:30:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1491,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1476,
															"src": "5198:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1492,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1486,
															"src": "5204:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1493,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1480,
															"src": "5213:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1490,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1821,
														"src": "5182:15:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1494,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5182:37:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1495,
												"nodeType": "ExpressionStatement",
												"src": "5182:37:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1497,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1476,
															"src": "5239:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1498,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1478,
															"src": "5245:2:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1499,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1480,
															"src": "5249:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1496,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1552,
														"src": "5229:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1500,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5229:26:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1501,
												"nodeType": "ExpressionStatement",
												"src": "5229:26:5"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1502,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5272:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1484,
												"id": 1503,
												"nodeType": "Return",
												"src": "5265:11:5"
											}
										]
									},
									"documentation": {
										"id": 1474,
										"nodeType": "StructuredDocumentation",
										"src": "4485:549:5",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `value`.\n - the caller must have allowance for ``from``'s tokens of at least\n `value`."
									},
									"functionSelector": "23b872dd",
									"id": 1505,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "5048:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1481,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1476,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5069:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1505,
												"src": "5061:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1475,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5061:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1478,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5083:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 1505,
												"src": "5075:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1477,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5075:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1480,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5095:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1505,
												"src": "5087:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1479,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5087:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5060:41:5"
									},
									"returnParameters": {
										"id": 1484,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1483,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1505,
												"src": "5126:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1482,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5126:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5125:6:5"
									},
									"scope": 1822,
									"src": "5039:244:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1551,
										"nodeType": "Block",
										"src": "5725:231:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1520,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1515,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1508,
														"src": "5739:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1518,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5755:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1517,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5747:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1516,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5747:7:5",
																"typeDescriptions": {}
															}
														},
														"id": 1519,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5747:10:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5739:18:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1529,
												"nodeType": "IfStatement",
												"src": "5735:86:5",
												"trueBody": {
													"id": 1528,
													"nodeType": "Block",
													"src": "5759:62:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1524,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5807:1:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1523,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5799:7:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1522,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5799:7:5",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1525,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5799:10:5",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1521,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 933,
																	"src": "5780:18:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 1526,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5780:30:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1527,
															"nodeType": "RevertStatement",
															"src": "5773:37:5"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1535,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1530,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1510,
														"src": "5834:2:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1533,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5848:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1532,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5840:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1531,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5840:7:5",
																"typeDescriptions": {}
															}
														},
														"id": 1534,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5840:10:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5834:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1544,
												"nodeType": "IfStatement",
												"src": "5830:86:5",
												"trueBody": {
													"id": 1543,
													"nodeType": "Block",
													"src": "5852:64:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1539,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5902:1:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1538,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5894:7:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1537,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5894:7:5",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1540,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5894:10:5",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1536,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 938,
																	"src": "5873:20:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 1541,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5873:32:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1542,
															"nodeType": "RevertStatement",
															"src": "5866:39:5"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1546,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1508,
															"src": "5933:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1547,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1510,
															"src": "5939:2:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1548,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1512,
															"src": "5943:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1545,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1629,
														"src": "5925:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1549,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5925:24:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1550,
												"nodeType": "ExpressionStatement",
												"src": "5925:24:5"
											}
										]
									},
									"documentation": {
										"id": 1506,
										"nodeType": "StructuredDocumentation",
										"src": "5289:362:5",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 1552,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "5665:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1513,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1508,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5683:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1552,
												"src": "5675:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1507,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5675:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1510,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5697:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 1552,
												"src": "5689:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1509,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5689:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1512,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5709:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1552,
												"src": "5701:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1511,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5701:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5674:41:5"
									},
									"returnParameters": {
										"id": 1514,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5725:0:5"
									},
									"scope": 1822,
									"src": "5656:300:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1628,
										"nodeType": "Block",
										"src": "6346:1032:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1567,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1562,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1555,
														"src": "6360:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1565,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6376:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1564,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6368:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1563,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6368:7:5",
																"typeDescriptions": {}
															}
														},
														"id": 1566,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6368:10:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6360:18:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1599,
													"nodeType": "Block",
													"src": "6534:362:5",
													"statements": [
														{
															"assignments": [
																1574
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1574,
																	"mutability": "mutable",
																	"name": "fromBalance",
																	"nameLocation": "6556:11:5",
																	"nodeType": "VariableDeclaration",
																	"scope": 1599,
																	"src": "6548:19:5",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1573,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "6548:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1578,
															"initialValue": {
																"baseExpression": {
																	"id": 1575,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1330,
																	"src": "6570:9:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1577,
																"indexExpression": {
																	"id": 1576,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1555,
																	"src": "6580:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "6570:15:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6548:37:5"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1581,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1579,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1574,
																	"src": "6603:11:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 1580,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1559,
																	"src": "6617:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6603:19:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1589,
															"nodeType": "IfStatement",
															"src": "6599:115:5",
															"trueBody": {
																"id": 1588,
																"nodeType": "Block",
																"src": "6624:90:5",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 1583,
																					"name": "from",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1555,
																					"src": "6674:4:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 1584,
																					"name": "fromBalance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1574,
																					"src": "6680:11:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 1585,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1559,
																					"src": "6693:5:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 1582,
																				"name": "ERC20InsufficientBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 928,
																				"src": "6649:24:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
																					"typeString": "function (address,uint256,uint256) pure"
																				}
																			},
																			"id": 1586,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6649:50:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1587,
																		"nodeType": "RevertStatement",
																		"src": "6642:57:5"
																	}
																]
															}
														},
														{
															"id": 1598,
															"nodeType": "UncheckedBlock",
															"src": "6727:159:5",
															"statements": [
																{
																	"expression": {
																		"id": 1596,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 1590,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1330,
																				"src": "6834:9:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 1592,
																			"indexExpression": {
																				"id": 1591,
																				"name": "from",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1555,
																				"src": "6844:4:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "6834:15:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1595,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1593,
																				"name": "fromBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1574,
																				"src": "6852:11:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 1594,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1559,
																				"src": "6866:5:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "6852:19:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "6834:37:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1597,
																	"nodeType": "ExpressionStatement",
																	"src": "6834:37:5"
																}
															]
														}
													]
												},
												"id": 1600,
												"nodeType": "IfStatement",
												"src": "6356:540:5",
												"trueBody": {
													"id": 1572,
													"nodeType": "Block",
													"src": "6380:148:5",
													"statements": [
														{
															"expression": {
																"id": 1570,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1568,
																	"name": "_totalSupply",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1338,
																	"src": "6496:12:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"id": 1569,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1559,
																	"src": "6512:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6496:21:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1571,
															"nodeType": "ExpressionStatement",
															"src": "6496:21:5"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1606,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1601,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1557,
														"src": "6910:2:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1604,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6924:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1603,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6916:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1602,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6916:7:5",
																"typeDescriptions": {}
															}
														},
														"id": 1605,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6916:10:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6910:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1620,
													"nodeType": "Block",
													"src": "7125:206:5",
													"statements": [
														{
															"id": 1619,
															"nodeType": "UncheckedBlock",
															"src": "7139:182:5",
															"statements": [
																{
																	"expression": {
																		"id": 1617,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 1613,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1330,
																				"src": "7284:9:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 1615,
																			"indexExpression": {
																				"id": 1614,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1557,
																				"src": "7294:2:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "7284:13:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"id": 1616,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1559,
																			"src": "7301:5:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "7284:22:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1618,
																	"nodeType": "ExpressionStatement",
																	"src": "7284:22:5"
																}
															]
														}
													]
												},
												"id": 1621,
												"nodeType": "IfStatement",
												"src": "6906:425:5",
												"trueBody": {
													"id": 1612,
													"nodeType": "Block",
													"src": "6928:191:5",
													"statements": [
														{
															"id": 1611,
															"nodeType": "UncheckedBlock",
															"src": "6942:167:5",
															"statements": [
																{
																	"expression": {
																		"id": 1609,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1607,
																			"name": "_totalSupply",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1338,
																			"src": "7073:12:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "-=",
																		"rightHandSide": {
																			"id": 1608,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1559,
																			"src": "7089:5:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "7073:21:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1610,
																	"nodeType": "ExpressionStatement",
																	"src": "7073:21:5"
																}
															]
														}
													]
												}
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1623,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1555,
															"src": "7355:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1624,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1557,
															"src": "7361:2:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1625,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1559,
															"src": "7365:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1622,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1834,
														"src": "7346:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1626,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7346:25:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1627,
												"nodeType": "EmitStatement",
												"src": "7341:30:5"
											}
										]
									},
									"documentation": {
										"id": 1553,
										"nodeType": "StructuredDocumentation",
										"src": "5962:304:5",
										"text": " @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n this function.\n Emits a {Transfer} event."
									},
									"id": 1629,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_update",
									"nameLocation": "6280:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1560,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1555,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6296:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1629,
												"src": "6288:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1554,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6288:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1557,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6310:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 1629,
												"src": "6302:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1556,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6302:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1559,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6322:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1629,
												"src": "6314:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1558,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6314:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6287:41:5"
									},
									"returnParameters": {
										"id": 1561,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6346:0:5"
									},
									"scope": 1822,
									"src": "6271:1107:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1661,
										"nodeType": "Block",
										"src": "7777:152:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1642,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1637,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1632,
														"src": "7791:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1640,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7810:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1639,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7802:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1638,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "7802:7:5",
																"typeDescriptions": {}
															}
														},
														"id": 1641,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7802:10:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "7791:21:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1651,
												"nodeType": "IfStatement",
												"src": "7787:91:5",
												"trueBody": {
													"id": 1650,
													"nodeType": "Block",
													"src": "7814:64:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1646,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "7864:1:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1645,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "7856:7:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1644,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "7856:7:5",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1647,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7856:10:5",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1643,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 938,
																	"src": "7835:20:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 1648,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7835:32:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1649,
															"nodeType": "RevertStatement",
															"src": "7828:39:5"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1655,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7903:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1654,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "7895:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1653,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "7895:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 1656,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7895:10:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1657,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1632,
															"src": "7907:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1658,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1634,
															"src": "7916:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1652,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1629,
														"src": "7887:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1659,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7887:35:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1660,
												"nodeType": "ExpressionStatement",
												"src": "7887:35:5"
											}
										]
									},
									"documentation": {
										"id": 1630,
										"nodeType": "StructuredDocumentation",
										"src": "7384:332:5",
										"text": " @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n Relies on the `_update` mechanism\n Emits a {Transfer} event with `from` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 1662,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "7730:5:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1635,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1632,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7744:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1662,
												"src": "7736:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1631,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7736:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1634,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "7761:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1662,
												"src": "7753:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1633,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7753:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7735:32:5"
									},
									"returnParameters": {
										"id": 1636,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7777:0:5"
									},
									"scope": 1822,
									"src": "7721:208:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1694,
										"nodeType": "Block",
										"src": "8303:150:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1675,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1670,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1665,
														"src": "8317:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1673,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8336:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1672,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "8328:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1671,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "8328:7:5",
																"typeDescriptions": {}
															}
														},
														"id": 1674,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8328:10:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "8317:21:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1684,
												"nodeType": "IfStatement",
												"src": "8313:89:5",
												"trueBody": {
													"id": 1683,
													"nodeType": "Block",
													"src": "8340:62:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1679,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "8388:1:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1678,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "8380:7:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1677,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "8380:7:5",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1680,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8380:10:5",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1676,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 933,
																	"src": "8361:18:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 1681,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8361:30:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1682,
															"nodeType": "RevertStatement",
															"src": "8354:37:5"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1686,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1665,
															"src": "8419:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1689,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8436:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1688,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8428:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1687,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8428:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 1690,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8428:10:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1691,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1667,
															"src": "8440:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1685,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1629,
														"src": "8411:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1692,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8411:35:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1693,
												"nodeType": "ExpressionStatement",
												"src": "8411:35:5"
											}
										]
									},
									"documentation": {
										"id": 1663,
										"nodeType": "StructuredDocumentation",
										"src": "7935:307:5",
										"text": " @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n Relies on the `_update` mechanism.\n Emits a {Transfer} event with `to` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead"
									},
									"id": 1695,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "8256:5:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1668,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1665,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8270:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1695,
												"src": "8262:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1664,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8262:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1667,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8287:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1695,
												"src": "8279:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1666,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8279:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8261:32:5"
									},
									"returnParameters": {
										"id": 1669,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8303:0:5"
									},
									"scope": 1822,
									"src": "8247:206:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1712,
										"nodeType": "Block",
										"src": "9063:54:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1706,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1698,
															"src": "9082:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1707,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1700,
															"src": "9089:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1708,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1702,
															"src": "9098:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "74727565",
															"id": 1709,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9105:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1705,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1713,
															1773
														],
														"referencedDeclaration": 1773,
														"src": "9073:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
															"typeString": "function (address,address,uint256,bool)"
														}
													},
													"id": 1710,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9073:37:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1711,
												"nodeType": "ExpressionStatement",
												"src": "9073:37:5"
											}
										]
									},
									"documentation": {
										"id": 1696,
										"nodeType": "StructuredDocumentation",
										"src": "8459:525:5",
										"text": " @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."
									},
									"id": 1713,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "8998:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1703,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1698,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9015:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1713,
												"src": "9007:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1697,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9007:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1700,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "9030:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1713,
												"src": "9022:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1699,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9022:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1702,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9047:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1713,
												"src": "9039:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1701,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9039:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9006:47:5"
									},
									"returnParameters": {
										"id": 1704,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9063:0:5"
									},
									"scope": 1822,
									"src": "8989:128:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1772,
										"nodeType": "Block",
										"src": "10047:334:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1730,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1725,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1716,
														"src": "10061:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1728,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10078:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1727,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "10070:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1726,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "10070:7:5",
																"typeDescriptions": {}
															}
														},
														"id": 1729,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "10070:10:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "10061:19:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1739,
												"nodeType": "IfStatement",
												"src": "10057:89:5",
												"trueBody": {
													"id": 1738,
													"nodeType": "Block",
													"src": "10082:64:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1734,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10132:1:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1733,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "10124:7:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1732,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "10124:7:5",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1735,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10124:10:5",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1731,
																	"name": "ERC20InvalidApprover",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 952,
																	"src": "10103:20:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 1736,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10103:32:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1737,
															"nodeType": "RevertStatement",
															"src": "10096:39:5"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1745,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1740,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1718,
														"src": "10159:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1743,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10178:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1742,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "10170:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1741,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "10170:7:5",
																"typeDescriptions": {}
															}
														},
														"id": 1744,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "10170:10:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "10159:21:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1754,
												"nodeType": "IfStatement",
												"src": "10155:90:5",
												"trueBody": {
													"id": 1753,
													"nodeType": "Block",
													"src": "10182:63:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1749,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10231:1:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1748,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "10223:7:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1747,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "10223:7:5",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1750,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10223:10:5",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1746,
																	"name": "ERC20InvalidSpender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 957,
																	"src": "10203:19:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 1751,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10203:31:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1752,
															"nodeType": "RevertStatement",
															"src": "10196:38:5"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1761,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 1755,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1336,
																"src": "10254:11:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 1758,
															"indexExpression": {
																"id": 1756,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1716,
																"src": "10266:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10254:18:5",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1759,
														"indexExpression": {
															"id": 1757,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1718,
															"src": "10273:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10254:27:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1760,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1720,
														"src": "10284:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10254:35:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1762,
												"nodeType": "ExpressionStatement",
												"src": "10254:35:5"
											},
											{
												"condition": {
													"id": 1763,
													"name": "emitEvent",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1722,
													"src": "10303:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1771,
												"nodeType": "IfStatement",
												"src": "10299:76:5",
												"trueBody": {
													"id": 1770,
													"nodeType": "Block",
													"src": "10314:61:5",
													"statements": [
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 1765,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1716,
																		"src": "10342:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1766,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1718,
																		"src": "10349:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1767,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1720,
																		"src": "10358:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1764,
																	"name": "Approval",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1843,
																	"src": "10333:8:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,uint256)"
																	}
																},
																"id": 1768,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10333:31:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1769,
															"nodeType": "EmitStatement",
															"src": "10328:36:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1714,
										"nodeType": "StructuredDocumentation",
										"src": "9123:821:5",
										"text": " @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n `Approval` event during `transferFrom` operations.\n Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n true using the following override:\n ```\n function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     super._approve(owner, spender, value, true);\n }\n ```\n Requirements are the same as {_approve}."
									},
									"id": 1773,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "9958:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1723,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1716,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9975:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1773,
												"src": "9967:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1715,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9967:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1718,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "9990:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1773,
												"src": "9982:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1717,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9982:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1720,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10007:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1773,
												"src": "9999:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1719,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9999:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1722,
												"mutability": "mutable",
												"name": "emitEvent",
												"nameLocation": "10019:9:5",
												"nodeType": "VariableDeclaration",
												"scope": 1773,
												"src": "10014:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1721,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "10014:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9966:63:5"
									},
									"returnParameters": {
										"id": 1724,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10047:0:5"
									},
									"scope": 1822,
									"src": "9949:432:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1820,
										"nodeType": "Block",
										"src": "10752:388:5",
										"statements": [
											{
												"assignments": [
													1784
												],
												"declarations": [
													{
														"constant": false,
														"id": 1784,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "10770:16:5",
														"nodeType": "VariableDeclaration",
														"scope": 1820,
														"src": "10762:24:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1783,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10762:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1789,
												"initialValue": {
													"arguments": [
														{
															"id": 1786,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1776,
															"src": "10799:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1787,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1778,
															"src": "10806:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1785,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1449,
														"src": "10789:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 1788,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10789:25:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10762:52:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1796,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1790,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1784,
														"src": "10828:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 1793,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10853:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 1792,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "10853:7:5",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 1791,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "10848:4:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 1794,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10848:13:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 1795,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "10862:3:5",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "10848:17:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10828:37:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1819,
												"nodeType": "IfStatement",
												"src": "10824:310:5",
												"trueBody": {
													"id": 1818,
													"nodeType": "Block",
													"src": "10867:267:5",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1799,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1797,
																	"name": "currentAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1784,
																	"src": "10885:16:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 1798,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1780,
																	"src": "10904:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10885:24:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1807,
															"nodeType": "IfStatement",
															"src": "10881:130:5",
															"trueBody": {
																"id": 1806,
																"nodeType": "Block",
																"src": "10911:100:5",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 1801,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1778,
																					"src": "10963:7:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 1802,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1784,
																					"src": "10972:16:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 1803,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1780,
																					"src": "10990:5:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 1800,
																				"name": "ERC20InsufficientAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 947,
																				"src": "10936:26:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
																					"typeString": "function (address,uint256,uint256) pure"
																				}
																			},
																			"id": 1804,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "10936:60:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1805,
																		"nodeType": "RevertStatement",
																		"src": "10929:67:5"
																	}
																]
															}
														},
														{
															"id": 1817,
															"nodeType": "UncheckedBlock",
															"src": "11024:100:5",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 1809,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1776,
																				"src": "11061:5:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 1810,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1778,
																				"src": "11068:7:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1813,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1811,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1784,
																					"src": "11077:16:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 1812,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1780,
																					"src": "11096:5:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11077:24:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"hexValue": "66616c7365",
																				"id": 1814,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "bool",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "11103:5:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				},
																				"value": "false"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			],
																			"id": 1808,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [
																				1713,
																				1773
																			],
																			"referencedDeclaration": 1773,
																			"src": "11052:8:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
																				"typeString": "function (address,address,uint256,bool)"
																			}
																		},
																		"id": 1815,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11052:57:5",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 1816,
																	"nodeType": "ExpressionStatement",
																	"src": "11052:57:5"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1774,
										"nodeType": "StructuredDocumentation",
										"src": "10387:271:5",
										"text": " @dev Updates `owner` s allowance for `spender` based on spent `value`.\n Does not update the allowance value in case of infinite allowance.\n Revert if not enough allowance is available.\n Does not emit an {Approval} event."
									},
									"id": 1821,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "10672:15:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1781,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1776,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10696:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1821,
												"src": "10688:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1775,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10688:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1778,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10711:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1821,
												"src": "10703:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1777,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10703:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1780,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10728:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1821,
												"src": "10720:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1779,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10720:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10687:47:5"
									},
									"returnParameters": {
										"id": 1782,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10752:0:5"
									},
									"scope": 1822,
									"src": "10663:477:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1823,
							"src": "1401:9741:5",
							"usedErrors": [
								928,
								933,
								938,
								947,
								952,
								957
							],
							"usedEvents": [
								1834,
								1843
							]
						}
					],
					"src": "105:11038:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							1900
						]
					},
					"id": 1901,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1824,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "106:24:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1825,
								"nodeType": "StructuredDocumentation",
								"src": "132:70:6",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 1900,
							"linearizedBaseContracts": [
								1900
							],
							"name": "IERC20",
							"nameLocation": "213:6:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 1826,
										"nodeType": "StructuredDocumentation",
										"src": "226:158:6",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 1834,
									"name": "Transfer",
									"nameLocation": "395:8:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1833,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1828,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "420:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 1834,
												"src": "404:20:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1827,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "404:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1830,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "442:2:6",
												"nodeType": "VariableDeclaration",
												"scope": 1834,
												"src": "426:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1829,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "426:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1832,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "454:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1834,
												"src": "446:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1831,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "446:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "403:57:6"
									},
									"src": "389:72:6"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1835,
										"nodeType": "StructuredDocumentation",
										"src": "467:148:6",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 1843,
									"name": "Approval",
									"nameLocation": "626:8:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1842,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1837,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "651:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1843,
												"src": "635:21:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1836,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "635:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1839,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "674:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 1843,
												"src": "658:23:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1838,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "658:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1841,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "691:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1843,
												"src": "683:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1840,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "683:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "634:63:6"
									},
									"src": "620:78:6"
								},
								{
									"documentation": {
										"id": 1844,
										"nodeType": "StructuredDocumentation",
										"src": "704:65:6",
										"text": " @dev Returns the value of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 1849,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1845,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:6"
									},
									"returnParameters": {
										"id": 1848,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1847,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1849,
												"src": "820:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1846,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:6"
									},
									"scope": 1900,
									"src": "774:55:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1850,
										"nodeType": "StructuredDocumentation",
										"src": "835:71:6",
										"text": " @dev Returns the value of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 1857,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "920:9:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1853,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1852,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "938:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 1857,
												"src": "930:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1851,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "930:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "929:17:6"
									},
									"returnParameters": {
										"id": 1856,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1855,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1857,
												"src": "970:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1854,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "970:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "969:9:6"
									},
									"scope": 1900,
									"src": "911:68:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1858,
										"nodeType": "StructuredDocumentation",
										"src": "985:213:6",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 1867,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1212:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1863,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1860,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1229:2:6",
												"nodeType": "VariableDeclaration",
												"scope": 1867,
												"src": "1221:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1859,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1221:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1862,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1241:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1867,
												"src": "1233:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1861,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1233:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1220:27:6"
									},
									"returnParameters": {
										"id": 1866,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1865,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1867,
												"src": "1266:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1864,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1266:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1265:6:6"
									},
									"scope": 1900,
									"src": "1203:69:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1868,
										"nodeType": "StructuredDocumentation",
										"src": "1278:264:6",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 1877,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1556:9:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1873,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1870,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1574:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1877,
												"src": "1566:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1869,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1566:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1872,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1589:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 1877,
												"src": "1581:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1871,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1581:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1565:32:6"
									},
									"returnParameters": {
										"id": 1876,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1875,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1877,
												"src": "1621:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1874,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1621:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1620:9:6"
									},
									"scope": 1900,
									"src": "1547:83:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1878,
										"nodeType": "StructuredDocumentation",
										"src": "1636:667:6",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 1887,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2317:7:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1883,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1880,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2333:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 1887,
												"src": "2325:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1879,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2325:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1882,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2350:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1887,
												"src": "2342:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1881,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2342:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2324:32:6"
									},
									"returnParameters": {
										"id": 1886,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1885,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1887,
												"src": "2375:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1884,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2375:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2374:6:6"
									},
									"scope": 1900,
									"src": "2308:73:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1888,
										"nodeType": "StructuredDocumentation",
										"src": "2387:297:6",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 1899,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2698:12:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1895,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1890,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2719:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 1899,
												"src": "2711:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1889,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2711:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1892,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2733:2:6",
												"nodeType": "VariableDeclaration",
												"scope": 1899,
												"src": "2725:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1891,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2725:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1894,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2745:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1899,
												"src": "2737:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1893,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2737:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2710:41:6"
									},
									"returnParameters": {
										"id": 1898,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1897,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1899,
												"src": "2770:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1896,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2770:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2769:6:6"
									},
									"scope": 1900,
									"src": "2689:87:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1901,
							"src": "203:2575:6",
							"usedErrors": [],
							"usedEvents": [
								1834,
								1843
							]
						}
					],
					"src": "106:2673:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
					"exportedSymbols": {
						"IERC20": [
							1900
						],
						"IERC20Metadata": [
							1926
						]
					},
					"id": 1927,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1902,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "125:24:7"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 1904,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1927,
							"sourceUnit": 1901,
							"src": "151:37:7",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1903,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1900,
										"src": "159:6:7",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1906,
										"name": "IERC20",
										"nameLocations": [
											"305:6:7"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1900,
										"src": "305:6:7"
									},
									"id": 1907,
									"nodeType": "InheritanceSpecifier",
									"src": "305:6:7"
								}
							],
							"canonicalName": "IERC20Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1905,
								"nodeType": "StructuredDocumentation",
								"src": "190:86:7",
								"text": " @dev Interface for the optional metadata functions from the ERC20 standard."
							},
							"fullyImplemented": false,
							"id": 1926,
							"linearizedBaseContracts": [
								1926,
								1900
							],
							"name": "IERC20Metadata",
							"nameLocation": "287:14:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1908,
										"nodeType": "StructuredDocumentation",
										"src": "318:54:7",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 1913,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "386:4:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1909,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "390:2:7"
									},
									"returnParameters": {
										"id": 1912,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1911,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1913,
												"src": "416:13:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1910,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "416:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "415:15:7"
									},
									"scope": 1926,
									"src": "377:54:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1914,
										"nodeType": "StructuredDocumentation",
										"src": "437:56:7",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 1919,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "507:6:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1915,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "513:2:7"
									},
									"returnParameters": {
										"id": 1918,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1917,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1919,
												"src": "539:13:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1916,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "539:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "538:15:7"
									},
									"scope": 1926,
									"src": "498:56:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1920,
										"nodeType": "StructuredDocumentation",
										"src": "560:65:7",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 1925,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "639:8:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1921,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "647:2:7"
									},
									"returnParameters": {
										"id": 1924,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1923,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1925,
												"src": "673:5:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1922,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "673:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "672:7:7"
									},
									"scope": 1926,
									"src": "630:50:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1927,
							"src": "277:405:7",
							"usedErrors": [],
							"usedEvents": [
								1834,
								1843
							]
						}
					],
					"src": "125:558:7"
				},
				"id": 7
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							1956
						]
					},
					"id": 1957,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1928,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:8"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1929,
								"nodeType": "StructuredDocumentation",
								"src": "127:496:8",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 1956,
							"linearizedBaseContracts": [
								1956
							],
							"name": "Context",
							"nameLocation": "642:7:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1937,
										"nodeType": "Block",
										"src": "718:34:8",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1934,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "735:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1935,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "739:6:8",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "735:10:8",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1933,
												"id": 1936,
												"nodeType": "Return",
												"src": "728:17:8"
											}
										]
									},
									"id": 1938,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "665:10:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1930,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "675:2:8"
									},
									"returnParameters": {
										"id": 1933,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1932,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1938,
												"src": "709:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1931,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "709:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "708:9:8"
									},
									"scope": 1956,
									"src": "656:96:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1946,
										"nodeType": "Block",
										"src": "825:32:8",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1943,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "842:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1944,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "846:4:8",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "842:8:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 1942,
												"id": 1945,
												"nodeType": "Return",
												"src": "835:15:8"
											}
										]
									},
									"id": 1947,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "767:8:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1939,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "775:2:8"
									},
									"returnParameters": {
										"id": 1942,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1941,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1947,
												"src": "809:14:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1940,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "809:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "808:16:8"
									},
									"scope": 1956,
									"src": "758:99:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1954,
										"nodeType": "Block",
										"src": "935:25:8",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 1952,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "952:1:8",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 1951,
												"id": 1953,
												"nodeType": "Return",
												"src": "945:8:8"
											}
										]
									},
									"id": 1955,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contextSuffixLength",
									"nameLocation": "872:20:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1948,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "892:2:8"
									},
									"returnParameters": {
										"id": 1951,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1950,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1955,
												"src": "926:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1949,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "926:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "925:9:8"
									},
									"scope": 1956,
									"src": "863:97:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1957,
							"src": "624:338:8",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "101:862:8"
				},
				"id": 8
			},
			"src/erc20/ERC20Received.sol": {
				"ast": {
					"absolutePath": "src/erc20/ERC20Received.sol",
					"exportedSymbols": {
						"ERC20Received": [
							1968
						]
					},
					"id": 1969,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1958,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".25"
							],
							"nodeType": "PragmaDirective",
							"src": "33:24:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ERC20Received",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 1968,
							"linearizedBaseContracts": [
								1968
							],
							"name": "ERC20Received",
							"nameLocation": "69:13:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "24a756d1",
									"id": 1967,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokensReceived",
									"nameLocation": "98:14:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1963,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1960,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1967,
												"src": "113:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1959,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "113:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1962,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1967,
												"src": "122:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1961,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "122:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "112:18:9"
									},
									"returnParameters": {
										"id": 1966,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1965,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "154:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1967,
												"src": "149:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1964,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "149:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "148:14:9"
									},
									"scope": 1968,
									"src": "89:74:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1969,
							"src": "59:106:9",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "33:132:9"
				},
				"id": 9
			},
			"src/upgrade/MyERC20V1.sol": {
				"ast": {
					"absolutePath": "src/upgrade/MyERC20V1.sol",
					"exportedSymbols": {
						"ERC20": [
							1822
						],
						"ERC20Received": [
							1968
						],
						"ERC20Upgradeable": [
							870
						],
						"Initializable": [
							1307
						],
						"MyERC20V1": [
							2019
						]
					},
					"id": 2020,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1970,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".25"
							],
							"nodeType": "PragmaDirective",
							"src": "33:24:10"
						},
						{
							"absolutePath": "src/erc20/ERC20Received.sol",
							"file": "../erc20/ERC20Received.sol",
							"id": 1972,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2020,
							"sourceUnit": 1969,
							"src": "59:57:10",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1971,
										"name": "ERC20Received",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1968,
										"src": "67:13:10",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"id": 1974,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2020,
							"sourceUnit": 1823,
							"src": "117:68:10",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1973,
										"name": "ERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1822,
										"src": "125:5:10",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/proxy/utils/Initializable.sol",
							"file": "@openzeppelin/contracts/proxy/utils/Initializable.sol",
							"id": 1976,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2020,
							"sourceUnit": 1308,
							"src": "186:84:10",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1975,
										"name": "Initializable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1307,
										"src": "194:13:10",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",
							"id": 1978,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2020,
							"sourceUnit": 871,
							"src": "271:102:10",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1977,
										"name": "ERC20Upgradeable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 870,
										"src": "279:16:10",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1979,
										"name": "ERC20Upgradeable",
										"nameLocations": [
											"396:16:10"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 870,
										"src": "396:16:10"
									},
									"id": 1980,
									"nodeType": "InheritanceSpecifier",
									"src": "396:16:10"
								}
							],
							"canonicalName": "MyERC20V1",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 2019,
							"linearizedBaseContracts": [
								2019,
								870,
								958,
								1926,
								1900,
								916,
								253
							],
							"name": "MyERC20V1",
							"nameLocation": "383:9:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2004,
										"nodeType": "Block",
										"src": "461:112:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"hexValue": "4d7945524332305631",
															"id": 1986,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "484:11:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8efe90f903835b6113a7023e3ee5ab44e17f5627a7ae16bbafc8d4f4faac7225",
																"typeString": "literal_string \"MyERC20V1\""
															},
															"value": "MyERC20V1"
														},
														{
															"hexValue": "4d31",
															"id": 1987,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "497:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b12041addd3285c2b6d2a98e6dc83b6f7dc08f5942fa2296e6ce355782d133de",
																"typeString": "literal_string \"M1\""
															},
															"value": "M1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_8efe90f903835b6113a7023e3ee5ab44e17f5627a7ae16bbafc8d4f4faac7225",
																"typeString": "literal_string \"MyERC20V1\""
															},
															{
																"typeIdentifier": "t_stringliteral_b12041addd3285c2b6d2a98e6dc83b6f7dc08f5942fa2296e6ce355782d133de",
																"typeString": "literal_string \"M1\""
															}
														],
														"id": 1985,
														"name": "__ERC20_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 321,
														"src": "471:12:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (string memory,string memory)"
														}
													},
													"id": 1988,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "471:31:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1989,
												"nodeType": "ExpressionStatement",
												"src": "471:31:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1991,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "518:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1992,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "522:6:10",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "518:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2001,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "31303030303030",
																"id": 1993,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "530:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000_by_1",
																	"typeString": "int_const 1000000"
																},
																"value": "1000000"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2000,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 1994,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "540:2:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"arguments": [
																		{
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 1997,
																				"name": "decimals",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 390,
																				"src": "554:8:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_view$__$returns$_t_uint8_$",
																					"typeString": "function () view returns (uint8)"
																				}
																			},
																			"id": 1998,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "554:10:10",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		],
																		"id": 1996,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "546:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 1995,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "546:7:10",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1999,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "546:19:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "540:25:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "530:35:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1990,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 702,
														"src": "512:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 2002,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "512:54:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2003,
												"nodeType": "ExpressionStatement",
												"src": "512:54:10"
											}
										]
									},
									"functionSelector": "8129fc1c",
									"id": 2005,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1983,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1982,
												"name": "initializer",
												"nameLocations": [
													"449:11:10"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 107,
												"src": "449:11:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "449:11:10"
										}
									],
									"name": "initialize",
									"nameLocation": "427:10:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1981,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "437:2:10"
									},
									"returnParameters": {
										"id": 1984,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "461:0:10"
									},
									"scope": 2019,
									"src": "418:155:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 2017,
										"nodeType": "Block",
										"src": "632:34:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2013,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2007,
															"src": "648:2:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2014,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2009,
															"src": "652:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2012,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 702,
														"src": "642:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 2015,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "642:17:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2016,
												"nodeType": "ExpressionStatement",
												"src": "642:17:10"
											}
										]
									},
									"functionSelector": "40c10f19",
									"id": 2018,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nameLocation": "592:4:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2010,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2007,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "605:2:10",
												"nodeType": "VariableDeclaration",
												"scope": 2018,
												"src": "597:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2006,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "597:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2009,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "617:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 2018,
												"src": "609:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2008,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "609:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "596:28:10"
									},
									"returnParameters": {
										"id": 2011,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "632:0:10"
									},
									"scope": 2019,
									"src": "583:83:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 2020,
							"src": "374:294:10",
							"usedErrors": [
								16,
								19,
								928,
								933,
								938,
								947,
								952,
								957
							],
							"usedEvents": [
								24,
								1834,
								1843
							]
						}
					],
					"src": "33:908:10"
				},
				"id": 10
			}
		}
	}
}